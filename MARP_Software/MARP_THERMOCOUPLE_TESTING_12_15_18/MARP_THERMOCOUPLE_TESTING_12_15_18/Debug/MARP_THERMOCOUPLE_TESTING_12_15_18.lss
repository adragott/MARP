
MARP_THERMOCOUPLE_TESTING_12_15_18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00002ad8  00002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000074  20000000  00002ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000208  20000074  00002b54  00020074  2**2
                  ALLOC
  4 .stack        00002004  2000027c  00002d5c  00020074  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00036afc  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004750  00000000  00000000  00056bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005d8  00000000  00000000  0005b341  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000aa8  00000000  00000000  0005b919  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001bd62  00000000  00000000  0005c3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f0d3  00000000  00000000  00078123  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000917bb  00000000  00000000  000871f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001100  00000000  00000000  001189b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007e2c  00000000  00000000  00119ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	80 22 00 20 6d 1b 00 00 69 1b 00 00 69 1b 00 00     .". m...i...i...
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	69 1b 00 00 00 00 00 00 00 00 00 00 69 1b 00 00     i...........i...
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	15 01 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     ....i...i...i...
			time.hour = 12;
      5c:	69 1b 00 00 69 1b 00 00 3d 05 00 00 4d 05 00 00     i...i...=...M...
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	5d 05 00 00 6d 05 00 00 7d 05 00 00 8d 05 00 00     ]...m...}.......
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
		if (time.pm == 1) {
      9c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
			time.pm = 0;
      ac:	69 1b 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	00002ae0 	.word	0x00002ae0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00002ae0 	.word	0x00002ae0
     10c:	00002ae0 	.word	0x00002ae0
     110:	00000000 	.word	0x00000000

00000114 <RTC_Handler>:
     114:	b510      	push	{r4, lr}
     116:	4b0f      	ldr	r3, [pc, #60]	; (154 <RTC_Handler+0x40>)
     118:	681a      	ldr	r2, [r3, #0]
     11a:	6814      	ldr	r4, [r2, #0]
	struct rtc_module *module = _rtc_instance[instance_index];

	Rtc *const rtc_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     11c:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
     11e:	8a13      	ldrh	r3, [r2, #16]
     120:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     122:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     124:	79e3      	ldrb	r3, [r4, #7]
     126:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     128:	b258      	sxtb	r0, r3
     12a:	2800      	cmp	r0, #0
     12c:	db06      	blt.n	13c <RTC_Handler+0x28>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     12e:	07db      	lsls	r3, r3, #31
     130:	d503      	bpl.n	13a <RTC_Handler+0x26>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     132:	07cb      	lsls	r3, r1, #31
     134:	d40a      	bmi.n	14c <RTC_Handler+0x38>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     136:	2301      	movs	r3, #1
     138:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     13a:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     13c:	078b      	lsls	r3, r1, #30
     13e:	d402      	bmi.n	146 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     140:	2380      	movs	r3, #128	; 0x80
     142:	7223      	strb	r3, [r4, #8]
     144:	e7f9      	b.n	13a <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     146:	68d3      	ldr	r3, [r2, #12]
     148:	4798      	blx	r3
     14a:	e7f9      	b.n	140 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     14c:	6893      	ldr	r3, [r2, #8]
     14e:	4798      	blx	r3
     150:	e7f1      	b.n	136 <RTC_Handler+0x22>
     152:	46c0      	nop			; (mov r8, r8)
     154:	200000d8 	.word	0x200000d8

00000158 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	46de      	mov	lr, fp
     15c:	4657      	mov	r7, sl
     15e:	464e      	mov	r6, r9
     160:	4645      	mov	r5, r8
     162:	b5e0      	push	{r5, r6, r7, lr}
     164:	b087      	sub	sp, #28
     166:	4680      	mov	r8, r0
     168:	9104      	str	r1, [sp, #16]
     16a:	0016      	movs	r6, r2
     16c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     16e:	2200      	movs	r2, #0
     170:	2300      	movs	r3, #0
     172:	2100      	movs	r1, #0
     174:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     176:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     178:	2001      	movs	r0, #1
     17a:	0021      	movs	r1, r4
     17c:	9600      	str	r6, [sp, #0]
     17e:	9701      	str	r7, [sp, #4]
     180:	465c      	mov	r4, fp
     182:	9403      	str	r4, [sp, #12]
     184:	4644      	mov	r4, r8
     186:	9405      	str	r4, [sp, #20]
     188:	e013      	b.n	1b2 <long_division+0x5a>
     18a:	2420      	movs	r4, #32
     18c:	1a64      	subs	r4, r4, r1
     18e:	0005      	movs	r5, r0
     190:	40e5      	lsrs	r5, r4
     192:	46a8      	mov	r8, r5
     194:	e014      	b.n	1c0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     196:	9c00      	ldr	r4, [sp, #0]
     198:	9d01      	ldr	r5, [sp, #4]
     19a:	1b12      	subs	r2, r2, r4
     19c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     19e:	465c      	mov	r4, fp
     1a0:	464d      	mov	r5, r9
     1a2:	432c      	orrs	r4, r5
     1a4:	46a3      	mov	fp, r4
     1a6:	9c03      	ldr	r4, [sp, #12]
     1a8:	4645      	mov	r5, r8
     1aa:	432c      	orrs	r4, r5
     1ac:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     1ae:	3901      	subs	r1, #1
     1b0:	d325      	bcc.n	1fe <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     1b2:	2420      	movs	r4, #32
     1b4:	4264      	negs	r4, r4
     1b6:	190c      	adds	r4, r1, r4
     1b8:	d4e7      	bmi.n	18a <long_division+0x32>
     1ba:	0005      	movs	r5, r0
     1bc:	40a5      	lsls	r5, r4
     1be:	46a8      	mov	r8, r5
     1c0:	0004      	movs	r4, r0
     1c2:	408c      	lsls	r4, r1
     1c4:	46a1      	mov	r9, r4
		r = r << 1;
     1c6:	1892      	adds	r2, r2, r2
     1c8:	415b      	adcs	r3, r3
     1ca:	0014      	movs	r4, r2
     1cc:	001d      	movs	r5, r3
		if (n & bit_shift) {
     1ce:	9e05      	ldr	r6, [sp, #20]
     1d0:	464f      	mov	r7, r9
     1d2:	403e      	ands	r6, r7
     1d4:	46b4      	mov	ip, r6
     1d6:	9e04      	ldr	r6, [sp, #16]
     1d8:	4647      	mov	r7, r8
     1da:	403e      	ands	r6, r7
     1dc:	46b2      	mov	sl, r6
     1de:	4666      	mov	r6, ip
     1e0:	4657      	mov	r7, sl
     1e2:	433e      	orrs	r6, r7
     1e4:	d003      	beq.n	1ee <long_division+0x96>
			r |= 0x01;
     1e6:	0006      	movs	r6, r0
     1e8:	4326      	orrs	r6, r4
     1ea:	0032      	movs	r2, r6
     1ec:	002b      	movs	r3, r5
		if (r >= d) {
     1ee:	9c00      	ldr	r4, [sp, #0]
     1f0:	9d01      	ldr	r5, [sp, #4]
     1f2:	429d      	cmp	r5, r3
     1f4:	d8db      	bhi.n	1ae <long_division+0x56>
     1f6:	d1ce      	bne.n	196 <long_division+0x3e>
     1f8:	4294      	cmp	r4, r2
     1fa:	d8d8      	bhi.n	1ae <long_division+0x56>
     1fc:	e7cb      	b.n	196 <long_division+0x3e>
     1fe:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     200:	4658      	mov	r0, fp
     202:	0019      	movs	r1, r3
     204:	b007      	add	sp, #28
     206:	bc3c      	pop	{r2, r3, r4, r5}
     208:	4690      	mov	r8, r2
     20a:	4699      	mov	r9, r3
     20c:	46a2      	mov	sl, r4
     20e:	46ab      	mov	fp, r5
     210:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000212 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     212:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     214:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     216:	2340      	movs	r3, #64	; 0x40
     218:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     21a:	4281      	cmp	r1, r0
     21c:	d202      	bcs.n	224 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     21e:	0018      	movs	r0, r3
     220:	bd10      	pop	{r4, pc}
		baud_calculated++;
     222:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     224:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     226:	1c63      	adds	r3, r4, #1
     228:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     22a:	4288      	cmp	r0, r1
     22c:	d9f9      	bls.n	222 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     22e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     230:	2cff      	cmp	r4, #255	; 0xff
     232:	d8f4      	bhi.n	21e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     234:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     236:	2300      	movs	r3, #0
     238:	e7f1      	b.n	21e <_sercom_get_sync_baud_val+0xc>
	...

0000023c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     23c:	b5f0      	push	{r4, r5, r6, r7, lr}
     23e:	b083      	sub	sp, #12
     240:	000f      	movs	r7, r1
     242:	0016      	movs	r6, r2
     244:	aa08      	add	r2, sp, #32
     246:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     248:	0004      	movs	r4, r0
     24a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     24c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     24e:	42bc      	cmp	r4, r7
     250:	d902      	bls.n	258 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     252:	0010      	movs	r0, r2
     254:	b003      	add	sp, #12
     256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     258:	2b00      	cmp	r3, #0
     25a:	d114      	bne.n	286 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     25c:	0002      	movs	r2, r0
     25e:	0008      	movs	r0, r1
     260:	2100      	movs	r1, #0
     262:	4c19      	ldr	r4, [pc, #100]	; (2c8 <_sercom_get_async_baud_val+0x8c>)
     264:	47a0      	blx	r4
     266:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     268:	003a      	movs	r2, r7
     26a:	2300      	movs	r3, #0
     26c:	2000      	movs	r0, #0
     26e:	4c17      	ldr	r4, [pc, #92]	; (2cc <_sercom_get_async_baud_val+0x90>)
     270:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     272:	2200      	movs	r2, #0
     274:	2301      	movs	r3, #1
     276:	1a12      	subs	r2, r2, r0
     278:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     27a:	0c12      	lsrs	r2, r2, #16
     27c:	041b      	lsls	r3, r3, #16
     27e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     280:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     282:	2200      	movs	r2, #0
     284:	e7e5      	b.n	252 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     286:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     288:	2b01      	cmp	r3, #1
     28a:	d1f9      	bne.n	280 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     28c:	000a      	movs	r2, r1
     28e:	2300      	movs	r3, #0
     290:	2100      	movs	r1, #0
     292:	4c0d      	ldr	r4, [pc, #52]	; (2c8 <_sercom_get_async_baud_val+0x8c>)
     294:	47a0      	blx	r4
     296:	0002      	movs	r2, r0
     298:	000b      	movs	r3, r1
     29a:	9200      	str	r2, [sp, #0]
     29c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     29e:	0038      	movs	r0, r7
     2a0:	2100      	movs	r1, #0
     2a2:	4c0a      	ldr	r4, [pc, #40]	; (2cc <_sercom_get_async_baud_val+0x90>)
     2a4:	47a0      	blx	r4
     2a6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     2a8:	2380      	movs	r3, #128	; 0x80
     2aa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2ac:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     2ae:	4298      	cmp	r0, r3
     2b0:	d8cf      	bhi.n	252 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     2b2:	0f79      	lsrs	r1, r7, #29
     2b4:	00f8      	lsls	r0, r7, #3
     2b6:	9a00      	ldr	r2, [sp, #0]
     2b8:	9b01      	ldr	r3, [sp, #4]
     2ba:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     2bc:	00ea      	lsls	r2, r5, #3
     2be:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     2c0:	b2d2      	uxtb	r2, r2
     2c2:	0352      	lsls	r2, r2, #13
     2c4:	432a      	orrs	r2, r5
     2c6:	e7db      	b.n	280 <_sercom_get_async_baud_val+0x44>
     2c8:	00001f09 	.word	0x00001f09
     2cc:	00000159 	.word	0x00000159

000002d0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     2d0:	b510      	push	{r4, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     2d6:	4b0e      	ldr	r3, [pc, #56]	; (310 <sercom_set_gclk_generator+0x40>)
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	2b00      	cmp	r3, #0
     2dc:	d007      	beq.n	2ee <sercom_set_gclk_generator+0x1e>
     2de:	2900      	cmp	r1, #0
     2e0:	d105      	bne.n	2ee <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     2e2:	4b0b      	ldr	r3, [pc, #44]	; (310 <sercom_set_gclk_generator+0x40>)
     2e4:	785b      	ldrb	r3, [r3, #1]
     2e6:	4283      	cmp	r3, r0
     2e8:	d010      	beq.n	30c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2ea:	201d      	movs	r0, #29
     2ec:	e00c      	b.n	308 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2ee:	a901      	add	r1, sp, #4
     2f0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2f2:	2013      	movs	r0, #19
     2f4:	4b07      	ldr	r3, [pc, #28]	; (314 <sercom_set_gclk_generator+0x44>)
     2f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2f8:	2013      	movs	r0, #19
     2fa:	4b07      	ldr	r3, [pc, #28]	; (318 <sercom_set_gclk_generator+0x48>)
     2fc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2fe:	4b04      	ldr	r3, [pc, #16]	; (310 <sercom_set_gclk_generator+0x40>)
     300:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     302:	2201      	movs	r2, #1
     304:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     306:	2000      	movs	r0, #0
}
     308:	b002      	add	sp, #8
     30a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     30c:	2000      	movs	r0, #0
     30e:	e7fb      	b.n	308 <sercom_set_gclk_generator+0x38>
     310:	20000090 	.word	0x20000090
     314:	00001a11 	.word	0x00001a11
     318:	00001985 	.word	0x00001985

0000031c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     31c:	4b40      	ldr	r3, [pc, #256]	; (420 <_sercom_get_default_pad+0x104>)
     31e:	4298      	cmp	r0, r3
     320:	d031      	beq.n	386 <_sercom_get_default_pad+0x6a>
     322:	d90a      	bls.n	33a <_sercom_get_default_pad+0x1e>
     324:	4b3f      	ldr	r3, [pc, #252]	; (424 <_sercom_get_default_pad+0x108>)
     326:	4298      	cmp	r0, r3
     328:	d04d      	beq.n	3c6 <_sercom_get_default_pad+0xaa>
     32a:	4b3f      	ldr	r3, [pc, #252]	; (428 <_sercom_get_default_pad+0x10c>)
     32c:	4298      	cmp	r0, r3
     32e:	d05a      	beq.n	3e6 <_sercom_get_default_pad+0xca>
     330:	4b3e      	ldr	r3, [pc, #248]	; (42c <_sercom_get_default_pad+0x110>)
     332:	4298      	cmp	r0, r3
     334:	d037      	beq.n	3a6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     336:	2000      	movs	r0, #0
}
     338:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     33a:	4b3d      	ldr	r3, [pc, #244]	; (430 <_sercom_get_default_pad+0x114>)
     33c:	4298      	cmp	r0, r3
     33e:	d00c      	beq.n	35a <_sercom_get_default_pad+0x3e>
     340:	4b3c      	ldr	r3, [pc, #240]	; (434 <_sercom_get_default_pad+0x118>)
     342:	4298      	cmp	r0, r3
     344:	d1f7      	bne.n	336 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     346:	2901      	cmp	r1, #1
     348:	d017      	beq.n	37a <_sercom_get_default_pad+0x5e>
     34a:	2900      	cmp	r1, #0
     34c:	d05d      	beq.n	40a <_sercom_get_default_pad+0xee>
     34e:	2902      	cmp	r1, #2
     350:	d015      	beq.n	37e <_sercom_get_default_pad+0x62>
     352:	2903      	cmp	r1, #3
     354:	d015      	beq.n	382 <_sercom_get_default_pad+0x66>
	return 0;
     356:	2000      	movs	r0, #0
     358:	e7ee      	b.n	338 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     35a:	2901      	cmp	r1, #1
     35c:	d007      	beq.n	36e <_sercom_get_default_pad+0x52>
     35e:	2900      	cmp	r1, #0
     360:	d051      	beq.n	406 <_sercom_get_default_pad+0xea>
     362:	2902      	cmp	r1, #2
     364:	d005      	beq.n	372 <_sercom_get_default_pad+0x56>
     366:	2903      	cmp	r1, #3
     368:	d005      	beq.n	376 <_sercom_get_default_pad+0x5a>
	return 0;
     36a:	2000      	movs	r0, #0
     36c:	e7e4      	b.n	338 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     36e:	4832      	ldr	r0, [pc, #200]	; (438 <_sercom_get_default_pad+0x11c>)
     370:	e7e2      	b.n	338 <_sercom_get_default_pad+0x1c>
     372:	4832      	ldr	r0, [pc, #200]	; (43c <_sercom_get_default_pad+0x120>)
     374:	e7e0      	b.n	338 <_sercom_get_default_pad+0x1c>
     376:	4832      	ldr	r0, [pc, #200]	; (440 <_sercom_get_default_pad+0x124>)
     378:	e7de      	b.n	338 <_sercom_get_default_pad+0x1c>
     37a:	4832      	ldr	r0, [pc, #200]	; (444 <_sercom_get_default_pad+0x128>)
     37c:	e7dc      	b.n	338 <_sercom_get_default_pad+0x1c>
     37e:	4832      	ldr	r0, [pc, #200]	; (448 <_sercom_get_default_pad+0x12c>)
     380:	e7da      	b.n	338 <_sercom_get_default_pad+0x1c>
     382:	4832      	ldr	r0, [pc, #200]	; (44c <_sercom_get_default_pad+0x130>)
     384:	e7d8      	b.n	338 <_sercom_get_default_pad+0x1c>
     386:	2901      	cmp	r1, #1
     388:	d007      	beq.n	39a <_sercom_get_default_pad+0x7e>
     38a:	2900      	cmp	r1, #0
     38c:	d03f      	beq.n	40e <_sercom_get_default_pad+0xf2>
     38e:	2902      	cmp	r1, #2
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0x82>
     392:	2903      	cmp	r1, #3
     394:	d005      	beq.n	3a2 <_sercom_get_default_pad+0x86>
	return 0;
     396:	2000      	movs	r0, #0
     398:	e7ce      	b.n	338 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     39a:	482d      	ldr	r0, [pc, #180]	; (450 <_sercom_get_default_pad+0x134>)
     39c:	e7cc      	b.n	338 <_sercom_get_default_pad+0x1c>
     39e:	482d      	ldr	r0, [pc, #180]	; (454 <_sercom_get_default_pad+0x138>)
     3a0:	e7ca      	b.n	338 <_sercom_get_default_pad+0x1c>
     3a2:	482d      	ldr	r0, [pc, #180]	; (458 <_sercom_get_default_pad+0x13c>)
     3a4:	e7c8      	b.n	338 <_sercom_get_default_pad+0x1c>
     3a6:	2901      	cmp	r1, #1
     3a8:	d007      	beq.n	3ba <_sercom_get_default_pad+0x9e>
     3aa:	2900      	cmp	r1, #0
     3ac:	d031      	beq.n	412 <_sercom_get_default_pad+0xf6>
     3ae:	2902      	cmp	r1, #2
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xa2>
     3b2:	2903      	cmp	r1, #3
     3b4:	d005      	beq.n	3c2 <_sercom_get_default_pad+0xa6>
	return 0;
     3b6:	2000      	movs	r0, #0
     3b8:	e7be      	b.n	338 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3ba:	4828      	ldr	r0, [pc, #160]	; (45c <_sercom_get_default_pad+0x140>)
     3bc:	e7bc      	b.n	338 <_sercom_get_default_pad+0x1c>
     3be:	4828      	ldr	r0, [pc, #160]	; (460 <_sercom_get_default_pad+0x144>)
     3c0:	e7ba      	b.n	338 <_sercom_get_default_pad+0x1c>
     3c2:	4828      	ldr	r0, [pc, #160]	; (464 <_sercom_get_default_pad+0x148>)
     3c4:	e7b8      	b.n	338 <_sercom_get_default_pad+0x1c>
     3c6:	2901      	cmp	r1, #1
     3c8:	d007      	beq.n	3da <_sercom_get_default_pad+0xbe>
     3ca:	2900      	cmp	r1, #0
     3cc:	d023      	beq.n	416 <_sercom_get_default_pad+0xfa>
     3ce:	2902      	cmp	r1, #2
     3d0:	d005      	beq.n	3de <_sercom_get_default_pad+0xc2>
     3d2:	2903      	cmp	r1, #3
     3d4:	d005      	beq.n	3e2 <_sercom_get_default_pad+0xc6>
	return 0;
     3d6:	2000      	movs	r0, #0
     3d8:	e7ae      	b.n	338 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3da:	4823      	ldr	r0, [pc, #140]	; (468 <_sercom_get_default_pad+0x14c>)
     3dc:	e7ac      	b.n	338 <_sercom_get_default_pad+0x1c>
     3de:	4823      	ldr	r0, [pc, #140]	; (46c <_sercom_get_default_pad+0x150>)
     3e0:	e7aa      	b.n	338 <_sercom_get_default_pad+0x1c>
     3e2:	4823      	ldr	r0, [pc, #140]	; (470 <_sercom_get_default_pad+0x154>)
     3e4:	e7a8      	b.n	338 <_sercom_get_default_pad+0x1c>
     3e6:	2901      	cmp	r1, #1
     3e8:	d007      	beq.n	3fa <_sercom_get_default_pad+0xde>
     3ea:	2900      	cmp	r1, #0
     3ec:	d015      	beq.n	41a <_sercom_get_default_pad+0xfe>
     3ee:	2902      	cmp	r1, #2
     3f0:	d005      	beq.n	3fe <_sercom_get_default_pad+0xe2>
     3f2:	2903      	cmp	r1, #3
     3f4:	d005      	beq.n	402 <_sercom_get_default_pad+0xe6>
	return 0;
     3f6:	2000      	movs	r0, #0
     3f8:	e79e      	b.n	338 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fa:	481e      	ldr	r0, [pc, #120]	; (474 <_sercom_get_default_pad+0x158>)
     3fc:	e79c      	b.n	338 <_sercom_get_default_pad+0x1c>
     3fe:	481e      	ldr	r0, [pc, #120]	; (478 <_sercom_get_default_pad+0x15c>)
     400:	e79a      	b.n	338 <_sercom_get_default_pad+0x1c>
     402:	481e      	ldr	r0, [pc, #120]	; (47c <_sercom_get_default_pad+0x160>)
     404:	e798      	b.n	338 <_sercom_get_default_pad+0x1c>
     406:	481e      	ldr	r0, [pc, #120]	; (480 <_sercom_get_default_pad+0x164>)
     408:	e796      	b.n	338 <_sercom_get_default_pad+0x1c>
     40a:	2003      	movs	r0, #3
     40c:	e794      	b.n	338 <_sercom_get_default_pad+0x1c>
     40e:	481d      	ldr	r0, [pc, #116]	; (484 <_sercom_get_default_pad+0x168>)
     410:	e792      	b.n	338 <_sercom_get_default_pad+0x1c>
     412:	481d      	ldr	r0, [pc, #116]	; (488 <_sercom_get_default_pad+0x16c>)
     414:	e790      	b.n	338 <_sercom_get_default_pad+0x1c>
     416:	481d      	ldr	r0, [pc, #116]	; (48c <_sercom_get_default_pad+0x170>)
     418:	e78e      	b.n	338 <_sercom_get_default_pad+0x1c>
     41a:	481d      	ldr	r0, [pc, #116]	; (490 <_sercom_get_default_pad+0x174>)
     41c:	e78c      	b.n	338 <_sercom_get_default_pad+0x1c>
     41e:	46c0      	nop			; (mov r8, r8)
     420:	42001000 	.word	0x42001000
     424:	42001800 	.word	0x42001800
     428:	42001c00 	.word	0x42001c00
     42c:	42001400 	.word	0x42001400
     430:	42000800 	.word	0x42000800
     434:	42000c00 	.word	0x42000c00
     438:	00050003 	.word	0x00050003
     43c:	00060003 	.word	0x00060003
     440:	00070003 	.word	0x00070003
     444:	00010003 	.word	0x00010003
     448:	001e0003 	.word	0x001e0003
     44c:	001f0003 	.word	0x001f0003
     450:	00090003 	.word	0x00090003
     454:	000a0003 	.word	0x000a0003
     458:	000b0003 	.word	0x000b0003
     45c:	00110003 	.word	0x00110003
     460:	00120003 	.word	0x00120003
     464:	00130003 	.word	0x00130003
     468:	000d0003 	.word	0x000d0003
     46c:	000e0003 	.word	0x000e0003
     470:	000f0003 	.word	0x000f0003
     474:	00170003 	.word	0x00170003
     478:	00180003 	.word	0x00180003
     47c:	00190003 	.word	0x00190003
     480:	00040003 	.word	0x00040003
     484:	00080003 	.word	0x00080003
     488:	00100003 	.word	0x00100003
     48c:	000c0003 	.word	0x000c0003
     490:	00160003 	.word	0x00160003

00000494 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     494:	b530      	push	{r4, r5, lr}
     496:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     498:	4b0b      	ldr	r3, [pc, #44]	; (4c8 <_sercom_get_sercom_inst_index+0x34>)
     49a:	466a      	mov	r2, sp
     49c:	cb32      	ldmia	r3!, {r1, r4, r5}
     49e:	c232      	stmia	r2!, {r1, r4, r5}
     4a0:	cb32      	ldmia	r3!, {r1, r4, r5}
     4a2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4a4:	9b00      	ldr	r3, [sp, #0]
     4a6:	4283      	cmp	r3, r0
     4a8:	d00b      	beq.n	4c2 <_sercom_get_sercom_inst_index+0x2e>
     4aa:	2301      	movs	r3, #1
     4ac:	009a      	lsls	r2, r3, #2
     4ae:	4669      	mov	r1, sp
     4b0:	5852      	ldr	r2, [r2, r1]
     4b2:	4282      	cmp	r2, r0
     4b4:	d006      	beq.n	4c4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4b6:	3301      	adds	r3, #1
     4b8:	2b06      	cmp	r3, #6
     4ba:	d1f7      	bne.n	4ac <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     4bc:	2000      	movs	r0, #0
}
     4be:	b007      	add	sp, #28
     4c0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4c2:	2300      	movs	r3, #0
			return i;
     4c4:	b2d8      	uxtb	r0, r3
     4c6:	e7fa      	b.n	4be <_sercom_get_sercom_inst_index+0x2a>
     4c8:	000029dc 	.word	0x000029dc

000004cc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     4cc:	4770      	bx	lr
	...

000004d0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     4d2:	4b0a      	ldr	r3, [pc, #40]	; (4fc <_sercom_set_handler+0x2c>)
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	2b00      	cmp	r3, #0
     4d8:	d10c      	bne.n	4f4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     4da:	4f09      	ldr	r7, [pc, #36]	; (500 <_sercom_set_handler+0x30>)
     4dc:	4e09      	ldr	r6, [pc, #36]	; (504 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     4de:	4d0a      	ldr	r5, [pc, #40]	; (508 <_sercom_set_handler+0x38>)
     4e0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     4e2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     4e4:	195a      	adds	r2, r3, r5
     4e6:	6014      	str	r4, [r2, #0]
     4e8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4ea:	2b18      	cmp	r3, #24
     4ec:	d1f9      	bne.n	4e2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     4ee:	2201      	movs	r2, #1
     4f0:	4b02      	ldr	r3, [pc, #8]	; (4fc <_sercom_set_handler+0x2c>)
     4f2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     4f4:	0080      	lsls	r0, r0, #2
     4f6:	4b02      	ldr	r3, [pc, #8]	; (500 <_sercom_set_handler+0x30>)
     4f8:	50c1      	str	r1, [r0, r3]
}
     4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4fc:	20000092 	.word	0x20000092
     500:	20000094 	.word	0x20000094
     504:	000004cd 	.word	0x000004cd
     508:	200000dc 	.word	0x200000dc

0000050c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     50c:	b500      	push	{lr}
     50e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     510:	2309      	movs	r3, #9
     512:	466a      	mov	r2, sp
     514:	7013      	strb	r3, [r2, #0]
     516:	3301      	adds	r3, #1
     518:	7053      	strb	r3, [r2, #1]
     51a:	3301      	adds	r3, #1
     51c:	7093      	strb	r3, [r2, #2]
     51e:	3301      	adds	r3, #1
     520:	70d3      	strb	r3, [r2, #3]
     522:	3301      	adds	r3, #1
     524:	7113      	strb	r3, [r2, #4]
     526:	3301      	adds	r3, #1
     528:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     52a:	4b03      	ldr	r3, [pc, #12]	; (538 <_sercom_get_interrupt_vector+0x2c>)
     52c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     52e:	466b      	mov	r3, sp
     530:	5618      	ldrsb	r0, [r3, r0]
}
     532:	b003      	add	sp, #12
     534:	bd00      	pop	{pc}
     536:	46c0      	nop			; (mov r8, r8)
     538:	00000495 	.word	0x00000495

0000053c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     53c:	b510      	push	{r4, lr}
     53e:	4b02      	ldr	r3, [pc, #8]	; (548 <SERCOM0_Handler+0xc>)
     540:	681b      	ldr	r3, [r3, #0]
     542:	2000      	movs	r0, #0
     544:	4798      	blx	r3
     546:	bd10      	pop	{r4, pc}
     548:	20000094 	.word	0x20000094

0000054c <SERCOM1_Handler>:
     54c:	b510      	push	{r4, lr}
     54e:	4b02      	ldr	r3, [pc, #8]	; (558 <SERCOM1_Handler+0xc>)
     550:	685b      	ldr	r3, [r3, #4]
     552:	2001      	movs	r0, #1
     554:	4798      	blx	r3
     556:	bd10      	pop	{r4, pc}
     558:	20000094 	.word	0x20000094

0000055c <SERCOM2_Handler>:
     55c:	b510      	push	{r4, lr}
     55e:	4b02      	ldr	r3, [pc, #8]	; (568 <SERCOM2_Handler+0xc>)
     560:	689b      	ldr	r3, [r3, #8]
     562:	2002      	movs	r0, #2
     564:	4798      	blx	r3
     566:	bd10      	pop	{r4, pc}
     568:	20000094 	.word	0x20000094

0000056c <SERCOM3_Handler>:
     56c:	b510      	push	{r4, lr}
     56e:	4b02      	ldr	r3, [pc, #8]	; (578 <SERCOM3_Handler+0xc>)
     570:	68db      	ldr	r3, [r3, #12]
     572:	2003      	movs	r0, #3
     574:	4798      	blx	r3
     576:	bd10      	pop	{r4, pc}
     578:	20000094 	.word	0x20000094

0000057c <SERCOM4_Handler>:
     57c:	b510      	push	{r4, lr}
     57e:	4b02      	ldr	r3, [pc, #8]	; (588 <SERCOM4_Handler+0xc>)
     580:	691b      	ldr	r3, [r3, #16]
     582:	2004      	movs	r0, #4
     584:	4798      	blx	r3
     586:	bd10      	pop	{r4, pc}
     588:	20000094 	.word	0x20000094

0000058c <SERCOM5_Handler>:
     58c:	b510      	push	{r4, lr}
     58e:	4b02      	ldr	r3, [pc, #8]	; (598 <SERCOM5_Handler+0xc>)
     590:	695b      	ldr	r3, [r3, #20]
     592:	2005      	movs	r0, #5
     594:	4798      	blx	r3
     596:	bd10      	pop	{r4, pc}
     598:	20000094 	.word	0x20000094

0000059c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     59c:	b5f0      	push	{r4, r5, r6, r7, lr}
     59e:	b08b      	sub	sp, #44	; 0x2c
     5a0:	0005      	movs	r5, r0
     5a2:	000c      	movs	r4, r1
     5a4:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     5a6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     5a8:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     5aa:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     5ac:	079b      	lsls	r3, r3, #30
     5ae:	d501      	bpl.n	5b4 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     5b0:	b00b      	add	sp, #44	; 0x2c
     5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     5b4:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     5b6:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     5b8:	07db      	lsls	r3, r3, #31
     5ba:	d4f9      	bmi.n	5b0 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5bc:	0008      	movs	r0, r1
     5be:	4b6f      	ldr	r3, [pc, #444]	; (77c <spi_init+0x1e0>)
     5c0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5c2:	4a6f      	ldr	r2, [pc, #444]	; (780 <spi_init+0x1e4>)
     5c4:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5c6:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5c8:	2301      	movs	r3, #1
     5ca:	40bb      	lsls	r3, r7
     5cc:	430b      	orrs	r3, r1
     5ce:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     5d0:	a909      	add	r1, sp, #36	; 0x24
     5d2:	2724      	movs	r7, #36	; 0x24
     5d4:	5df3      	ldrb	r3, [r6, r7]
     5d6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5d8:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5da:	b2c3      	uxtb	r3, r0
     5dc:	9301      	str	r3, [sp, #4]
     5de:	0018      	movs	r0, r3
     5e0:	4b68      	ldr	r3, [pc, #416]	; (784 <spi_init+0x1e8>)
     5e2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5e4:	9801      	ldr	r0, [sp, #4]
     5e6:	4b68      	ldr	r3, [pc, #416]	; (788 <spi_init+0x1ec>)
     5e8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5ea:	5df0      	ldrb	r0, [r6, r7]
     5ec:	2100      	movs	r1, #0
     5ee:	4b67      	ldr	r3, [pc, #412]	; (78c <spi_init+0x1f0>)
     5f0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     5f2:	7833      	ldrb	r3, [r6, #0]
     5f4:	2b01      	cmp	r3, #1
     5f6:	d03f      	beq.n	678 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
     5f8:	7833      	ldrb	r3, [r6, #0]
     5fa:	2b00      	cmp	r3, #0
     5fc:	d103      	bne.n	606 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     5fe:	6823      	ldr	r3, [r4, #0]
     600:	2208      	movs	r2, #8
     602:	4313      	orrs	r3, r2
     604:	6023      	str	r3, [r4, #0]
     606:	002b      	movs	r3, r5
     608:	330c      	adds	r3, #12
     60a:	0029      	movs	r1, r5
     60c:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     60e:	2200      	movs	r2, #0
     610:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     612:	428b      	cmp	r3, r1
     614:	d1fc      	bne.n	610 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
     616:	2300      	movs	r3, #0
     618:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     61a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     61c:	2400      	movs	r4, #0
     61e:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     620:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     622:	3336      	adds	r3, #54	; 0x36
     624:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     626:	3301      	adds	r3, #1
     628:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     62a:	3301      	adds	r3, #1
     62c:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     62e:	3b35      	subs	r3, #53	; 0x35
     630:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     632:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     634:	6828      	ldr	r0, [r5, #0]
     636:	4b51      	ldr	r3, [pc, #324]	; (77c <spi_init+0x1e0>)
     638:	4798      	blx	r3
     63a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     63c:	4954      	ldr	r1, [pc, #336]	; (790 <spi_init+0x1f4>)
     63e:	4b55      	ldr	r3, [pc, #340]	; (794 <spi_init+0x1f8>)
     640:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     642:	00bf      	lsls	r7, r7, #2
     644:	4b54      	ldr	r3, [pc, #336]	; (798 <spi_init+0x1fc>)
     646:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     648:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     64a:	ab04      	add	r3, sp, #16
     64c:	2280      	movs	r2, #128	; 0x80
     64e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     650:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     652:	3a7f      	subs	r2, #127	; 0x7f
     654:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     656:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     658:	7833      	ldrb	r3, [r6, #0]
     65a:	2b00      	cmp	r3, #0
     65c:	d102      	bne.n	664 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     65e:	2200      	movs	r2, #0
     660:	ab04      	add	r3, sp, #16
     662:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     664:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     666:	9305      	str	r3, [sp, #20]
     668:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     66a:	9306      	str	r3, [sp, #24]
     66c:	6b33      	ldr	r3, [r6, #48]	; 0x30
     66e:	9307      	str	r3, [sp, #28]
     670:	6b73      	ldr	r3, [r6, #52]	; 0x34
     672:	9308      	str	r3, [sp, #32]
     674:	2400      	movs	r4, #0
     676:	e00b      	b.n	690 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     678:	6823      	ldr	r3, [r4, #0]
     67a:	220c      	movs	r2, #12
     67c:	4313      	orrs	r3, r2
     67e:	6023      	str	r3, [r4, #0]
     680:	e7ba      	b.n	5f8 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     682:	0038      	movs	r0, r7
     684:	4b45      	ldr	r3, [pc, #276]	; (79c <spi_init+0x200>)
     686:	4798      	blx	r3
     688:	e00a      	b.n	6a0 <spi_init+0x104>
     68a:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     68c:	2c04      	cmp	r4, #4
     68e:	d010      	beq.n	6b2 <spi_init+0x116>
     690:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     692:	00a3      	lsls	r3, r4, #2
     694:	aa02      	add	r2, sp, #8
     696:	200c      	movs	r0, #12
     698:	1812      	adds	r2, r2, r0
     69a:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     69c:	2800      	cmp	r0, #0
     69e:	d0f0      	beq.n	682 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
     6a0:	1c43      	adds	r3, r0, #1
     6a2:	d0f2      	beq.n	68a <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     6a4:	a904      	add	r1, sp, #16
     6a6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     6a8:	0c00      	lsrs	r0, r0, #16
     6aa:	b2c0      	uxtb	r0, r0
     6ac:	4b3c      	ldr	r3, [pc, #240]	; (7a0 <spi_init+0x204>)
     6ae:	4798      	blx	r3
     6b0:	e7eb      	b.n	68a <spi_init+0xee>
	module->mode             = config->mode;
     6b2:	7833      	ldrb	r3, [r6, #0]
     6b4:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     6b6:	7c33      	ldrb	r3, [r6, #16]
     6b8:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     6ba:	7cb3      	ldrb	r3, [r6, #18]
     6bc:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     6be:	7d33      	ldrb	r3, [r6, #20]
     6c0:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     6c2:	2200      	movs	r2, #0
     6c4:	ab02      	add	r3, sp, #8
     6c6:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     6c8:	7833      	ldrb	r3, [r6, #0]
     6ca:	2b01      	cmp	r3, #1
     6cc:	d012      	beq.n	6f4 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
     6ce:	7833      	ldrb	r3, [r6, #0]
     6d0:	2b00      	cmp	r3, #0
     6d2:	d126      	bne.n	722 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
     6d4:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     6d6:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
     6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     6da:	7ff1      	ldrb	r1, [r6, #31]
     6dc:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     6de:	7fb4      	ldrb	r4, [r6, #30]
     6e0:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
     6e2:	4319      	orrs	r1, r3
     6e4:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     6e6:	2320      	movs	r3, #32
     6e8:	5cf3      	ldrb	r3, [r6, r3]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d01b      	beq.n	726 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     6ee:	2340      	movs	r3, #64	; 0x40
     6f0:	431a      	orrs	r2, r3
     6f2:	e018      	b.n	726 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6f4:	6828      	ldr	r0, [r5, #0]
     6f6:	4b21      	ldr	r3, [pc, #132]	; (77c <spi_init+0x1e0>)
     6f8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6fa:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     6fc:	b2c0      	uxtb	r0, r0
     6fe:	4b29      	ldr	r3, [pc, #164]	; (7a4 <spi_init+0x208>)
     700:	4798      	blx	r3
     702:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     704:	ab02      	add	r3, sp, #8
     706:	1d9a      	adds	r2, r3, #6
     708:	69b0      	ldr	r0, [r6, #24]
     70a:	4b27      	ldr	r3, [pc, #156]	; (7a8 <spi_init+0x20c>)
     70c:	4798      	blx	r3
     70e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     710:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     712:	2b00      	cmp	r3, #0
     714:	d000      	beq.n	718 <spi_init+0x17c>
     716:	e74b      	b.n	5b0 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     718:	ab02      	add	r3, sp, #8
     71a:	3306      	adds	r3, #6
     71c:	781b      	ldrb	r3, [r3, #0]
     71e:	733b      	strb	r3, [r7, #12]
     720:	e7d5      	b.n	6ce <spi_init+0x132>
	uint32_t ctrlb = 0;
     722:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     724:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     726:	6873      	ldr	r3, [r6, #4]
     728:	68b1      	ldr	r1, [r6, #8]
     72a:	430b      	orrs	r3, r1
     72c:	68f1      	ldr	r1, [r6, #12]
     72e:	430b      	orrs	r3, r1
     730:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     732:	7c31      	ldrb	r1, [r6, #16]
     734:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     736:	7c71      	ldrb	r1, [r6, #17]
     738:	2900      	cmp	r1, #0
     73a:	d103      	bne.n	744 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     73c:	491b      	ldr	r1, [pc, #108]	; (7ac <spi_init+0x210>)
     73e:	7889      	ldrb	r1, [r1, #2]
     740:	0789      	lsls	r1, r1, #30
     742:	d501      	bpl.n	748 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     744:	2180      	movs	r1, #128	; 0x80
     746:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     748:	7cb1      	ldrb	r1, [r6, #18]
     74a:	2900      	cmp	r1, #0
     74c:	d002      	beq.n	754 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     74e:	2180      	movs	r1, #128	; 0x80
     750:	0289      	lsls	r1, r1, #10
     752:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     754:	7cf1      	ldrb	r1, [r6, #19]
     756:	2900      	cmp	r1, #0
     758:	d002      	beq.n	760 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     75a:	2180      	movs	r1, #128	; 0x80
     75c:	0089      	lsls	r1, r1, #2
     75e:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     760:	7d31      	ldrb	r1, [r6, #20]
     762:	2900      	cmp	r1, #0
     764:	d002      	beq.n	76c <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     766:	2180      	movs	r1, #128	; 0x80
     768:	0189      	lsls	r1, r1, #6
     76a:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     76c:	6839      	ldr	r1, [r7, #0]
     76e:	430b      	orrs	r3, r1
     770:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     772:	687b      	ldr	r3, [r7, #4]
     774:	431a      	orrs	r2, r3
     776:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     778:	2000      	movs	r0, #0
     77a:	e719      	b.n	5b0 <spi_init+0x14>
     77c:	00000495 	.word	0x00000495
     780:	40000400 	.word	0x40000400
     784:	00001a11 	.word	0x00001a11
     788:	00001985 	.word	0x00001985
     78c:	000002d1 	.word	0x000002d1
     790:	000008cd 	.word	0x000008cd
     794:	000004d1 	.word	0x000004d1
     798:	200000dc 	.word	0x200000dc
     79c:	0000031d 	.word	0x0000031d
     7a0:	00001b09 	.word	0x00001b09
     7a4:	00001a2d 	.word	0x00001a2d
     7a8:	00000213 	.word	0x00000213
     7ac:	41002000 	.word	0x41002000

000007b0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b2:	46d6      	mov	lr, sl
     7b4:	464f      	mov	r7, r9
     7b6:	b580      	push	{r7, lr}
     7b8:	b083      	sub	sp, #12
     7ba:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     7bc:	2538      	movs	r5, #56	; 0x38
     7be:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     7c0:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     7c2:	2e05      	cmp	r6, #5
     7c4:	d075      	beq.n	8b2 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     7c6:	3512      	adds	r5, #18
	if (length == 0) {
     7c8:	2a00      	cmp	r2, #0
     7ca:	d072      	beq.n	8b2 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
     7cc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     7ce:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
     7d0:	2c00      	cmp	r4, #0
     7d2:	d06e      	beq.n	8b2 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     7d4:	7944      	ldrb	r4, [r0, #5]
     7d6:	2c00      	cmp	r4, #0
     7d8:	d103      	bne.n	7e2 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7da:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     7dc:	7e25      	ldrb	r5, [r4, #24]
     7de:	07a9      	lsls	r1, r5, #30
     7e0:	d40a      	bmi.n	7f8 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
     7e2:	3a01      	subs	r2, #1
     7e4:	b294      	uxth	r4, r2
     7e6:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     7e8:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     7ea:	2102      	movs	r1, #2
     7ec:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
     7ee:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     7f0:	05db      	lsls	r3, r3, #23
     7f2:	0ddb      	lsrs	r3, r3, #23
     7f4:	469a      	mov	sl, r3
     7f6:	e037      	b.n	868 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     7f8:	2502      	movs	r5, #2
     7fa:	7625      	strb	r5, [r4, #24]
     7fc:	e7f1      	b.n	7e2 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
     7fe:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     800:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
     802:	423b      	tst	r3, r7
     804:	d0fc      	beq.n	800 <spi_read_buffer_wait+0x50>
     806:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
     808:	423b      	tst	r3, r7
     80a:	d009      	beq.n	820 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     80c:	4653      	mov	r3, sl
     80e:	628b      	str	r3, [r1, #40]	; 0x28
     810:	e02d      	b.n	86e <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     812:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
     814:	464d      	mov	r5, r9
     816:	422b      	tst	r3, r5
     818:	d138      	bne.n	88c <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     81a:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
     81c:	4213      	tst	r3, r2
     81e:	d045      	beq.n	8ac <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
     820:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     822:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     824:	4213      	tst	r3, r2
     826:	d0fc      	beq.n	822 <spi_read_buffer_wait+0x72>
     828:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     82a:	4213      	tst	r3, r2
     82c:	d040      	beq.n	8b0 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     82e:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
     830:	2500      	movs	r5, #0
     832:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     834:	4213      	tst	r3, r2
     836:	d002      	beq.n	83e <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     838:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
     83a:	231e      	movs	r3, #30
     83c:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     83e:	7983      	ldrb	r3, [r0, #6]
     840:	2b01      	cmp	r3, #1
     842:	d027      	beq.n	894 <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     844:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     846:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     848:	9901      	ldr	r1, [sp, #4]
     84a:	2900      	cmp	r1, #0
     84c:	d137      	bne.n	8be <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     84e:	1c75      	adds	r5, r6, #1
     850:	b2ad      	uxth	r5, r5
     852:	4661      	mov	r1, ip
     854:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     856:	7981      	ldrb	r1, [r0, #6]
     858:	2901      	cmp	r1, #1
     85a:	d01f      	beq.n	89c <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
     85c:	002e      	movs	r6, r5
	while (length--) {
     85e:	3c01      	subs	r4, #1
     860:	b2a4      	uxth	r4, r4
     862:	4b18      	ldr	r3, [pc, #96]	; (8c4 <spi_read_buffer_wait+0x114>)
     864:	429c      	cmp	r4, r3
     866:	d01f      	beq.n	8a8 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
     868:	7943      	ldrb	r3, [r0, #5]
     86a:	2b01      	cmp	r3, #1
     86c:	d0c7      	beq.n	7fe <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
     86e:	7943      	ldrb	r3, [r0, #5]
     870:	2b00      	cmp	r3, #0
     872:	d1d5      	bne.n	820 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
     874:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     876:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
     878:	4213      	tst	r3, r2
     87a:	d1ca      	bne.n	812 <spi_read_buffer_wait+0x62>
     87c:	4b12      	ldr	r3, [pc, #72]	; (8c8 <spi_read_buffer_wait+0x118>)
     87e:	7e0d      	ldrb	r5, [r1, #24]
     880:	4215      	tst	r5, r2
     882:	d1c6      	bne.n	812 <spi_read_buffer_wait+0x62>
     884:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     886:	2b00      	cmp	r3, #0
     888:	d1f9      	bne.n	87e <spi_read_buffer_wait+0xce>
     88a:	e7c2      	b.n	812 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     88c:	2302      	movs	r3, #2
     88e:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
     890:	2504      	movs	r5, #4
     892:	e00e      	b.n	8b2 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     894:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     896:	05db      	lsls	r3, r3, #23
     898:	0ddb      	lsrs	r3, r3, #23
     89a:	e7d5      	b.n	848 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
     89c:	3602      	adds	r6, #2
     89e:	b2b6      	uxth	r6, r6
     8a0:	0a1b      	lsrs	r3, r3, #8
     8a2:	4661      	mov	r1, ip
     8a4:	554b      	strb	r3, [r1, r5]
     8a6:	e7da      	b.n	85e <spi_read_buffer_wait+0xae>
     8a8:	9d01      	ldr	r5, [sp, #4]
     8aa:	e002      	b.n	8b2 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
     8ac:	2512      	movs	r5, #18
     8ae:	e000      	b.n	8b2 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
     8b0:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
     8b2:	0028      	movs	r0, r5
     8b4:	b003      	add	sp, #12
     8b6:	bc0c      	pop	{r2, r3}
     8b8:	4691      	mov	r9, r2
     8ba:	469a      	mov	sl, r3
     8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8be:	9d01      	ldr	r5, [sp, #4]
     8c0:	e7f7      	b.n	8b2 <spi_read_buffer_wait+0x102>
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	0000ffff 	.word	0x0000ffff
     8c8:	00002710 	.word	0x00002710

000008cc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     8ce:	0080      	lsls	r0, r0, #2
     8d0:	4b85      	ldr	r3, [pc, #532]	; (ae8 <_spi_interrupt_handler+0x21c>)
     8d2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     8d4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     8d6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     8d8:	5ce3      	ldrb	r3, [r4, r3]
     8da:	2236      	movs	r2, #54	; 0x36
     8dc:	5ca7      	ldrb	r7, [r4, r2]
     8de:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     8e0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     8e2:	7db5      	ldrb	r5, [r6, #22]
     8e4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     8e6:	07eb      	lsls	r3, r5, #31
     8e8:	d52e      	bpl.n	948 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     8ea:	7963      	ldrb	r3, [r4, #5]
     8ec:	2b01      	cmp	r3, #1
     8ee:	d025      	beq.n	93c <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     8f0:	2b00      	cmp	r3, #0
     8f2:	d129      	bne.n	948 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
     8f4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     8f6:	2b00      	cmp	r3, #0
     8f8:	d026      	beq.n	948 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     8fa:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     8fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     8fe:	7813      	ldrb	r3, [r2, #0]
     900:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     902:	1c50      	adds	r0, r2, #1
     904:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     906:	79a0      	ldrb	r0, [r4, #6]
     908:	2801      	cmp	r0, #1
     90a:	d100      	bne.n	90e <_spi_interrupt_handler+0x42>
     90c:	e069      	b.n	9e2 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     90e:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     910:	05db      	lsls	r3, r3, #23
     912:	0ddb      	lsrs	r3, r3, #23
     914:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     916:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     918:	3b01      	subs	r3, #1
     91a:	b29b      	uxth	r3, r3
     91c:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     91e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     920:	b29b      	uxth	r3, r3
     922:	2b00      	cmp	r3, #0
     924:	d110      	bne.n	948 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     926:	3301      	adds	r3, #1
     928:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     92a:	7a63      	ldrb	r3, [r4, #9]
     92c:	2b01      	cmp	r3, #1
     92e:	d10b      	bne.n	948 <_spi_interrupt_handler+0x7c>
     930:	79e3      	ldrb	r3, [r4, #7]
     932:	2b00      	cmp	r3, #0
     934:	d108      	bne.n	948 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     936:	3302      	adds	r3, #2
     938:	75b3      	strb	r3, [r6, #22]
     93a:	e005      	b.n	948 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
     93c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     93e:	2b00      	cmp	r3, #0
     940:	d03e      	beq.n	9c0 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
     942:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     944:	2b00      	cmp	r3, #0
     946:	d1d8      	bne.n	8fa <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     948:	076b      	lsls	r3, r5, #29
     94a:	d511      	bpl.n	970 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     94c:	8b73      	ldrh	r3, [r6, #26]
     94e:	075b      	lsls	r3, r3, #29
     950:	d551      	bpl.n	9f6 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
     952:	7a63      	ldrb	r3, [r4, #9]
     954:	2b01      	cmp	r3, #1
     956:	d008      	beq.n	96a <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     958:	221e      	movs	r2, #30
     95a:	2338      	movs	r3, #56	; 0x38
     95c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     95e:	3b35      	subs	r3, #53	; 0x35
     960:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     962:	3302      	adds	r3, #2
     964:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     966:	073b      	lsls	r3, r7, #28
     968:	d441      	bmi.n	9ee <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     96a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     96c:	2304      	movs	r3, #4
     96e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     970:	07ab      	lsls	r3, r5, #30
     972:	d515      	bpl.n	9a0 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     974:	7963      	ldrb	r3, [r4, #5]
     976:	2b00      	cmp	r3, #0
     978:	d10e      	bne.n	998 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     97a:	3307      	adds	r3, #7
     97c:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     97e:	3b05      	subs	r3, #5
     980:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     982:	3301      	adds	r3, #1
     984:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     986:	2300      	movs	r3, #0
     988:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     98a:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     98c:	3338      	adds	r3, #56	; 0x38
     98e:	2200      	movs	r2, #0
     990:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     992:	06fb      	lsls	r3, r7, #27
     994:	d500      	bpl.n	998 <_spi_interrupt_handler+0xcc>
     996:	e07f      	b.n	a98 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     998:	7963      	ldrb	r3, [r4, #5]
     99a:	2b01      	cmp	r3, #1
     99c:	d100      	bne.n	9a0 <_spi_interrupt_handler+0xd4>
     99e:	e07f      	b.n	aa0 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     9a0:	072b      	lsls	r3, r5, #28
     9a2:	d508      	bpl.n	9b6 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
     9a4:	7963      	ldrb	r3, [r4, #5]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d105      	bne.n	9b6 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     9aa:	3308      	adds	r3, #8
     9ac:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     9ae:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     9b0:	06bb      	lsls	r3, r7, #26
     9b2:	d500      	bpl.n	9b6 <_spi_interrupt_handler+0xea>
     9b4:	e08a      	b.n	acc <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     9b6:	b26d      	sxtb	r5, r5
     9b8:	2d00      	cmp	r5, #0
     9ba:	da00      	bge.n	9be <_spi_interrupt_handler+0xf2>
     9bc:	e08a      	b.n	ad4 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
     9c0:	4b4a      	ldr	r3, [pc, #296]	; (aec <_spi_interrupt_handler+0x220>)
     9c2:	881b      	ldrh	r3, [r3, #0]
     9c4:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     9c6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     9c8:	3b01      	subs	r3, #1
     9ca:	b29b      	uxth	r3, r3
     9cc:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     9ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     9d0:	b29b      	uxth	r3, r3
     9d2:	2b00      	cmp	r3, #0
     9d4:	d101      	bne.n	9da <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     9d6:	3301      	adds	r3, #1
     9d8:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     9da:	7963      	ldrb	r3, [r4, #5]
		if (0
     9dc:	2b01      	cmp	r3, #1
     9de:	d0b0      	beq.n	942 <_spi_interrupt_handler+0x76>
     9e0:	e786      	b.n	8f0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     9e2:	7850      	ldrb	r0, [r2, #1]
     9e4:	0200      	lsls	r0, r0, #8
     9e6:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     9e8:	3202      	adds	r2, #2
     9ea:	62e2      	str	r2, [r4, #44]	; 0x2c
     9ec:	e790      	b.n	910 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     9ee:	0020      	movs	r0, r4
     9f0:	69a3      	ldr	r3, [r4, #24]
     9f2:	4798      	blx	r3
     9f4:	e7b9      	b.n	96a <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
     9f6:	7a63      	ldrb	r3, [r4, #9]
     9f8:	2b01      	cmp	r3, #1
     9fa:	d027      	beq.n	a4c <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     9fc:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a00:	05db      	lsls	r3, r3, #23
     a02:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     a04:	b2da      	uxtb	r2, r3
     a06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     a08:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     a0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     a0c:	1c51      	adds	r1, r2, #1
     a0e:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a10:	79a1      	ldrb	r1, [r4, #6]
     a12:	2901      	cmp	r1, #1
     a14:	d033      	beq.n	a7e <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
     a16:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     a18:	3b01      	subs	r3, #1
     a1a:	b29b      	uxth	r3, r3
     a1c:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
     a1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     a20:	b29b      	uxth	r3, r3
     a22:	2b00      	cmp	r3, #0
     a24:	d1a4      	bne.n	970 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
     a26:	2200      	movs	r2, #0
     a28:	3338      	adds	r3, #56	; 0x38
     a2a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     a2c:	3b34      	subs	r3, #52	; 0x34
     a2e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     a30:	7a63      	ldrb	r3, [r4, #9]
     a32:	2b02      	cmp	r3, #2
     a34:	d029      	beq.n	a8a <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
     a36:	7a63      	ldrb	r3, [r4, #9]
     a38:	2b00      	cmp	r3, #0
     a3a:	d000      	beq.n	a3e <_spi_interrupt_handler+0x172>
     a3c:	e798      	b.n	970 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     a3e:	07bb      	lsls	r3, r7, #30
     a40:	d400      	bmi.n	a44 <_spi_interrupt_handler+0x178>
     a42:	e795      	b.n	970 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     a44:	0020      	movs	r0, r4
     a46:	6923      	ldr	r3, [r4, #16]
     a48:	4798      	blx	r3
     a4a:	e791      	b.n	970 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     a4c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
     a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     a50:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     a52:	3b01      	subs	r3, #1
     a54:	b29b      	uxth	r3, r3
     a56:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     a58:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     a5a:	b29b      	uxth	r3, r3
     a5c:	2b00      	cmp	r3, #0
     a5e:	d000      	beq.n	a62 <_spi_interrupt_handler+0x196>
     a60:	e786      	b.n	970 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     a62:	3304      	adds	r3, #4
     a64:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     a66:	2200      	movs	r2, #0
     a68:	3334      	adds	r3, #52	; 0x34
     a6a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     a6c:	3b35      	subs	r3, #53	; 0x35
     a6e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     a70:	07fb      	lsls	r3, r7, #31
     a72:	d400      	bmi.n	a76 <_spi_interrupt_handler+0x1aa>
     a74:	e77c      	b.n	970 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     a76:	0020      	movs	r0, r4
     a78:	68e3      	ldr	r3, [r4, #12]
     a7a:	4798      	blx	r3
     a7c:	e778      	b.n	970 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     a7e:	0a1b      	lsrs	r3, r3, #8
     a80:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     a82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a84:	3301      	adds	r3, #1
     a86:	62a3      	str	r3, [r4, #40]	; 0x28
     a88:	e7c5      	b.n	a16 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     a8a:	077b      	lsls	r3, r7, #29
     a8c:	d400      	bmi.n	a90 <_spi_interrupt_handler+0x1c4>
     a8e:	e76f      	b.n	970 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     a90:	0020      	movs	r0, r4
     a92:	6963      	ldr	r3, [r4, #20]
     a94:	4798      	blx	r3
     a96:	e76b      	b.n	970 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     a98:	0020      	movs	r0, r4
     a9a:	69e3      	ldr	r3, [r4, #28]
     a9c:	4798      	blx	r3
     a9e:	e77b      	b.n	998 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     aa0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     aa2:	2b01      	cmp	r3, #1
     aa4:	d000      	beq.n	aa8 <_spi_interrupt_handler+0x1dc>
     aa6:	e786      	b.n	9b6 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     aa8:	79e3      	ldrb	r3, [r4, #7]
     aaa:	2b00      	cmp	r3, #0
     aac:	d000      	beq.n	ab0 <_spi_interrupt_handler+0x1e4>
     aae:	e782      	b.n	9b6 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ab0:	3302      	adds	r3, #2
     ab2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
     ab4:	3301      	adds	r3, #1
     ab6:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     ab8:	2200      	movs	r2, #0
     aba:	3335      	adds	r3, #53	; 0x35
     abc:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     abe:	07fb      	lsls	r3, r7, #31
     ac0:	d400      	bmi.n	ac4 <_spi_interrupt_handler+0x1f8>
     ac2:	e76d      	b.n	9a0 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     ac4:	0020      	movs	r0, r4
     ac6:	68e3      	ldr	r3, [r4, #12]
     ac8:	4798      	blx	r3
     aca:	e769      	b.n	9a0 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     acc:	0020      	movs	r0, r4
     ace:	6a23      	ldr	r3, [r4, #32]
     ad0:	4798      	blx	r3
     ad2:	e770      	b.n	9b6 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     ad4:	2380      	movs	r3, #128	; 0x80
     ad6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     ad8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     ada:	067b      	lsls	r3, r7, #25
     adc:	d400      	bmi.n	ae0 <_spi_interrupt_handler+0x214>
     ade:	e76e      	b.n	9be <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ae2:	0020      	movs	r0, r4
     ae4:	4798      	blx	r3
}
     ae6:	e76a      	b.n	9be <_spi_interrupt_handler+0xf2>
     ae8:	200000dc 	.word	0x200000dc
     aec:	200000f4 	.word	0x200000f4

00000af0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     af0:	b5f0      	push	{r4, r5, r6, r7, lr}
     af2:	46de      	mov	lr, fp
     af4:	4657      	mov	r7, sl
     af6:	464e      	mov	r6, r9
     af8:	4645      	mov	r5, r8
     afa:	b5e0      	push	{r5, r6, r7, lr}
     afc:	b091      	sub	sp, #68	; 0x44
     afe:	0005      	movs	r5, r0
     b00:	000c      	movs	r4, r1
     b02:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b04:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b06:	0008      	movs	r0, r1
     b08:	4bbc      	ldr	r3, [pc, #752]	; (dfc <usart_init+0x30c>)
     b0a:	4798      	blx	r3
     b0c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b0e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b10:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b12:	07db      	lsls	r3, r3, #31
     b14:	d506      	bpl.n	b24 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b16:	b011      	add	sp, #68	; 0x44
     b18:	bc3c      	pop	{r2, r3, r4, r5}
     b1a:	4690      	mov	r8, r2
     b1c:	4699      	mov	r9, r3
     b1e:	46a2      	mov	sl, r4
     b20:	46ab      	mov	fp, r5
     b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b24:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     b26:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b28:	079b      	lsls	r3, r3, #30
     b2a:	d4f4      	bmi.n	b16 <usart_init+0x26>
     b2c:	49b4      	ldr	r1, [pc, #720]	; (e00 <usart_init+0x310>)
     b2e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b30:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b32:	2301      	movs	r3, #1
     b34:	40bb      	lsls	r3, r7
     b36:	4303      	orrs	r3, r0
     b38:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b3a:	a90f      	add	r1, sp, #60	; 0x3c
     b3c:	272d      	movs	r7, #45	; 0x2d
     b3e:	5df3      	ldrb	r3, [r6, r7]
     b40:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b42:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b44:	b2d3      	uxtb	r3, r2
     b46:	9302      	str	r3, [sp, #8]
     b48:	0018      	movs	r0, r3
     b4a:	4bae      	ldr	r3, [pc, #696]	; (e04 <usart_init+0x314>)
     b4c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b4e:	9802      	ldr	r0, [sp, #8]
     b50:	4bad      	ldr	r3, [pc, #692]	; (e08 <usart_init+0x318>)
     b52:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b54:	5df0      	ldrb	r0, [r6, r7]
     b56:	2100      	movs	r1, #0
     b58:	4bac      	ldr	r3, [pc, #688]	; (e0c <usart_init+0x31c>)
     b5a:	4798      	blx	r3
	module->character_size = config->character_size;
     b5c:	7af3      	ldrb	r3, [r6, #11]
     b5e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     b60:	2324      	movs	r3, #36	; 0x24
     b62:	5cf3      	ldrb	r3, [r6, r3]
     b64:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b66:	2325      	movs	r3, #37	; 0x25
     b68:	5cf3      	ldrb	r3, [r6, r3]
     b6a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b6c:	7ef3      	ldrb	r3, [r6, #27]
     b6e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b70:	7f33      	ldrb	r3, [r6, #28]
     b72:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b74:	682b      	ldr	r3, [r5, #0]
     b76:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b78:	0018      	movs	r0, r3
     b7a:	4ba0      	ldr	r3, [pc, #640]	; (dfc <usart_init+0x30c>)
     b7c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b7e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     b80:	2200      	movs	r2, #0
     b82:	230e      	movs	r3, #14
     b84:	a906      	add	r1, sp, #24
     b86:	468c      	mov	ip, r1
     b88:	4463      	add	r3, ip
     b8a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     b8c:	8a32      	ldrh	r2, [r6, #16]
     b8e:	9202      	str	r2, [sp, #8]
     b90:	2380      	movs	r3, #128	; 0x80
     b92:	01db      	lsls	r3, r3, #7
     b94:	429a      	cmp	r2, r3
     b96:	d100      	bne.n	b9a <usart_init+0xaa>
     b98:	e09e      	b.n	cd8 <usart_init+0x1e8>
     b9a:	d90f      	bls.n	bbc <usart_init+0xcc>
     b9c:	23c0      	movs	r3, #192	; 0xc0
     b9e:	01db      	lsls	r3, r3, #7
     ba0:	9a02      	ldr	r2, [sp, #8]
     ba2:	429a      	cmp	r2, r3
     ba4:	d100      	bne.n	ba8 <usart_init+0xb8>
     ba6:	e092      	b.n	cce <usart_init+0x1de>
     ba8:	2380      	movs	r3, #128	; 0x80
     baa:	021b      	lsls	r3, r3, #8
     bac:	429a      	cmp	r2, r3
     bae:	d000      	beq.n	bb2 <usart_init+0xc2>
     bb0:	e11f      	b.n	df2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     bb2:	2303      	movs	r3, #3
     bb4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     bb6:	2300      	movs	r3, #0
     bb8:	9307      	str	r3, [sp, #28]
     bba:	e008      	b.n	bce <usart_init+0xde>
	switch (config->sample_rate) {
     bbc:	2380      	movs	r3, #128	; 0x80
     bbe:	019b      	lsls	r3, r3, #6
     bc0:	429a      	cmp	r2, r3
     bc2:	d000      	beq.n	bc6 <usart_init+0xd6>
     bc4:	e115      	b.n	df2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     bc6:	2310      	movs	r3, #16
     bc8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     bca:	3b0f      	subs	r3, #15
     bcc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     bce:	6833      	ldr	r3, [r6, #0]
     bd0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     bd2:	68f3      	ldr	r3, [r6, #12]
     bd4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     bd6:	6973      	ldr	r3, [r6, #20]
     bd8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bda:	7e33      	ldrb	r3, [r6, #24]
     bdc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bde:	2326      	movs	r3, #38	; 0x26
     be0:	5cf3      	ldrb	r3, [r6, r3]
     be2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     be4:	6873      	ldr	r3, [r6, #4]
     be6:	4699      	mov	r9, r3
	switch (transfer_mode)
     be8:	2b00      	cmp	r3, #0
     bea:	d100      	bne.n	bee <usart_init+0xfe>
     bec:	e0a0      	b.n	d30 <usart_init+0x240>
     bee:	2380      	movs	r3, #128	; 0x80
     bf0:	055b      	lsls	r3, r3, #21
     bf2:	4599      	cmp	r9, r3
     bf4:	d100      	bne.n	bf8 <usart_init+0x108>
     bf6:	e084      	b.n	d02 <usart_init+0x212>
	if(config->encoding_format_enable) {
     bf8:	7e73      	ldrb	r3, [r6, #25]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d002      	beq.n	c04 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     bfe:	7eb3      	ldrb	r3, [r6, #26]
     c00:	4642      	mov	r2, r8
     c02:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c04:	682a      	ldr	r2, [r5, #0]
     c06:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c08:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c0a:	2b00      	cmp	r3, #0
     c0c:	d1fc      	bne.n	c08 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     c0e:	330e      	adds	r3, #14
     c10:	aa06      	add	r2, sp, #24
     c12:	4694      	mov	ip, r2
     c14:	4463      	add	r3, ip
     c16:	881b      	ldrh	r3, [r3, #0]
     c18:	4642      	mov	r2, r8
     c1a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     c1c:	9b05      	ldr	r3, [sp, #20]
     c1e:	9a03      	ldr	r2, [sp, #12]
     c20:	4313      	orrs	r3, r2
     c22:	9a04      	ldr	r2, [sp, #16]
     c24:	4313      	orrs	r3, r2
     c26:	464a      	mov	r2, r9
     c28:	4313      	orrs	r3, r2
     c2a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c2c:	465b      	mov	r3, fp
     c2e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     c30:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c32:	4653      	mov	r3, sl
     c34:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     c36:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     c38:	2327      	movs	r3, #39	; 0x27
     c3a:	5cf3      	ldrb	r3, [r6, r3]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d101      	bne.n	c44 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c40:	3304      	adds	r3, #4
     c42:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c44:	7e73      	ldrb	r3, [r6, #25]
     c46:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c48:	7f32      	ldrb	r2, [r6, #28]
     c4a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c4c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c4e:	7f72      	ldrb	r2, [r6, #29]
     c50:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c52:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c54:	2224      	movs	r2, #36	; 0x24
     c56:	5cb2      	ldrb	r2, [r6, r2]
     c58:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c5a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c5c:	2225      	movs	r2, #37	; 0x25
     c5e:	5cb2      	ldrb	r2, [r6, r2]
     c60:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c62:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     c64:	7ab1      	ldrb	r1, [r6, #10]
     c66:	7af2      	ldrb	r2, [r6, #11]
     c68:	4311      	orrs	r1, r2
     c6a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     c6c:	8933      	ldrh	r3, [r6, #8]
     c6e:	2bff      	cmp	r3, #255	; 0xff
     c70:	d100      	bne.n	c74 <usart_init+0x184>
     c72:	e081      	b.n	d78 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c74:	2280      	movs	r2, #128	; 0x80
     c76:	0452      	lsls	r2, r2, #17
     c78:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     c7a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c7c:	232c      	movs	r3, #44	; 0x2c
     c7e:	5cf3      	ldrb	r3, [r6, r3]
     c80:	2b00      	cmp	r3, #0
     c82:	d103      	bne.n	c8c <usart_init+0x19c>
     c84:	4b62      	ldr	r3, [pc, #392]	; (e10 <usart_init+0x320>)
     c86:	789b      	ldrb	r3, [r3, #2]
     c88:	079b      	lsls	r3, r3, #30
     c8a:	d501      	bpl.n	c90 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c8c:	2380      	movs	r3, #128	; 0x80
     c8e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     c90:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c92:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     c94:	2b00      	cmp	r3, #0
     c96:	d1fc      	bne.n	c92 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     c98:	4643      	mov	r3, r8
     c9a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c9c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c9e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     ca0:	2b00      	cmp	r3, #0
     ca2:	d1fc      	bne.n	c9e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     ca4:	4643      	mov	r3, r8
     ca6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ca8:	ab0e      	add	r3, sp, #56	; 0x38
     caa:	2280      	movs	r2, #128	; 0x80
     cac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cae:	2200      	movs	r2, #0
     cb0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     cb2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     cb4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     cb6:	6b33      	ldr	r3, [r6, #48]	; 0x30
     cb8:	930a      	str	r3, [sp, #40]	; 0x28
     cba:	6b73      	ldr	r3, [r6, #52]	; 0x34
     cbc:	930b      	str	r3, [sp, #44]	; 0x2c
     cbe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     cc0:	930c      	str	r3, [sp, #48]	; 0x30
     cc2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     cc4:	9302      	str	r3, [sp, #8]
     cc6:	930d      	str	r3, [sp, #52]	; 0x34
     cc8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     cca:	ae0a      	add	r6, sp, #40	; 0x28
     ccc:	e063      	b.n	d96 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     cce:	2308      	movs	r3, #8
     cd0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     cd2:	3b07      	subs	r3, #7
     cd4:	9307      	str	r3, [sp, #28]
     cd6:	e77a      	b.n	bce <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     cd8:	6833      	ldr	r3, [r6, #0]
     cda:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     cdc:	68f3      	ldr	r3, [r6, #12]
     cde:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     ce0:	6973      	ldr	r3, [r6, #20]
     ce2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ce4:	7e33      	ldrb	r3, [r6, #24]
     ce6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ce8:	2326      	movs	r3, #38	; 0x26
     cea:	5cf3      	ldrb	r3, [r6, r3]
     cec:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     cee:	6873      	ldr	r3, [r6, #4]
     cf0:	4699      	mov	r9, r3
	switch (transfer_mode)
     cf2:	2b00      	cmp	r3, #0
     cf4:	d018      	beq.n	d28 <usart_init+0x238>
     cf6:	2380      	movs	r3, #128	; 0x80
     cf8:	055b      	lsls	r3, r3, #21
     cfa:	4599      	cmp	r9, r3
     cfc:	d001      	beq.n	d02 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     cfe:	2000      	movs	r0, #0
     d00:	e025      	b.n	d4e <usart_init+0x25e>
			if (!config->use_external_clock) {
     d02:	2327      	movs	r3, #39	; 0x27
     d04:	5cf3      	ldrb	r3, [r6, r3]
     d06:	2b00      	cmp	r3, #0
     d08:	d000      	beq.n	d0c <usart_init+0x21c>
     d0a:	e775      	b.n	bf8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     d0c:	6a33      	ldr	r3, [r6, #32]
     d0e:	001f      	movs	r7, r3
     d10:	b2c0      	uxtb	r0, r0
     d12:	4b40      	ldr	r3, [pc, #256]	; (e14 <usart_init+0x324>)
     d14:	4798      	blx	r3
     d16:	0001      	movs	r1, r0
     d18:	220e      	movs	r2, #14
     d1a:	ab06      	add	r3, sp, #24
     d1c:	469c      	mov	ip, r3
     d1e:	4462      	add	r2, ip
     d20:	0038      	movs	r0, r7
     d22:	4b3d      	ldr	r3, [pc, #244]	; (e18 <usart_init+0x328>)
     d24:	4798      	blx	r3
     d26:	e012      	b.n	d4e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d28:	2308      	movs	r3, #8
     d2a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d2c:	2300      	movs	r3, #0
     d2e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     d30:	2327      	movs	r3, #39	; 0x27
     d32:	5cf3      	ldrb	r3, [r6, r3]
     d34:	2b00      	cmp	r3, #0
     d36:	d00e      	beq.n	d56 <usart_init+0x266>
				status_code =
     d38:	9b06      	ldr	r3, [sp, #24]
     d3a:	9300      	str	r3, [sp, #0]
     d3c:	9b07      	ldr	r3, [sp, #28]
     d3e:	220e      	movs	r2, #14
     d40:	a906      	add	r1, sp, #24
     d42:	468c      	mov	ip, r1
     d44:	4462      	add	r2, ip
     d46:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     d48:	6a30      	ldr	r0, [r6, #32]
     d4a:	4f34      	ldr	r7, [pc, #208]	; (e1c <usart_init+0x32c>)
     d4c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     d4e:	2800      	cmp	r0, #0
     d50:	d000      	beq.n	d54 <usart_init+0x264>
     d52:	e6e0      	b.n	b16 <usart_init+0x26>
     d54:	e750      	b.n	bf8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     d56:	6a33      	ldr	r3, [r6, #32]
     d58:	001f      	movs	r7, r3
     d5a:	b2c0      	uxtb	r0, r0
     d5c:	4b2d      	ldr	r3, [pc, #180]	; (e14 <usart_init+0x324>)
     d5e:	4798      	blx	r3
     d60:	0001      	movs	r1, r0
				status_code =
     d62:	9b06      	ldr	r3, [sp, #24]
     d64:	9300      	str	r3, [sp, #0]
     d66:	9b07      	ldr	r3, [sp, #28]
     d68:	220e      	movs	r2, #14
     d6a:	a806      	add	r0, sp, #24
     d6c:	4684      	mov	ip, r0
     d6e:	4462      	add	r2, ip
     d70:	0038      	movs	r0, r7
     d72:	4f2a      	ldr	r7, [pc, #168]	; (e1c <usart_init+0x32c>)
     d74:	47b8      	blx	r7
     d76:	e7ea      	b.n	d4e <usart_init+0x25e>
		if(config->lin_slave_enable) {
     d78:	7ef3      	ldrb	r3, [r6, #27]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d100      	bne.n	d80 <usart_init+0x290>
     d7e:	e77d      	b.n	c7c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d80:	2380      	movs	r3, #128	; 0x80
     d82:	04db      	lsls	r3, r3, #19
     d84:	431f      	orrs	r7, r3
     d86:	e779      	b.n	c7c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d88:	0020      	movs	r0, r4
     d8a:	4b25      	ldr	r3, [pc, #148]	; (e20 <usart_init+0x330>)
     d8c:	4798      	blx	r3
     d8e:	e007      	b.n	da0 <usart_init+0x2b0>
     d90:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d92:	2f04      	cmp	r7, #4
     d94:	d00d      	beq.n	db2 <usart_init+0x2c2>
     d96:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d98:	00bb      	lsls	r3, r7, #2
     d9a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     d9c:	2800      	cmp	r0, #0
     d9e:	d0f3      	beq.n	d88 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     da0:	1c43      	adds	r3, r0, #1
     da2:	d0f5      	beq.n	d90 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     da4:	a90e      	add	r1, sp, #56	; 0x38
     da6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     da8:	0c00      	lsrs	r0, r0, #16
     daa:	b2c0      	uxtb	r0, r0
     dac:	4b1d      	ldr	r3, [pc, #116]	; (e24 <usart_init+0x334>)
     dae:	4798      	blx	r3
     db0:	e7ee      	b.n	d90 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     db2:	2300      	movs	r3, #0
     db4:	60eb      	str	r3, [r5, #12]
     db6:	612b      	str	r3, [r5, #16]
     db8:	616b      	str	r3, [r5, #20]
     dba:	61ab      	str	r3, [r5, #24]
     dbc:	61eb      	str	r3, [r5, #28]
     dbe:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     dc0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     dc2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     dc4:	2200      	movs	r2, #0
     dc6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     dc8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     dca:	3330      	adds	r3, #48	; 0x30
     dcc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     dce:	3301      	adds	r3, #1
     dd0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     dd2:	3301      	adds	r3, #1
     dd4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     dd6:	3301      	adds	r3, #1
     dd8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     dda:	6828      	ldr	r0, [r5, #0]
     ddc:	4b07      	ldr	r3, [pc, #28]	; (dfc <usart_init+0x30c>)
     dde:	4798      	blx	r3
     de0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     de2:	4911      	ldr	r1, [pc, #68]	; (e28 <usart_init+0x338>)
     de4:	4b11      	ldr	r3, [pc, #68]	; (e2c <usart_init+0x33c>)
     de6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     de8:	00a4      	lsls	r4, r4, #2
     dea:	4b11      	ldr	r3, [pc, #68]	; (e30 <usart_init+0x340>)
     dec:	50e5      	str	r5, [r4, r3]
	return status_code;
     dee:	2000      	movs	r0, #0
     df0:	e691      	b.n	b16 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     df2:	2310      	movs	r3, #16
     df4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     df6:	2300      	movs	r3, #0
     df8:	9307      	str	r3, [sp, #28]
     dfa:	e6e8      	b.n	bce <usart_init+0xde>
     dfc:	00000495 	.word	0x00000495
     e00:	40000400 	.word	0x40000400
     e04:	00001a11 	.word	0x00001a11
     e08:	00001985 	.word	0x00001985
     e0c:	000002d1 	.word	0x000002d1
     e10:	41002000 	.word	0x41002000
     e14:	00001a2d 	.word	0x00001a2d
     e18:	00000213 	.word	0x00000213
     e1c:	0000023d 	.word	0x0000023d
     e20:	0000031d 	.word	0x0000031d
     e24:	00001b09 	.word	0x00001b09
     e28:	00000f39 	.word	0x00000f39
     e2c:	000004d1 	.word	0x000004d1
     e30:	200000dc 	.word	0x200000dc

00000e34 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e34:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     e36:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     e38:	2a00      	cmp	r2, #0
     e3a:	d101      	bne.n	e40 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     e3c:	0018      	movs	r0, r3
     e3e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     e40:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     e42:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e44:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     e46:	2a00      	cmp	r2, #0
     e48:	d1f8      	bne.n	e3c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e4a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     e4c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     e4e:	2a00      	cmp	r2, #0
     e50:	d1fc      	bne.n	e4c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     e52:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e54:	2102      	movs	r1, #2
     e56:	7e1a      	ldrb	r2, [r3, #24]
     e58:	420a      	tst	r2, r1
     e5a:	d0fc      	beq.n	e56 <usart_write_wait+0x22>
	return STATUS_OK;
     e5c:	2300      	movs	r3, #0
     e5e:	e7ed      	b.n	e3c <usart_write_wait+0x8>

00000e60 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e60:	b5f0      	push	{r4, r5, r6, r7, lr}
     e62:	46ce      	mov	lr, r9
     e64:	4647      	mov	r7, r8
     e66:	b580      	push	{r7, lr}
     e68:	b083      	sub	sp, #12
     e6a:	0005      	movs	r5, r0
     e6c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e6e:	2017      	movs	r0, #23
	if (length == 0) {
     e70:	2a00      	cmp	r2, #0
     e72:	d104      	bne.n	e7e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     e74:	b003      	add	sp, #12
     e76:	bc0c      	pop	{r2, r3}
     e78:	4690      	mov	r8, r2
     e7a:	4699      	mov	r9, r3
     e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     e7e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     e80:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     e82:	2b00      	cmp	r3, #0
     e84:	d0f6      	beq.n	e74 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e86:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e88:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     e8a:	2b00      	cmp	r3, #0
     e8c:	d1fc      	bne.n	e88 <usart_write_buffer_wait+0x28>
	while (length--) {
     e8e:	3a01      	subs	r2, #1
     e90:	b293      	uxth	r3, r2
     e92:	4699      	mov	r9, r3
     e94:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e96:	2701      	movs	r7, #1
	while (length--) {
     e98:	4b1f      	ldr	r3, [pc, #124]	; (f18 <usart_write_buffer_wait+0xb8>)
     e9a:	4698      	mov	r8, r3
     e9c:	e011      	b.n	ec2 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     e9e:	1c73      	adds	r3, r6, #1
     ea0:	b29b      	uxth	r3, r3
     ea2:	9a01      	ldr	r2, [sp, #4]
     ea4:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ea6:	796a      	ldrb	r2, [r5, #5]
     ea8:	2a01      	cmp	r2, #1
     eaa:	d017      	beq.n	edc <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     eac:	b289      	uxth	r1, r1
     eae:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     eb0:	0028      	movs	r0, r5
     eb2:	4b1a      	ldr	r3, [pc, #104]	; (f1c <usart_write_buffer_wait+0xbc>)
     eb4:	4798      	blx	r3
	while (length--) {
     eb6:	464b      	mov	r3, r9
     eb8:	3b01      	subs	r3, #1
     eba:	b29b      	uxth	r3, r3
     ebc:	4699      	mov	r9, r3
     ebe:	4543      	cmp	r3, r8
     ec0:	d013      	beq.n	eea <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     ec2:	7e23      	ldrb	r3, [r4, #24]
     ec4:	423b      	tst	r3, r7
     ec6:	d1ea      	bne.n	e9e <usart_write_buffer_wait+0x3e>
     ec8:	4b13      	ldr	r3, [pc, #76]	; (f18 <usart_write_buffer_wait+0xb8>)
     eca:	7e22      	ldrb	r2, [r4, #24]
     ecc:	423a      	tst	r2, r7
     ece:	d1e6      	bne.n	e9e <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     ed0:	2b01      	cmp	r3, #1
     ed2:	d019      	beq.n	f08 <usart_write_buffer_wait+0xa8>
     ed4:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ed6:	2b00      	cmp	r3, #0
     ed8:	d1f7      	bne.n	eca <usart_write_buffer_wait+0x6a>
     eda:	e7e0      	b.n	e9e <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     edc:	3602      	adds	r6, #2
     ede:	b2b6      	uxth	r6, r6
     ee0:	9a01      	ldr	r2, [sp, #4]
     ee2:	5cd3      	ldrb	r3, [r2, r3]
     ee4:	021b      	lsls	r3, r3, #8
     ee6:	4319      	orrs	r1, r3
     ee8:	e7e2      	b.n	eb0 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     eea:	7e23      	ldrb	r3, [r4, #24]
     eec:	079b      	lsls	r3, r3, #30
     eee:	d40d      	bmi.n	f0c <usart_write_buffer_wait+0xac>
     ef0:	4b09      	ldr	r3, [pc, #36]	; (f18 <usart_write_buffer_wait+0xb8>)
     ef2:	2102      	movs	r1, #2
     ef4:	7e22      	ldrb	r2, [r4, #24]
     ef6:	420a      	tst	r2, r1
     ef8:	d10a      	bne.n	f10 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     efa:	2b01      	cmp	r3, #1
     efc:	d00a      	beq.n	f14 <usart_write_buffer_wait+0xb4>
     efe:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     f00:	2b00      	cmp	r3, #0
     f02:	d1f7      	bne.n	ef4 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     f04:	2000      	movs	r0, #0
     f06:	e7b5      	b.n	e74 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     f08:	2012      	movs	r0, #18
     f0a:	e7b3      	b.n	e74 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     f0c:	2000      	movs	r0, #0
     f0e:	e7b1      	b.n	e74 <usart_write_buffer_wait+0x14>
     f10:	2000      	movs	r0, #0
     f12:	e7af      	b.n	e74 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     f14:	2012      	movs	r0, #18
     f16:	e7ad      	b.n	e74 <usart_write_buffer_wait+0x14>
     f18:	0000ffff 	.word	0x0000ffff
     f1c:	00000e35 	.word	0x00000e35

00000f20 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     f20:	1c93      	adds	r3, r2, #2
     f22:	009b      	lsls	r3, r3, #2
     f24:	18c3      	adds	r3, r0, r3
     f26:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     f28:	2130      	movs	r1, #48	; 0x30
     f2a:	2301      	movs	r3, #1
     f2c:	4093      	lsls	r3, r2
     f2e:	001a      	movs	r2, r3
     f30:	5c43      	ldrb	r3, [r0, r1]
     f32:	4313      	orrs	r3, r2
     f34:	5443      	strb	r3, [r0, r1]
}
     f36:	4770      	bx	lr

00000f38 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f3a:	0080      	lsls	r0, r0, #2
     f3c:	4b62      	ldr	r3, [pc, #392]	; (10c8 <_usart_interrupt_handler+0x190>)
     f3e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f40:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f42:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     f44:	2b00      	cmp	r3, #0
     f46:	d1fc      	bne.n	f42 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f48:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f4a:	7da6      	ldrb	r6, [r4, #22]
     f4c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     f4e:	2330      	movs	r3, #48	; 0x30
     f50:	5ceb      	ldrb	r3, [r5, r3]
     f52:	2231      	movs	r2, #49	; 0x31
     f54:	5caf      	ldrb	r7, [r5, r2]
     f56:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f58:	07f3      	lsls	r3, r6, #31
     f5a:	d522      	bpl.n	fa2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     f5c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f5e:	b29b      	uxth	r3, r3
     f60:	2b00      	cmp	r3, #0
     f62:	d01c      	beq.n	f9e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f64:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     f66:	7813      	ldrb	r3, [r2, #0]
     f68:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f6a:	1c51      	adds	r1, r2, #1
     f6c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f6e:	7969      	ldrb	r1, [r5, #5]
     f70:	2901      	cmp	r1, #1
     f72:	d00e      	beq.n	f92 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f74:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f76:	05db      	lsls	r3, r3, #23
     f78:	0ddb      	lsrs	r3, r3, #23
     f7a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     f7c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f7e:	3b01      	subs	r3, #1
     f80:	b29b      	uxth	r3, r3
     f82:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f84:	2b00      	cmp	r3, #0
     f86:	d10c      	bne.n	fa2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f88:	3301      	adds	r3, #1
     f8a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f8c:	3301      	adds	r3, #1
     f8e:	75a3      	strb	r3, [r4, #22]
     f90:	e007      	b.n	fa2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f92:	7851      	ldrb	r1, [r2, #1]
     f94:	0209      	lsls	r1, r1, #8
     f96:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     f98:	3202      	adds	r2, #2
     f9a:	62aa      	str	r2, [r5, #40]	; 0x28
     f9c:	e7eb      	b.n	f76 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f9e:	2301      	movs	r3, #1
     fa0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     fa2:	07b3      	lsls	r3, r6, #30
     fa4:	d506      	bpl.n	fb4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     fa6:	2302      	movs	r3, #2
     fa8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     faa:	2200      	movs	r2, #0
     fac:	3331      	adds	r3, #49	; 0x31
     fae:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     fb0:	07fb      	lsls	r3, r7, #31
     fb2:	d41a      	bmi.n	fea <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     fb4:	0773      	lsls	r3, r6, #29
     fb6:	d565      	bpl.n	1084 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     fb8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     fba:	b29b      	uxth	r3, r3
     fbc:	2b00      	cmp	r3, #0
     fbe:	d05f      	beq.n	1080 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     fc0:	8b63      	ldrh	r3, [r4, #26]
     fc2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     fc4:	071a      	lsls	r2, r3, #28
     fc6:	d414      	bmi.n	ff2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     fc8:	223f      	movs	r2, #63	; 0x3f
     fca:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     fcc:	2b00      	cmp	r3, #0
     fce:	d034      	beq.n	103a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     fd0:	079a      	lsls	r2, r3, #30
     fd2:	d511      	bpl.n	ff8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     fd4:	221a      	movs	r2, #26
     fd6:	2332      	movs	r3, #50	; 0x32
     fd8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     fda:	3b30      	subs	r3, #48	; 0x30
     fdc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     fde:	077b      	lsls	r3, r7, #29
     fe0:	d550      	bpl.n	1084 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     fe2:	0028      	movs	r0, r5
     fe4:	696b      	ldr	r3, [r5, #20]
     fe6:	4798      	blx	r3
     fe8:	e04c      	b.n	1084 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     fea:	0028      	movs	r0, r5
     fec:	68eb      	ldr	r3, [r5, #12]
     fee:	4798      	blx	r3
     ff0:	e7e0      	b.n	fb4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     ff2:	2237      	movs	r2, #55	; 0x37
     ff4:	4013      	ands	r3, r2
     ff6:	e7e9      	b.n	fcc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ff8:	075a      	lsls	r2, r3, #29
     ffa:	d505      	bpl.n	1008 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     ffc:	221e      	movs	r2, #30
     ffe:	2332      	movs	r3, #50	; 0x32
    1000:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1002:	3b2e      	subs	r3, #46	; 0x2e
    1004:	8363      	strh	r3, [r4, #26]
    1006:	e7ea      	b.n	fde <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1008:	07da      	lsls	r2, r3, #31
    100a:	d505      	bpl.n	1018 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    100c:	2213      	movs	r2, #19
    100e:	2332      	movs	r3, #50	; 0x32
    1010:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1012:	3b31      	subs	r3, #49	; 0x31
    1014:	8363      	strh	r3, [r4, #26]
    1016:	e7e2      	b.n	fde <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1018:	06da      	lsls	r2, r3, #27
    101a:	d505      	bpl.n	1028 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    101c:	2242      	movs	r2, #66	; 0x42
    101e:	2332      	movs	r3, #50	; 0x32
    1020:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1022:	3b22      	subs	r3, #34	; 0x22
    1024:	8363      	strh	r3, [r4, #26]
    1026:	e7da      	b.n	fde <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1028:	2220      	movs	r2, #32
    102a:	421a      	tst	r2, r3
    102c:	d0d7      	beq.n	fde <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    102e:	3221      	adds	r2, #33	; 0x21
    1030:	2332      	movs	r3, #50	; 0x32
    1032:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1034:	3b12      	subs	r3, #18
    1036:	8363      	strh	r3, [r4, #26]
    1038:	e7d1      	b.n	fde <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    103a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    103c:	05db      	lsls	r3, r3, #23
    103e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1040:	b2da      	uxtb	r2, r3
    1042:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1044:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1046:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1048:	1c51      	adds	r1, r2, #1
    104a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    104c:	7969      	ldrb	r1, [r5, #5]
    104e:	2901      	cmp	r1, #1
    1050:	d010      	beq.n	1074 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1052:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1054:	3b01      	subs	r3, #1
    1056:	b29b      	uxth	r3, r3
    1058:	85ab      	strh	r3, [r5, #44]	; 0x2c
    105a:	2b00      	cmp	r3, #0
    105c:	d112      	bne.n	1084 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    105e:	3304      	adds	r3, #4
    1060:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1062:	2200      	movs	r2, #0
    1064:	332e      	adds	r3, #46	; 0x2e
    1066:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1068:	07bb      	lsls	r3, r7, #30
    106a:	d50b      	bpl.n	1084 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    106c:	0028      	movs	r0, r5
    106e:	692b      	ldr	r3, [r5, #16]
    1070:	4798      	blx	r3
    1072:	e007      	b.n	1084 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1074:	0a1b      	lsrs	r3, r3, #8
    1076:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1078:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    107a:	3301      	adds	r3, #1
    107c:	626b      	str	r3, [r5, #36]	; 0x24
    107e:	e7e8      	b.n	1052 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1080:	2304      	movs	r3, #4
    1082:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1084:	06f3      	lsls	r3, r6, #27
    1086:	d504      	bpl.n	1092 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1088:	2310      	movs	r3, #16
    108a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    108c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    108e:	06fb      	lsls	r3, r7, #27
    1090:	d40e      	bmi.n	10b0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1092:	06b3      	lsls	r3, r6, #26
    1094:	d504      	bpl.n	10a0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1096:	2320      	movs	r3, #32
    1098:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    109a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    109c:	073b      	lsls	r3, r7, #28
    109e:	d40b      	bmi.n	10b8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    10a0:	0733      	lsls	r3, r6, #28
    10a2:	d504      	bpl.n	10ae <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    10a4:	2308      	movs	r3, #8
    10a6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    10a8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    10aa:	06bb      	lsls	r3, r7, #26
    10ac:	d408      	bmi.n	10c0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    10ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    10b0:	0028      	movs	r0, r5
    10b2:	69eb      	ldr	r3, [r5, #28]
    10b4:	4798      	blx	r3
    10b6:	e7ec      	b.n	1092 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    10b8:	0028      	movs	r0, r5
    10ba:	69ab      	ldr	r3, [r5, #24]
    10bc:	4798      	blx	r3
    10be:	e7ef      	b.n	10a0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    10c0:	6a2b      	ldr	r3, [r5, #32]
    10c2:	0028      	movs	r0, r5
    10c4:	4798      	blx	r3
}
    10c6:	e7f2      	b.n	10ae <_usart_interrupt_handler+0x176>
    10c8:	200000dc 	.word	0x200000dc

000010cc <pspi_init>:



#warning come back to this and separate this function for readability
void pspi_init()
{
    10cc:	b570      	push	{r4, r5, r6, lr}
    10ce:	b08e      	sub	sp, #56	; 0x38
	config->mode             = SPI_MODE_MASTER;
    10d0:	2401      	movs	r4, #1
    10d2:	466b      	mov	r3, sp
    10d4:	701c      	strb	r4, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    10d6:	2300      	movs	r3, #0
    10d8:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    10da:	9302      	str	r3, [sp, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    10dc:	466a      	mov	r2, sp
    10de:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    10e0:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    10e2:	7494      	strb	r4, [r2, #18]
	config->select_slave_low_detect_enable= true;
    10e4:	74d4      	strb	r4, [r2, #19]
	config->master_slave_select_enable= false;
    10e6:	7513      	strb	r3, [r2, #20]
	config->generator_source = GCLK_GENERATOR_0;
    10e8:	2224      	movs	r2, #36	; 0x24
    10ea:	4669      	mov	r1, sp
    10ec:	548b      	strb	r3, [r1, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    10ee:	3a18      	subs	r2, #24
    10f0:	2100      	movs	r1, #0
    10f2:	a806      	add	r0, sp, #24
    10f4:	4b13      	ldr	r3, [pc, #76]	; (1144 <pspi_init+0x78>)
    10f6:	4798      	blx	r3
	struct spi_config sercom_1_conf;
	spi_get_config_defaults(&sercom_1_conf);
	sercom_1_conf.character_size = SERCOM_1_CHAR_SIZE;
	sercom_1_conf.mode_specific.master.baudrate = SERCOM_1_BAUD;
    10f8:	4b13      	ldr	r3, [pc, #76]	; (1148 <pspi_init+0x7c>)
    10fa:	9306      	str	r3, [sp, #24]
	sercom_1_conf.pinmux_pad0 = EXT2_SPI_SERCOM_PINMUX_PAD0;
    10fc:	4b13      	ldr	r3, [pc, #76]	; (114c <pspi_init+0x80>)
    10fe:	930a      	str	r3, [sp, #40]	; 0x28
	sercom_1_conf.pinmux_pad1 = EXT2_SPI_SERCOM_PINMUX_PAD1;
    1100:	4b13      	ldr	r3, [pc, #76]	; (1150 <pspi_init+0x84>)
    1102:	930b      	str	r3, [sp, #44]	; 0x2c
	sercom_1_conf.pinmux_pad2 = EXT2_SPI_SERCOM_PINMUX_PAD2;
    1104:	4b13      	ldr	r3, [pc, #76]	; (1154 <pspi_init+0x88>)
    1106:	930c      	str	r3, [sp, #48]	; 0x30
	sercom_1_conf.pinmux_pad3 = EXT2_SPI_SERCOM_PINMUX_PAD3;
    1108:	4b13      	ldr	r3, [pc, #76]	; (1158 <pspi_init+0x8c>)
    110a:	930d      	str	r3, [sp, #52]	; 0x34
	sercom_1_conf.mux_setting = EXT2_SPI_SERCOM_MUX_SETTING;
    110c:	2380      	movs	r3, #128	; 0x80
    110e:	025b      	lsls	r3, r3, #9
    1110:	9303      	str	r3, [sp, #12]
	
	
	
	spi_init(&spi_sercom1_mod, SERCOM1, &sercom_1_conf);
    1112:	4e12      	ldr	r6, [pc, #72]	; (115c <pspi_init+0x90>)
    1114:	466a      	mov	r2, sp
    1116:	4912      	ldr	r1, [pc, #72]	; (1160 <pspi_init+0x94>)
    1118:	0030      	movs	r0, r6
    111a:	4b12      	ldr	r3, [pc, #72]	; (1164 <pspi_init+0x98>)
    111c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    111e:	6835      	ldr	r5, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1120:	0028      	movs	r0, r5
    1122:	4b11      	ldr	r3, [pc, #68]	; (1168 <pspi_init+0x9c>)
    1124:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1126:	231f      	movs	r3, #31
    1128:	4018      	ands	r0, r3
    112a:	4084      	lsls	r4, r0
    112c:	4b0f      	ldr	r3, [pc, #60]	; (116c <pspi_init+0xa0>)
    112e:	601c      	str	r4, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1130:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1132:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1134:	2b00      	cmp	r3, #0
    1136:	d1fc      	bne.n	1132 <pspi_init+0x66>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1138:	682b      	ldr	r3, [r5, #0]
    113a:	2202      	movs	r2, #2
    113c:	4313      	orrs	r3, r2
    113e:	602b      	str	r3, [r5, #0]
	
	
	 
	
	
}
    1140:	b00e      	add	sp, #56	; 0x38
    1142:	bd70      	pop	{r4, r5, r6, pc}
    1144:	00002179 	.word	0x00002179
    1148:	003d0900 	.word	0x003d0900
    114c:	00100002 	.word	0x00100002
    1150:	00110002 	.word	0x00110002
    1154:	00120002 	.word	0x00120002
    1158:	00130002 	.word	0x00130002
    115c:	200000f8 	.word	0x200000f8
    1160:	42000c00 	.word	0x42000c00
    1164:	0000059d 	.word	0x0000059d
    1168:	0000050d 	.word	0x0000050d
    116c:	e000e100 	.word	0xe000e100

00001170 <debug_tx_cb>:
{
	pprint("%s", &debug_buffer[0]);
}

void debug_tx_cb(struct usart_module* const mod)
{
    1170:	b510      	push	{r4, lr}
	const char* pprint_buffer_temp = pprint_buffer;
	uint16_t temp_ctr = 0;
	while(*pprint_buffer_temp++)
    1172:	4b0a      	ldr	r3, [pc, #40]	; (119c <debug_tx_cb+0x2c>)
    1174:	781b      	ldrb	r3, [r3, #0]
    1176:	2b00      	cmp	r3, #0
    1178:	d00d      	beq.n	1196 <debug_tx_cb+0x26>
    117a:	4b09      	ldr	r3, [pc, #36]	; (11a0 <debug_tx_cb+0x30>)
    117c:	2200      	movs	r2, #0
	{
		temp_ctr++;
    117e:	3201      	adds	r2, #1
    1180:	b292      	uxth	r2, r2
    1182:	3301      	adds	r3, #1
	while(*pprint_buffer_temp++)
    1184:	1e59      	subs	r1, r3, #1
    1186:	7809      	ldrb	r1, [r1, #0]
    1188:	2900      	cmp	r1, #0
    118a:	d1f8      	bne.n	117e <debug_tx_cb+0xe>
	};
	memset(pprint_buffer, '\0', temp_ctr);
    118c:	2100      	movs	r1, #0
    118e:	4803      	ldr	r0, [pc, #12]	; (119c <debug_tx_cb+0x2c>)
    1190:	4b04      	ldr	r3, [pc, #16]	; (11a4 <debug_tx_cb+0x34>)
    1192:	4798      	blx	r3
}
    1194:	bd10      	pop	{r4, pc}
	uint16_t temp_ctr = 0;
    1196:	2200      	movs	r2, #0
    1198:	e7f8      	b.n	118c <debug_tx_cb+0x1c>
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	20000168 	.word	0x20000168
    11a0:	20000169 	.word	0x20000169
    11a4:	00002179 	.word	0x00002179

000011a8 <pprint>:
{
    11a8:	b40e      	push	{r1, r2, r3}
    11aa:	b510      	push	{r4, lr}
    11ac:	b083      	sub	sp, #12
    11ae:	aa05      	add	r2, sp, #20
    11b0:	ca02      	ldmia	r2!, {r1}
	va_start(args, str);
    11b2:	9201      	str	r2, [sp, #4]
	vsprintf(pprint_buffer, str, args);
    11b4:	4c08      	ldr	r4, [pc, #32]	; (11d8 <pprint+0x30>)
    11b6:	0020      	movs	r0, r4
    11b8:	4b08      	ldr	r3, [pc, #32]	; (11dc <pprint+0x34>)
    11ba:	4798      	blx	r3
	uint16_t strsize = (uint16_t)strlen(pprint_buffer);
    11bc:	0020      	movs	r0, r4
    11be:	4b08      	ldr	r3, [pc, #32]	; (11e0 <pprint+0x38>)
    11c0:	4798      	blx	r3
	usart_write_buffer_wait(DEBUG_MOD, pprint_buffer, strsize);	
    11c2:	b282      	uxth	r2, r0
    11c4:	0021      	movs	r1, r4
    11c6:	4807      	ldr	r0, [pc, #28]	; (11e4 <pprint+0x3c>)
    11c8:	4b07      	ldr	r3, [pc, #28]	; (11e8 <pprint+0x40>)
    11ca:	4798      	blx	r3
}
    11cc:	b003      	add	sp, #12
    11ce:	bc10      	pop	{r4}
    11d0:	bc08      	pop	{r3}
    11d2:	b003      	add	sp, #12
    11d4:	4718      	bx	r3
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	20000168 	.word	0x20000168
    11dc:	000021c9 	.word	0x000021c9
    11e0:	00002189 	.word	0x00002189
    11e4:	20000134 	.word	0x20000134
    11e8:	00000e61 	.word	0x00000e61

000011ec <pusart_init>:
{
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    11f0:	2380      	movs	r3, #128	; 0x80
    11f2:	05db      	lsls	r3, r3, #23
    11f4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    11f6:	2300      	movs	r3, #0
    11f8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    11fa:	22ff      	movs	r2, #255	; 0xff
    11fc:	4669      	mov	r1, sp
    11fe:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1200:	2200      	movs	r2, #0
    1202:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1204:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1206:	2401      	movs	r4, #1
    1208:	2124      	movs	r1, #36	; 0x24
    120a:	4668      	mov	r0, sp
    120c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    120e:	3101      	adds	r1, #1
    1210:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1212:	3101      	adds	r1, #1
    1214:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1216:	3101      	adds	r1, #1
    1218:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    121a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    121c:	3105      	adds	r1, #5
    121e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1220:	3101      	adds	r1, #1
    1222:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1224:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1226:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1228:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    122a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    122c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    122e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1230:	2313      	movs	r3, #19
    1232:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1234:	7742      	strb	r2, [r0, #29]
	debug_conf.baudrate =		SERCOM_3_BAUD;
    1236:	23e1      	movs	r3, #225	; 0xe1
    1238:	025b      	lsls	r3, r3, #9
    123a:	9308      	str	r3, [sp, #32]
	debug_conf.pinmux_pad0 =	SERCOM_3_PIN0;
    123c:	4b1d      	ldr	r3, [pc, #116]	; (12b4 <pusart_init+0xc8>)
    123e:	930c      	str	r3, [sp, #48]	; 0x30
	debug_conf.pinmux_pad1 =	SERCOM_3_PIN1;
    1240:	4b1d      	ldr	r3, [pc, #116]	; (12b8 <pusart_init+0xcc>)
    1242:	930d      	str	r3, [sp, #52]	; 0x34
	debug_conf.pinmux_pad2 =	SERCOM_3_PIN2;
    1244:	2301      	movs	r3, #1
    1246:	425b      	negs	r3, r3
    1248:	930e      	str	r3, [sp, #56]	; 0x38
	debug_conf.pinmux_pad3 =	SERCOM_3_PIN3;
    124a:	930f      	str	r3, [sp, #60]	; 0x3c
	debug_conf.mux_setting =	SERCOM_3_MUX_SETTING;
    124c:	2380      	movs	r3, #128	; 0x80
    124e:	035b      	lsls	r3, r3, #13
    1250:	9303      	str	r3, [sp, #12]
	usart_init(DEBUG_MOD, DEBUG_SERCOM, &debug_conf);
    1252:	4e1a      	ldr	r6, [pc, #104]	; (12bc <pusart_init+0xd0>)
    1254:	466a      	mov	r2, sp
    1256:	491a      	ldr	r1, [pc, #104]	; (12c0 <pusart_init+0xd4>)
    1258:	0030      	movs	r0, r6
    125a:	4b1a      	ldr	r3, [pc, #104]	; (12c4 <pusart_init+0xd8>)
    125c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    125e:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1260:	0028      	movs	r0, r5
    1262:	4b19      	ldr	r3, [pc, #100]	; (12c8 <pusart_init+0xdc>)
    1264:	4798      	blx	r3
    1266:	231f      	movs	r3, #31
    1268:	4018      	ands	r0, r3
    126a:	4084      	lsls	r4, r0
    126c:	4b17      	ldr	r3, [pc, #92]	; (12cc <pusart_init+0xe0>)
    126e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1270:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    1272:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1274:	2b00      	cmp	r3, #0
    1276:	d1fc      	bne.n	1272 <pusart_init+0x86>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1278:	682b      	ldr	r3, [r5, #0]
    127a:	2202      	movs	r2, #2
    127c:	4313      	orrs	r3, r2
    127e:	602b      	str	r3, [r5, #0]
	usart_register_callback(DEBUG_MOD, debug_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
    1280:	4c0e      	ldr	r4, [pc, #56]	; (12bc <pusart_init+0xd0>)
    1282:	3a01      	subs	r2, #1
    1284:	4912      	ldr	r1, [pc, #72]	; (12d0 <pusart_init+0xe4>)
    1286:	0020      	movs	r0, r4
    1288:	4e12      	ldr	r6, [pc, #72]	; (12d4 <pusart_init+0xe8>)
    128a:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    128c:	2531      	movs	r5, #49	; 0x31
    128e:	5d63      	ldrb	r3, [r4, r5]
    1290:	2202      	movs	r2, #2
    1292:	4313      	orrs	r3, r2
    1294:	5563      	strb	r3, [r4, r5]
	usart_register_callback(DEBUG_MOD, debug_tx_cb, USART_CALLBACK_BUFFER_TRANSMITTED);
    1296:	2200      	movs	r2, #0
    1298:	490f      	ldr	r1, [pc, #60]	; (12d8 <pusart_init+0xec>)
    129a:	0020      	movs	r0, r4
    129c:	47b0      	blx	r6
    129e:	5d63      	ldrb	r3, [r4, r5]
    12a0:	2201      	movs	r2, #1
    12a2:	4313      	orrs	r3, r2
    12a4:	5563      	strb	r3, [r4, r5]
	pprint(DEBUG_MOD, DEBUG_STARTUP_MSG);
    12a6:	490d      	ldr	r1, [pc, #52]	; (12dc <pusart_init+0xf0>)
    12a8:	0020      	movs	r0, r4
    12aa:	4b0d      	ldr	r3, [pc, #52]	; (12e0 <pusart_init+0xf4>)
    12ac:	4798      	blx	r3
}
    12ae:	b010      	add	sp, #64	; 0x40
    12b0:	bd70      	pop	{r4, r5, r6, pc}
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	00160002 	.word	0x00160002
    12b8:	00170002 	.word	0x00170002
    12bc:	20000134 	.word	0x20000134
    12c0:	42001400 	.word	0x42001400
    12c4:	00000af1 	.word	0x00000af1
    12c8:	0000050d 	.word	0x0000050d
    12cc:	e000e100 	.word	0xe000e100
    12d0:	000012e5 	.word	0x000012e5
    12d4:	00000f21 	.word	0x00000f21
    12d8:	00001171 	.word	0x00001171
    12dc:	000029f8 	.word	0x000029f8
    12e0:	000011a9 	.word	0x000011a9

000012e4 <debug_rx_cb>:
{
    12e4:	b510      	push	{r4, lr}
	pprint("%s", &debug_buffer[0]);
    12e6:	4902      	ldr	r1, [pc, #8]	; (12f0 <debug_rx_cb+0xc>)
    12e8:	4802      	ldr	r0, [pc, #8]	; (12f4 <debug_rx_cb+0x10>)
    12ea:	4b03      	ldr	r3, [pc, #12]	; (12f8 <debug_rx_cb+0x14>)
    12ec:	4798      	blx	r3
}
    12ee:	bd10      	pop	{r4, pc}
    12f0:	20000268 	.word	0x20000268
    12f4:	000029f4 	.word	0x000029f4
    12f8:	000011a9 	.word	0x000011a9

000012fc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    12fc:	4b0c      	ldr	r3, [pc, #48]	; (1330 <cpu_irq_enter_critical+0x34>)
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	2b00      	cmp	r3, #0
    1302:	d106      	bne.n	1312 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1304:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1308:	2b00      	cmp	r3, #0
    130a:	d007      	beq.n	131c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    130c:	2200      	movs	r2, #0
    130e:	4b09      	ldr	r3, [pc, #36]	; (1334 <cpu_irq_enter_critical+0x38>)
    1310:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1312:	4a07      	ldr	r2, [pc, #28]	; (1330 <cpu_irq_enter_critical+0x34>)
    1314:	6813      	ldr	r3, [r2, #0]
    1316:	3301      	adds	r3, #1
    1318:	6013      	str	r3, [r2, #0]
}
    131a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    131c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    131e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1322:	2200      	movs	r2, #0
    1324:	4b04      	ldr	r3, [pc, #16]	; (1338 <cpu_irq_enter_critical+0x3c>)
    1326:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1328:	3201      	adds	r2, #1
    132a:	4b02      	ldr	r3, [pc, #8]	; (1334 <cpu_irq_enter_critical+0x38>)
    132c:	701a      	strb	r2, [r3, #0]
    132e:	e7f0      	b.n	1312 <cpu_irq_enter_critical+0x16>
    1330:	200000ac 	.word	0x200000ac
    1334:	200000b0 	.word	0x200000b0
    1338:	2000000c 	.word	0x2000000c

0000133c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <cpu_irq_leave_critical+0x24>)
    133e:	681a      	ldr	r2, [r3, #0]
    1340:	3a01      	subs	r2, #1
    1342:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	2b00      	cmp	r3, #0
    1348:	d109      	bne.n	135e <cpu_irq_leave_critical+0x22>
    134a:	4b06      	ldr	r3, [pc, #24]	; (1364 <cpu_irq_leave_critical+0x28>)
    134c:	781b      	ldrb	r3, [r3, #0]
    134e:	2b00      	cmp	r3, #0
    1350:	d005      	beq.n	135e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1352:	2201      	movs	r2, #1
    1354:	4b04      	ldr	r3, [pc, #16]	; (1368 <cpu_irq_leave_critical+0x2c>)
    1356:	701a      	strb	r2, [r3, #0]
    1358:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    135c:	b662      	cpsie	i
	}
}
    135e:	4770      	bx	lr
    1360:	200000ac 	.word	0x200000ac
    1364:	200000b0 	.word	0x200000b0
    1368:	2000000c 	.word	0x2000000c

0000136c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    136c:	b5f0      	push	{r4, r5, r6, r7, lr}
    136e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1370:	ac01      	add	r4, sp, #4
    1372:	2501      	movs	r5, #1
    1374:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1376:	2700      	movs	r7, #0
    1378:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    137a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    137c:	0021      	movs	r1, r4
    137e:	203e      	movs	r0, #62	; 0x3e
    1380:	4e06      	ldr	r6, [pc, #24]	; (139c <system_board_init+0x30>)
    1382:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1384:	2280      	movs	r2, #128	; 0x80
    1386:	05d2      	lsls	r2, r2, #23
    1388:	4b05      	ldr	r3, [pc, #20]	; (13a0 <system_board_init+0x34>)
    138a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    138c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    138e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1390:	0021      	movs	r1, r4
    1392:	200f      	movs	r0, #15
    1394:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1396:	b003      	add	sp, #12
    1398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	000013a5 	.word	0x000013a5
    13a0:	41004480 	.word	0x41004480

000013a4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    13a4:	b500      	push	{lr}
    13a6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    13a8:	ab01      	add	r3, sp, #4
    13aa:	2280      	movs	r2, #128	; 0x80
    13ac:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    13ae:	780a      	ldrb	r2, [r1, #0]
    13b0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    13b2:	784a      	ldrb	r2, [r1, #1]
    13b4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    13b6:	788a      	ldrb	r2, [r1, #2]
    13b8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    13ba:	0019      	movs	r1, r3
    13bc:	4b01      	ldr	r3, [pc, #4]	; (13c4 <port_pin_set_config+0x20>)
    13be:	4798      	blx	r3
}
    13c0:	b003      	add	sp, #12
    13c2:	bd00      	pop	{pc}
    13c4:	00001b09 	.word	0x00001b09

000013c8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13c8:	b510      	push	{r4, lr}
	switch (clock_source) {
    13ca:	2808      	cmp	r0, #8
    13cc:	d803      	bhi.n	13d6 <system_clock_source_get_hz+0xe>
    13ce:	0080      	lsls	r0, r0, #2
    13d0:	4b1c      	ldr	r3, [pc, #112]	; (1444 <system_clock_source_get_hz+0x7c>)
    13d2:	581b      	ldr	r3, [r3, r0]
    13d4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    13d6:	2000      	movs	r0, #0
    13d8:	e032      	b.n	1440 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    13da:	4b1b      	ldr	r3, [pc, #108]	; (1448 <system_clock_source_get_hz+0x80>)
    13dc:	6918      	ldr	r0, [r3, #16]
    13de:	e02f      	b.n	1440 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    13e0:	4b1a      	ldr	r3, [pc, #104]	; (144c <system_clock_source_get_hz+0x84>)
    13e2:	6a1b      	ldr	r3, [r3, #32]
    13e4:	059b      	lsls	r3, r3, #22
    13e6:	0f9b      	lsrs	r3, r3, #30
    13e8:	4819      	ldr	r0, [pc, #100]	; (1450 <system_clock_source_get_hz+0x88>)
    13ea:	40d8      	lsrs	r0, r3
    13ec:	e028      	b.n	1440 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    13ee:	4b16      	ldr	r3, [pc, #88]	; (1448 <system_clock_source_get_hz+0x80>)
    13f0:	6958      	ldr	r0, [r3, #20]
    13f2:	e025      	b.n	1440 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13f4:	4b14      	ldr	r3, [pc, #80]	; (1448 <system_clock_source_get_hz+0x80>)
    13f6:	681b      	ldr	r3, [r3, #0]
			return 0;
    13f8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13fa:	079b      	lsls	r3, r3, #30
    13fc:	d520      	bpl.n	1440 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13fe:	4913      	ldr	r1, [pc, #76]	; (144c <system_clock_source_get_hz+0x84>)
    1400:	2210      	movs	r2, #16
    1402:	68cb      	ldr	r3, [r1, #12]
    1404:	421a      	tst	r2, r3
    1406:	d0fc      	beq.n	1402 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1408:	4b0f      	ldr	r3, [pc, #60]	; (1448 <system_clock_source_get_hz+0x80>)
    140a:	681a      	ldr	r2, [r3, #0]
    140c:	2324      	movs	r3, #36	; 0x24
    140e:	4013      	ands	r3, r2
    1410:	2b04      	cmp	r3, #4
    1412:	d001      	beq.n	1418 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1414:	480f      	ldr	r0, [pc, #60]	; (1454 <system_clock_source_get_hz+0x8c>)
    1416:	e013      	b.n	1440 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1418:	2000      	movs	r0, #0
    141a:	4b0f      	ldr	r3, [pc, #60]	; (1458 <system_clock_source_get_hz+0x90>)
    141c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    141e:	4b0a      	ldr	r3, [pc, #40]	; (1448 <system_clock_source_get_hz+0x80>)
    1420:	689b      	ldr	r3, [r3, #8]
    1422:	041b      	lsls	r3, r3, #16
    1424:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1426:	4358      	muls	r0, r3
    1428:	e00a      	b.n	1440 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    142a:	2350      	movs	r3, #80	; 0x50
    142c:	4a07      	ldr	r2, [pc, #28]	; (144c <system_clock_source_get_hz+0x84>)
    142e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1430:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1432:	075b      	lsls	r3, r3, #29
    1434:	d504      	bpl.n	1440 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1436:	4b04      	ldr	r3, [pc, #16]	; (1448 <system_clock_source_get_hz+0x80>)
    1438:	68d8      	ldr	r0, [r3, #12]
    143a:	e001      	b.n	1440 <system_clock_source_get_hz+0x78>
		return 32768UL;
    143c:	2080      	movs	r0, #128	; 0x80
    143e:	0200      	lsls	r0, r0, #8
	}
}
    1440:	bd10      	pop	{r4, pc}
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	00002a0c 	.word	0x00002a0c
    1448:	200000b4 	.word	0x200000b4
    144c:	40000800 	.word	0x40000800
    1450:	007a1200 	.word	0x007a1200
    1454:	02dc6c00 	.word	0x02dc6c00
    1458:	00001a2d 	.word	0x00001a2d

0000145c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    145c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    145e:	490c      	ldr	r1, [pc, #48]	; (1490 <system_clock_source_osc8m_set_config+0x34>)
    1460:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1462:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1464:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1466:	7840      	ldrb	r0, [r0, #1]
    1468:	2201      	movs	r2, #1
    146a:	4010      	ands	r0, r2
    146c:	0180      	lsls	r0, r0, #6
    146e:	2640      	movs	r6, #64	; 0x40
    1470:	43b3      	bics	r3, r6
    1472:	4303      	orrs	r3, r0
    1474:	402a      	ands	r2, r5
    1476:	01d2      	lsls	r2, r2, #7
    1478:	2080      	movs	r0, #128	; 0x80
    147a:	4383      	bics	r3, r0
    147c:	4313      	orrs	r3, r2
    147e:	2203      	movs	r2, #3
    1480:	4022      	ands	r2, r4
    1482:	0212      	lsls	r2, r2, #8
    1484:	4803      	ldr	r0, [pc, #12]	; (1494 <system_clock_source_osc8m_set_config+0x38>)
    1486:	4003      	ands	r3, r0
    1488:	4313      	orrs	r3, r2
    148a:	620b      	str	r3, [r1, #32]
}
    148c:	bd70      	pop	{r4, r5, r6, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	40000800 	.word	0x40000800
    1494:	fffffcff 	.word	0xfffffcff

00001498 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	46de      	mov	lr, fp
    149c:	4657      	mov	r7, sl
    149e:	464e      	mov	r6, r9
    14a0:	4645      	mov	r5, r8
    14a2:	b5e0      	push	{r5, r6, r7, lr}
    14a4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    14a6:	4b26      	ldr	r3, [pc, #152]	; (1540 <system_clock_source_xosc32k_set_config+0xa8>)
    14a8:	469b      	mov	fp, r3
    14aa:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    14ac:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    14ae:	7800      	ldrb	r0, [r0, #0]
    14b0:	4242      	negs	r2, r0
    14b2:	4142      	adcs	r2, r0
    14b4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    14b6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    14b8:	78ca      	ldrb	r2, [r1, #3]
    14ba:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    14bc:	790a      	ldrb	r2, [r1, #4]
    14be:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    14c0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    14c2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    14c4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    14c6:	688a      	ldr	r2, [r1, #8]
    14c8:	491e      	ldr	r1, [pc, #120]	; (1544 <system_clock_source_xosc32k_set_config+0xac>)
    14ca:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    14cc:	2101      	movs	r1, #1
    14ce:	464a      	mov	r2, r9
    14d0:	0092      	lsls	r2, r2, #2
    14d2:	4691      	mov	r9, r2
    14d4:	2204      	movs	r2, #4
    14d6:	4393      	bics	r3, r2
    14d8:	464a      	mov	r2, r9
    14da:	4313      	orrs	r3, r2
    14dc:	4642      	mov	r2, r8
    14de:	400a      	ands	r2, r1
    14e0:	00d2      	lsls	r2, r2, #3
    14e2:	4690      	mov	r8, r2
    14e4:	2208      	movs	r2, #8
    14e6:	4393      	bics	r3, r2
    14e8:	4642      	mov	r2, r8
    14ea:	4313      	orrs	r3, r2
    14ec:	4662      	mov	r2, ip
    14ee:	400a      	ands	r2, r1
    14f0:	0112      	lsls	r2, r2, #4
    14f2:	4694      	mov	ip, r2
    14f4:	2210      	movs	r2, #16
    14f6:	4393      	bics	r3, r2
    14f8:	4662      	mov	r2, ip
    14fa:	4313      	orrs	r3, r2
    14fc:	4008      	ands	r0, r1
    14fe:	0140      	lsls	r0, r0, #5
    1500:	2220      	movs	r2, #32
    1502:	4393      	bics	r3, r2
    1504:	4303      	orrs	r3, r0
    1506:	400f      	ands	r7, r1
    1508:	01bf      	lsls	r7, r7, #6
    150a:	2040      	movs	r0, #64	; 0x40
    150c:	4383      	bics	r3, r0
    150e:	433b      	orrs	r3, r7
    1510:	400e      	ands	r6, r1
    1512:	01f6      	lsls	r6, r6, #7
    1514:	3040      	adds	r0, #64	; 0x40
    1516:	4383      	bics	r3, r0
    1518:	4333      	orrs	r3, r6
    151a:	3879      	subs	r0, #121	; 0x79
    151c:	4005      	ands	r5, r0
    151e:	022d      	lsls	r5, r5, #8
    1520:	4809      	ldr	r0, [pc, #36]	; (1548 <system_clock_source_xosc32k_set_config+0xb0>)
    1522:	4003      	ands	r3, r0
    1524:	432b      	orrs	r3, r5
    1526:	4021      	ands	r1, r4
    1528:	0309      	lsls	r1, r1, #12
    152a:	4808      	ldr	r0, [pc, #32]	; (154c <system_clock_source_xosc32k_set_config+0xb4>)
    152c:	4003      	ands	r3, r0
    152e:	430b      	orrs	r3, r1
    1530:	465a      	mov	r2, fp
    1532:	8293      	strh	r3, [r2, #20]
}
    1534:	bc3c      	pop	{r2, r3, r4, r5}
    1536:	4690      	mov	r8, r2
    1538:	4699      	mov	r9, r3
    153a:	46a2      	mov	sl, r4
    153c:	46ab      	mov	fp, r5
    153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1540:	40000800 	.word	0x40000800
    1544:	200000b4 	.word	0x200000b4
    1548:	fffff8ff 	.word	0xfffff8ff
    154c:	ffffefff 	.word	0xffffefff

00001550 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1550:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1552:	7a03      	ldrb	r3, [r0, #8]
    1554:	069b      	lsls	r3, r3, #26
    1556:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1558:	8942      	ldrh	r2, [r0, #10]
    155a:	0592      	lsls	r2, r2, #22
    155c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    155e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1560:	4918      	ldr	r1, [pc, #96]	; (15c4 <system_clock_source_dfll_set_config+0x74>)
    1562:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1564:	7983      	ldrb	r3, [r0, #6]
    1566:	79c2      	ldrb	r2, [r0, #7]
    1568:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    156a:	8842      	ldrh	r2, [r0, #2]
    156c:	8884      	ldrh	r4, [r0, #4]
    156e:	4322      	orrs	r2, r4
    1570:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1572:	7842      	ldrb	r2, [r0, #1]
    1574:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1576:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1578:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    157a:	7803      	ldrb	r3, [r0, #0]
    157c:	2b04      	cmp	r3, #4
    157e:	d011      	beq.n	15a4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1580:	2b20      	cmp	r3, #32
    1582:	d10e      	bne.n	15a2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1584:	7b03      	ldrb	r3, [r0, #12]
    1586:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1588:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    158a:	4313      	orrs	r3, r2
    158c:	89c2      	ldrh	r2, [r0, #14]
    158e:	0412      	lsls	r2, r2, #16
    1590:	490d      	ldr	r1, [pc, #52]	; (15c8 <system_clock_source_dfll_set_config+0x78>)
    1592:	400a      	ands	r2, r1
    1594:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1596:	4a0b      	ldr	r2, [pc, #44]	; (15c4 <system_clock_source_dfll_set_config+0x74>)
    1598:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    159a:	6811      	ldr	r1, [r2, #0]
    159c:	4b0b      	ldr	r3, [pc, #44]	; (15cc <system_clock_source_dfll_set_config+0x7c>)
    159e:	430b      	orrs	r3, r1
    15a0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    15a2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15a4:	7b03      	ldrb	r3, [r0, #12]
    15a6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15a8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15aa:	4313      	orrs	r3, r2
    15ac:	89c2      	ldrh	r2, [r0, #14]
    15ae:	0412      	lsls	r2, r2, #16
    15b0:	4905      	ldr	r1, [pc, #20]	; (15c8 <system_clock_source_dfll_set_config+0x78>)
    15b2:	400a      	ands	r2, r1
    15b4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15b6:	4a03      	ldr	r2, [pc, #12]	; (15c4 <system_clock_source_dfll_set_config+0x74>)
    15b8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    15ba:	6813      	ldr	r3, [r2, #0]
    15bc:	2104      	movs	r1, #4
    15be:	430b      	orrs	r3, r1
    15c0:	6013      	str	r3, [r2, #0]
    15c2:	e7ee      	b.n	15a2 <system_clock_source_dfll_set_config+0x52>
    15c4:	200000b4 	.word	0x200000b4
    15c8:	03ff0000 	.word	0x03ff0000
    15cc:	00000424 	.word	0x00000424

000015d0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    15d0:	2808      	cmp	r0, #8
    15d2:	d803      	bhi.n	15dc <system_clock_source_enable+0xc>
    15d4:	0080      	lsls	r0, r0, #2
    15d6:	4b25      	ldr	r3, [pc, #148]	; (166c <system_clock_source_enable+0x9c>)
    15d8:	581b      	ldr	r3, [r3, r0]
    15da:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15dc:	2017      	movs	r0, #23
    15de:	e044      	b.n	166a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    15e0:	4a23      	ldr	r2, [pc, #140]	; (1670 <system_clock_source_enable+0xa0>)
    15e2:	6a13      	ldr	r3, [r2, #32]
    15e4:	2102      	movs	r1, #2
    15e6:	430b      	orrs	r3, r1
    15e8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    15ea:	2000      	movs	r0, #0
    15ec:	e03d      	b.n	166a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    15ee:	4a20      	ldr	r2, [pc, #128]	; (1670 <system_clock_source_enable+0xa0>)
    15f0:	6993      	ldr	r3, [r2, #24]
    15f2:	2102      	movs	r1, #2
    15f4:	430b      	orrs	r3, r1
    15f6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    15f8:	2000      	movs	r0, #0
		break;
    15fa:	e036      	b.n	166a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    15fc:	4a1c      	ldr	r2, [pc, #112]	; (1670 <system_clock_source_enable+0xa0>)
    15fe:	8a13      	ldrh	r3, [r2, #16]
    1600:	2102      	movs	r1, #2
    1602:	430b      	orrs	r3, r1
    1604:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1606:	2000      	movs	r0, #0
		break;
    1608:	e02f      	b.n	166a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    160a:	4a19      	ldr	r2, [pc, #100]	; (1670 <system_clock_source_enable+0xa0>)
    160c:	8a93      	ldrh	r3, [r2, #20]
    160e:	2102      	movs	r1, #2
    1610:	430b      	orrs	r3, r1
    1612:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1614:	2000      	movs	r0, #0
		break;
    1616:	e028      	b.n	166a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1618:	4916      	ldr	r1, [pc, #88]	; (1674 <system_clock_source_enable+0xa4>)
    161a:	680b      	ldr	r3, [r1, #0]
    161c:	2202      	movs	r2, #2
    161e:	4313      	orrs	r3, r2
    1620:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1622:	4b13      	ldr	r3, [pc, #76]	; (1670 <system_clock_source_enable+0xa0>)
    1624:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1626:	0019      	movs	r1, r3
    1628:	320e      	adds	r2, #14
    162a:	68cb      	ldr	r3, [r1, #12]
    162c:	421a      	tst	r2, r3
    162e:	d0fc      	beq.n	162a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1630:	4a10      	ldr	r2, [pc, #64]	; (1674 <system_clock_source_enable+0xa4>)
    1632:	6891      	ldr	r1, [r2, #8]
    1634:	4b0e      	ldr	r3, [pc, #56]	; (1670 <system_clock_source_enable+0xa0>)
    1636:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1638:	6852      	ldr	r2, [r2, #4]
    163a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    163c:	2200      	movs	r2, #0
    163e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1640:	0019      	movs	r1, r3
    1642:	3210      	adds	r2, #16
    1644:	68cb      	ldr	r3, [r1, #12]
    1646:	421a      	tst	r2, r3
    1648:	d0fc      	beq.n	1644 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    164a:	4b0a      	ldr	r3, [pc, #40]	; (1674 <system_clock_source_enable+0xa4>)
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	b29b      	uxth	r3, r3
    1650:	4a07      	ldr	r2, [pc, #28]	; (1670 <system_clock_source_enable+0xa0>)
    1652:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1654:	2000      	movs	r0, #0
    1656:	e008      	b.n	166a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1658:	4905      	ldr	r1, [pc, #20]	; (1670 <system_clock_source_enable+0xa0>)
    165a:	2244      	movs	r2, #68	; 0x44
    165c:	5c8b      	ldrb	r3, [r1, r2]
    165e:	2002      	movs	r0, #2
    1660:	4303      	orrs	r3, r0
    1662:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1664:	2000      	movs	r0, #0
		break;
    1666:	e000      	b.n	166a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1668:	2000      	movs	r0, #0
}
    166a:	4770      	bx	lr
    166c:	00002a30 	.word	0x00002a30
    1670:	40000800 	.word	0x40000800
    1674:	200000b4 	.word	0x200000b4

00001678 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    167c:	22c2      	movs	r2, #194	; 0xc2
    167e:	00d2      	lsls	r2, r2, #3
    1680:	4b47      	ldr	r3, [pc, #284]	; (17a0 <system_clock_init+0x128>)
    1682:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1684:	4a47      	ldr	r2, [pc, #284]	; (17a4 <system_clock_init+0x12c>)
    1686:	6853      	ldr	r3, [r2, #4]
    1688:	211e      	movs	r1, #30
    168a:	438b      	bics	r3, r1
    168c:	391a      	subs	r1, #26
    168e:	430b      	orrs	r3, r1
    1690:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1692:	2202      	movs	r2, #2
    1694:	ab01      	add	r3, sp, #4
    1696:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1698:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    169a:	4d43      	ldr	r5, [pc, #268]	; (17a8 <system_clock_init+0x130>)
    169c:	b2e0      	uxtb	r0, r4
    169e:	a901      	add	r1, sp, #4
    16a0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16a2:	3401      	adds	r4, #1
    16a4:	2c25      	cmp	r4, #37	; 0x25
    16a6:	d1f9      	bne.n	169c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    16a8:	a80a      	add	r0, sp, #40	; 0x28
    16aa:	2300      	movs	r3, #0
    16ac:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    16ae:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    16b0:	2280      	movs	r2, #128	; 0x80
    16b2:	0212      	lsls	r2, r2, #8
    16b4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    16b6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    16b8:	2201      	movs	r2, #1
    16ba:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    16bc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    16be:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    16c0:	3202      	adds	r2, #2
    16c2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    16c4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    16c6:	4b39      	ldr	r3, [pc, #228]	; (17ac <system_clock_init+0x134>)
    16c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    16ca:	2005      	movs	r0, #5
    16cc:	4b38      	ldr	r3, [pc, #224]	; (17b0 <system_clock_init+0x138>)
    16ce:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16d0:	4933      	ldr	r1, [pc, #204]	; (17a0 <system_clock_init+0x128>)
    16d2:	2202      	movs	r2, #2
    16d4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    16d6:	421a      	tst	r2, r3
    16d8:	d0fc      	beq.n	16d4 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    16da:	4a31      	ldr	r2, [pc, #196]	; (17a0 <system_clock_init+0x128>)
    16dc:	8a93      	ldrh	r3, [r2, #20]
    16de:	2180      	movs	r1, #128	; 0x80
    16e0:	430b      	orrs	r3, r1
    16e2:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    16e4:	ab05      	add	r3, sp, #20
    16e6:	2100      	movs	r1, #0
    16e8:	2200      	movs	r2, #0
    16ea:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    16ec:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    16ee:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    16f0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    16f2:	313f      	adds	r1, #63	; 0x3f
    16f4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    16f6:	393b      	subs	r1, #59	; 0x3b
    16f8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    16fa:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    16fc:	4b2d      	ldr	r3, [pc, #180]	; (17b4 <system_clock_init+0x13c>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1702:	2b3f      	cmp	r3, #63	; 0x3f
    1704:	d04a      	beq.n	179c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1706:	a805      	add	r0, sp, #20
    1708:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    170a:	4b2b      	ldr	r3, [pc, #172]	; (17b8 <system_clock_init+0x140>)
    170c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    170e:	2307      	movs	r3, #7
    1710:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1712:	3338      	adds	r3, #56	; 0x38
    1714:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1716:	4b29      	ldr	r3, [pc, #164]	; (17bc <system_clock_init+0x144>)
    1718:	4798      	blx	r3
	config->run_in_standby  = false;
    171a:	a804      	add	r0, sp, #16
    171c:	2500      	movs	r5, #0
    171e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1720:	2601      	movs	r6, #1
    1722:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1724:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1726:	4b26      	ldr	r3, [pc, #152]	; (17c0 <system_clock_init+0x148>)
    1728:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    172a:	2006      	movs	r0, #6
    172c:	4f20      	ldr	r7, [pc, #128]	; (17b0 <system_clock_init+0x138>)
    172e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1730:	4b24      	ldr	r3, [pc, #144]	; (17c4 <system_clock_init+0x14c>)
    1732:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1734:	ac01      	add	r4, sp, #4
    1736:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1738:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    173a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    173c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    173e:	2305      	movs	r3, #5
    1740:	7023      	strb	r3, [r4, #0]
    1742:	0021      	movs	r1, r4
    1744:	2001      	movs	r0, #1
    1746:	4b20      	ldr	r3, [pc, #128]	; (17c8 <system_clock_init+0x150>)
    1748:	4798      	blx	r3
    174a:	2001      	movs	r0, #1
    174c:	4b1f      	ldr	r3, [pc, #124]	; (17cc <system_clock_init+0x154>)
    174e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1750:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1752:	0021      	movs	r1, r4
    1754:	2000      	movs	r0, #0
    1756:	4b14      	ldr	r3, [pc, #80]	; (17a8 <system_clock_init+0x130>)
    1758:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    175a:	2000      	movs	r0, #0
    175c:	4b1c      	ldr	r3, [pc, #112]	; (17d0 <system_clock_init+0x158>)
    175e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1760:	2007      	movs	r0, #7
    1762:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1764:	490e      	ldr	r1, [pc, #56]	; (17a0 <system_clock_init+0x128>)
    1766:	22d0      	movs	r2, #208	; 0xd0
    1768:	68cb      	ldr	r3, [r1, #12]
    176a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    176c:	2bd0      	cmp	r3, #208	; 0xd0
    176e:	d1fb      	bne.n	1768 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1770:	4a18      	ldr	r2, [pc, #96]	; (17d4 <system_clock_init+0x15c>)
    1772:	2300      	movs	r3, #0
    1774:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1776:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1778:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    177a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    177c:	a901      	add	r1, sp, #4
    177e:	2201      	movs	r2, #1
    1780:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1782:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1784:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1786:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1788:	3307      	adds	r3, #7
    178a:	700b      	strb	r3, [r1, #0]
    178c:	2000      	movs	r0, #0
    178e:	4b0e      	ldr	r3, [pc, #56]	; (17c8 <system_clock_init+0x150>)
    1790:	4798      	blx	r3
    1792:	2000      	movs	r0, #0
    1794:	4b0d      	ldr	r3, [pc, #52]	; (17cc <system_clock_init+0x154>)
    1796:	4798      	blx	r3
#endif
}
    1798:	b00f      	add	sp, #60	; 0x3c
    179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    179c:	3b20      	subs	r3, #32
    179e:	e7b2      	b.n	1706 <system_clock_init+0x8e>
    17a0:	40000800 	.word	0x40000800
    17a4:	41004000 	.word	0x41004000
    17a8:	00001a11 	.word	0x00001a11
    17ac:	00001499 	.word	0x00001499
    17b0:	000015d1 	.word	0x000015d1
    17b4:	00806024 	.word	0x00806024
    17b8:	000005b9 	.word	0x000005b9
    17bc:	00001551 	.word	0x00001551
    17c0:	0000145d 	.word	0x0000145d
    17c4:	000017d9 	.word	0x000017d9
    17c8:	000017fd 	.word	0x000017fd
    17cc:	000018b5 	.word	0x000018b5
    17d0:	00001985 	.word	0x00001985
    17d4:	40000400 	.word	0x40000400

000017d8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    17d8:	4a06      	ldr	r2, [pc, #24]	; (17f4 <system_gclk_init+0x1c>)
    17da:	6993      	ldr	r3, [r2, #24]
    17dc:	2108      	movs	r1, #8
    17de:	430b      	orrs	r3, r1
    17e0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    17e2:	2201      	movs	r2, #1
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <system_gclk_init+0x20>)
    17e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    17e8:	0019      	movs	r1, r3
    17ea:	780b      	ldrb	r3, [r1, #0]
    17ec:	4213      	tst	r3, r2
    17ee:	d1fc      	bne.n	17ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17f0:	4770      	bx	lr
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	40000400 	.word	0x40000400
    17f8:	40000c00 	.word	0x40000c00

000017fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    17fc:	b570      	push	{r4, r5, r6, lr}
    17fe:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1800:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1802:	780d      	ldrb	r5, [r1, #0]
    1804:	022d      	lsls	r5, r5, #8
    1806:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1808:	784b      	ldrb	r3, [r1, #1]
    180a:	2b00      	cmp	r3, #0
    180c:	d002      	beq.n	1814 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    180e:	2380      	movs	r3, #128	; 0x80
    1810:	02db      	lsls	r3, r3, #11
    1812:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1814:	7a4b      	ldrb	r3, [r1, #9]
    1816:	2b00      	cmp	r3, #0
    1818:	d002      	beq.n	1820 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    181a:	2380      	movs	r3, #128	; 0x80
    181c:	031b      	lsls	r3, r3, #12
    181e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1820:	6848      	ldr	r0, [r1, #4]
    1822:	2801      	cmp	r0, #1
    1824:	d910      	bls.n	1848 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1826:	1e43      	subs	r3, r0, #1
    1828:	4218      	tst	r0, r3
    182a:	d134      	bne.n	1896 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    182c:	2802      	cmp	r0, #2
    182e:	d930      	bls.n	1892 <system_gclk_gen_set_config+0x96>
    1830:	2302      	movs	r3, #2
    1832:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1834:	3201      	adds	r2, #1
						mask <<= 1) {
    1836:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1838:	4298      	cmp	r0, r3
    183a:	d8fb      	bhi.n	1834 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    183c:	0212      	lsls	r2, r2, #8
    183e:	4332      	orrs	r2, r6
    1840:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1842:	2380      	movs	r3, #128	; 0x80
    1844:	035b      	lsls	r3, r3, #13
    1846:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1848:	7a0b      	ldrb	r3, [r1, #8]
    184a:	2b00      	cmp	r3, #0
    184c:	d002      	beq.n	1854 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    184e:	2380      	movs	r3, #128	; 0x80
    1850:	039b      	lsls	r3, r3, #14
    1852:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1854:	4a13      	ldr	r2, [pc, #76]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1856:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1858:	b25b      	sxtb	r3, r3
    185a:	2b00      	cmp	r3, #0
    185c:	dbfb      	blt.n	1856 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    185e:	4b12      	ldr	r3, [pc, #72]	; (18a8 <system_gclk_gen_set_config+0xac>)
    1860:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1862:	4b12      	ldr	r3, [pc, #72]	; (18ac <system_gclk_gen_set_config+0xb0>)
    1864:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1866:	4a0f      	ldr	r2, [pc, #60]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1868:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    186a:	b25b      	sxtb	r3, r3
    186c:	2b00      	cmp	r3, #0
    186e:	dbfb      	blt.n	1868 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1870:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1872:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1874:	001a      	movs	r2, r3
    1876:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1878:	b25b      	sxtb	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	dbfb      	blt.n	1876 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    187e:	4a09      	ldr	r2, [pc, #36]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1880:	6853      	ldr	r3, [r2, #4]
    1882:	2180      	movs	r1, #128	; 0x80
    1884:	0249      	lsls	r1, r1, #9
    1886:	400b      	ands	r3, r1
    1888:	431d      	orrs	r5, r3
    188a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    188c:	4b08      	ldr	r3, [pc, #32]	; (18b0 <system_gclk_gen_set_config+0xb4>)
    188e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1890:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1892:	2200      	movs	r2, #0
    1894:	e7d2      	b.n	183c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1896:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1898:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    189a:	2380      	movs	r3, #128	; 0x80
    189c:	029b      	lsls	r3, r3, #10
    189e:	431d      	orrs	r5, r3
    18a0:	e7d2      	b.n	1848 <system_gclk_gen_set_config+0x4c>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	40000c00 	.word	0x40000c00
    18a8:	000012fd 	.word	0x000012fd
    18ac:	40000c08 	.word	0x40000c08
    18b0:	0000133d 	.word	0x0000133d

000018b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    18b4:	b510      	push	{r4, lr}
    18b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18b8:	4a0b      	ldr	r2, [pc, #44]	; (18e8 <system_gclk_gen_enable+0x34>)
    18ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18bc:	b25b      	sxtb	r3, r3
    18be:	2b00      	cmp	r3, #0
    18c0:	dbfb      	blt.n	18ba <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    18c2:	4b0a      	ldr	r3, [pc, #40]	; (18ec <system_gclk_gen_enable+0x38>)
    18c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18c6:	4b0a      	ldr	r3, [pc, #40]	; (18f0 <system_gclk_gen_enable+0x3c>)
    18c8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18ca:	4a07      	ldr	r2, [pc, #28]	; (18e8 <system_gclk_gen_enable+0x34>)
    18cc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18ce:	b25b      	sxtb	r3, r3
    18d0:	2b00      	cmp	r3, #0
    18d2:	dbfb      	blt.n	18cc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    18d4:	4a04      	ldr	r2, [pc, #16]	; (18e8 <system_gclk_gen_enable+0x34>)
    18d6:	6851      	ldr	r1, [r2, #4]
    18d8:	2380      	movs	r3, #128	; 0x80
    18da:	025b      	lsls	r3, r3, #9
    18dc:	430b      	orrs	r3, r1
    18de:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    18e0:	4b04      	ldr	r3, [pc, #16]	; (18f4 <system_gclk_gen_enable+0x40>)
    18e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18e4:	bd10      	pop	{r4, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	40000c00 	.word	0x40000c00
    18ec:	000012fd 	.word	0x000012fd
    18f0:	40000c04 	.word	0x40000c04
    18f4:	0000133d 	.word	0x0000133d

000018f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
    18fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18fc:	4a1a      	ldr	r2, [pc, #104]	; (1968 <system_gclk_gen_get_hz+0x70>)
    18fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1900:	b25b      	sxtb	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	dbfb      	blt.n	18fe <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1906:	4b19      	ldr	r3, [pc, #100]	; (196c <system_gclk_gen_get_hz+0x74>)
    1908:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    190a:	4b19      	ldr	r3, [pc, #100]	; (1970 <system_gclk_gen_get_hz+0x78>)
    190c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    190e:	4a16      	ldr	r2, [pc, #88]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1910:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1912:	b25b      	sxtb	r3, r3
    1914:	2b00      	cmp	r3, #0
    1916:	dbfb      	blt.n	1910 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1918:	4e13      	ldr	r6, [pc, #76]	; (1968 <system_gclk_gen_get_hz+0x70>)
    191a:	6870      	ldr	r0, [r6, #4]
    191c:	04c0      	lsls	r0, r0, #19
    191e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1920:	4b14      	ldr	r3, [pc, #80]	; (1974 <system_gclk_gen_get_hz+0x7c>)
    1922:	4798      	blx	r3
    1924:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1926:	4b12      	ldr	r3, [pc, #72]	; (1970 <system_gclk_gen_get_hz+0x78>)
    1928:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    192a:	6876      	ldr	r6, [r6, #4]
    192c:	02f6      	lsls	r6, r6, #11
    192e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1930:	4b11      	ldr	r3, [pc, #68]	; (1978 <system_gclk_gen_get_hz+0x80>)
    1932:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1934:	4a0c      	ldr	r2, [pc, #48]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1936:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1938:	b25b      	sxtb	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	dbfb      	blt.n	1936 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    193e:	4b0a      	ldr	r3, [pc, #40]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1940:	689c      	ldr	r4, [r3, #8]
    1942:	0224      	lsls	r4, r4, #8
    1944:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1946:	4b0d      	ldr	r3, [pc, #52]	; (197c <system_gclk_gen_get_hz+0x84>)
    1948:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    194a:	2e00      	cmp	r6, #0
    194c:	d107      	bne.n	195e <system_gclk_gen_get_hz+0x66>
    194e:	2c01      	cmp	r4, #1
    1950:	d907      	bls.n	1962 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1952:	0021      	movs	r1, r4
    1954:	0028      	movs	r0, r5
    1956:	4b0a      	ldr	r3, [pc, #40]	; (1980 <system_gclk_gen_get_hz+0x88>)
    1958:	4798      	blx	r3
    195a:	0005      	movs	r5, r0
    195c:	e001      	b.n	1962 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    195e:	3401      	adds	r4, #1
    1960:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1962:	0028      	movs	r0, r5
    1964:	bd70      	pop	{r4, r5, r6, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	40000c00 	.word	0x40000c00
    196c:	000012fd 	.word	0x000012fd
    1970:	40000c04 	.word	0x40000c04
    1974:	000013c9 	.word	0x000013c9
    1978:	40000c08 	.word	0x40000c08
    197c:	0000133d 	.word	0x0000133d
    1980:	00001db1 	.word	0x00001db1

00001984 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1984:	b510      	push	{r4, lr}
    1986:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1988:	4b06      	ldr	r3, [pc, #24]	; (19a4 <system_gclk_chan_enable+0x20>)
    198a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <system_gclk_chan_enable+0x24>)
    198e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1990:	4a06      	ldr	r2, [pc, #24]	; (19ac <system_gclk_chan_enable+0x28>)
    1992:	8853      	ldrh	r3, [r2, #2]
    1994:	2180      	movs	r1, #128	; 0x80
    1996:	01c9      	lsls	r1, r1, #7
    1998:	430b      	orrs	r3, r1
    199a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <system_gclk_chan_enable+0x2c>)
    199e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19a0:	bd10      	pop	{r4, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	000012fd 	.word	0x000012fd
    19a8:	40000c02 	.word	0x40000c02
    19ac:	40000c00 	.word	0x40000c00
    19b0:	0000133d 	.word	0x0000133d

000019b4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    19b4:	b510      	push	{r4, lr}
    19b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <system_gclk_chan_disable+0x44>)
    19ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19bc:	4b0f      	ldr	r3, [pc, #60]	; (19fc <system_gclk_chan_disable+0x48>)
    19be:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19c0:	4a0f      	ldr	r2, [pc, #60]	; (1a00 <system_gclk_chan_disable+0x4c>)
    19c2:	8853      	ldrh	r3, [r2, #2]
    19c4:	051b      	lsls	r3, r3, #20
    19c6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    19c8:	8853      	ldrh	r3, [r2, #2]
    19ca:	490e      	ldr	r1, [pc, #56]	; (1a04 <system_gclk_chan_disable+0x50>)
    19cc:	400b      	ands	r3, r1
    19ce:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19d0:	8853      	ldrh	r3, [r2, #2]
    19d2:	490d      	ldr	r1, [pc, #52]	; (1a08 <system_gclk_chan_disable+0x54>)
    19d4:	400b      	ands	r3, r1
    19d6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    19d8:	0011      	movs	r1, r2
    19da:	2280      	movs	r2, #128	; 0x80
    19dc:	01d2      	lsls	r2, r2, #7
    19de:	884b      	ldrh	r3, [r1, #2]
    19e0:	4213      	tst	r3, r2
    19e2:	d1fc      	bne.n	19de <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    19e4:	4906      	ldr	r1, [pc, #24]	; (1a00 <system_gclk_chan_disable+0x4c>)
    19e6:	884a      	ldrh	r2, [r1, #2]
    19e8:	0203      	lsls	r3, r0, #8
    19ea:	4806      	ldr	r0, [pc, #24]	; (1a04 <system_gclk_chan_disable+0x50>)
    19ec:	4002      	ands	r2, r0
    19ee:	4313      	orrs	r3, r2
    19f0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    19f2:	4b06      	ldr	r3, [pc, #24]	; (1a0c <system_gclk_chan_disable+0x58>)
    19f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19f6:	bd10      	pop	{r4, pc}
    19f8:	000012fd 	.word	0x000012fd
    19fc:	40000c02 	.word	0x40000c02
    1a00:	40000c00 	.word	0x40000c00
    1a04:	fffff0ff 	.word	0xfffff0ff
    1a08:	ffffbfff 	.word	0xffffbfff
    1a0c:	0000133d 	.word	0x0000133d

00001a10 <system_gclk_chan_set_config>:
{
    1a10:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a12:	780c      	ldrb	r4, [r1, #0]
    1a14:	0224      	lsls	r4, r4, #8
    1a16:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a18:	4b02      	ldr	r3, [pc, #8]	; (1a24 <system_gclk_chan_set_config+0x14>)
    1a1a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a1c:	b2a4      	uxth	r4, r4
    1a1e:	4b02      	ldr	r3, [pc, #8]	; (1a28 <system_gclk_chan_set_config+0x18>)
    1a20:	805c      	strh	r4, [r3, #2]
}
    1a22:	bd10      	pop	{r4, pc}
    1a24:	000019b5 	.word	0x000019b5
    1a28:	40000c00 	.word	0x40000c00

00001a2c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a2c:	b510      	push	{r4, lr}
    1a2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a30:	4b06      	ldr	r3, [pc, #24]	; (1a4c <system_gclk_chan_get_hz+0x20>)
    1a32:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a34:	4b06      	ldr	r3, [pc, #24]	; (1a50 <system_gclk_chan_get_hz+0x24>)
    1a36:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a38:	4b06      	ldr	r3, [pc, #24]	; (1a54 <system_gclk_chan_get_hz+0x28>)
    1a3a:	885c      	ldrh	r4, [r3, #2]
    1a3c:	0524      	lsls	r4, r4, #20
    1a3e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1a40:	4b05      	ldr	r3, [pc, #20]	; (1a58 <system_gclk_chan_get_hz+0x2c>)
    1a42:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a44:	0020      	movs	r0, r4
    1a46:	4b05      	ldr	r3, [pc, #20]	; (1a5c <system_gclk_chan_get_hz+0x30>)
    1a48:	4798      	blx	r3
}
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	000012fd 	.word	0x000012fd
    1a50:	40000c02 	.word	0x40000c02
    1a54:	40000c00 	.word	0x40000c00
    1a58:	0000133d 	.word	0x0000133d
    1a5c:	000018f9 	.word	0x000018f9

00001a60 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a60:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a62:	78d3      	ldrb	r3, [r2, #3]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d135      	bne.n	1ad4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a68:	7813      	ldrb	r3, [r2, #0]
    1a6a:	2b80      	cmp	r3, #128	; 0x80
    1a6c:	d029      	beq.n	1ac2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a6e:	061b      	lsls	r3, r3, #24
    1a70:	2480      	movs	r4, #128	; 0x80
    1a72:	0264      	lsls	r4, r4, #9
    1a74:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a76:	7854      	ldrb	r4, [r2, #1]
    1a78:	2502      	movs	r5, #2
    1a7a:	43ac      	bics	r4, r5
    1a7c:	d106      	bne.n	1a8c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a7e:	7894      	ldrb	r4, [r2, #2]
    1a80:	2c00      	cmp	r4, #0
    1a82:	d120      	bne.n	1ac6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a84:	2480      	movs	r4, #128	; 0x80
    1a86:	02a4      	lsls	r4, r4, #10
    1a88:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a8a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a8c:	7854      	ldrb	r4, [r2, #1]
    1a8e:	3c01      	subs	r4, #1
    1a90:	2c01      	cmp	r4, #1
    1a92:	d91c      	bls.n	1ace <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a94:	040d      	lsls	r5, r1, #16
    1a96:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a98:	24a0      	movs	r4, #160	; 0xa0
    1a9a:	05e4      	lsls	r4, r4, #23
    1a9c:	432c      	orrs	r4, r5
    1a9e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aa0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aa2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aa4:	24d0      	movs	r4, #208	; 0xd0
    1aa6:	0624      	lsls	r4, r4, #24
    1aa8:	432c      	orrs	r4, r5
    1aaa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aac:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1aae:	78d4      	ldrb	r4, [r2, #3]
    1ab0:	2c00      	cmp	r4, #0
    1ab2:	d122      	bne.n	1afa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ab4:	035b      	lsls	r3, r3, #13
    1ab6:	d51c      	bpl.n	1af2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ab8:	7893      	ldrb	r3, [r2, #2]
    1aba:	2b01      	cmp	r3, #1
    1abc:	d01e      	beq.n	1afc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1abe:	6141      	str	r1, [r0, #20]
    1ac0:	e017      	b.n	1af2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1ac2:	2300      	movs	r3, #0
    1ac4:	e7d7      	b.n	1a76 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ac6:	24c0      	movs	r4, #192	; 0xc0
    1ac8:	02e4      	lsls	r4, r4, #11
    1aca:	4323      	orrs	r3, r4
    1acc:	e7dd      	b.n	1a8a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ace:	4c0d      	ldr	r4, [pc, #52]	; (1b04 <_system_pinmux_config+0xa4>)
    1ad0:	4023      	ands	r3, r4
    1ad2:	e7df      	b.n	1a94 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1ad4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ad6:	040c      	lsls	r4, r1, #16
    1ad8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ada:	23a0      	movs	r3, #160	; 0xa0
    1adc:	05db      	lsls	r3, r3, #23
    1ade:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ae0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ae2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ae4:	23d0      	movs	r3, #208	; 0xd0
    1ae6:	061b      	lsls	r3, r3, #24
    1ae8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aea:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1aec:	78d3      	ldrb	r3, [r2, #3]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d103      	bne.n	1afa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1af2:	7853      	ldrb	r3, [r2, #1]
    1af4:	3b01      	subs	r3, #1
    1af6:	2b01      	cmp	r3, #1
    1af8:	d902      	bls.n	1b00 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1afa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1afc:	6181      	str	r1, [r0, #24]
    1afe:	e7f8      	b.n	1af2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1b00:	6081      	str	r1, [r0, #8]
}
    1b02:	e7fa      	b.n	1afa <_system_pinmux_config+0x9a>
    1b04:	fffbffff 	.word	0xfffbffff

00001b08 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b08:	b510      	push	{r4, lr}
    1b0a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b0c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b10:	2900      	cmp	r1, #0
    1b12:	d104      	bne.n	1b1e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b14:	0943      	lsrs	r3, r0, #5
    1b16:	01db      	lsls	r3, r3, #7
    1b18:	4905      	ldr	r1, [pc, #20]	; (1b30 <system_pinmux_pin_set_config+0x28>)
    1b1a:	468c      	mov	ip, r1
    1b1c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b1e:	241f      	movs	r4, #31
    1b20:	4020      	ands	r0, r4
    1b22:	2101      	movs	r1, #1
    1b24:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b26:	0018      	movs	r0, r3
    1b28:	4b02      	ldr	r3, [pc, #8]	; (1b34 <system_pinmux_pin_set_config+0x2c>)
    1b2a:	4798      	blx	r3
}
    1b2c:	bd10      	pop	{r4, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	41004400 	.word	0x41004400
    1b34:	00001a61 	.word	0x00001a61

00001b38 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b38:	4770      	bx	lr
	...

00001b3c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b3c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b3e:	4b05      	ldr	r3, [pc, #20]	; (1b54 <system_init+0x18>)
    1b40:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b42:	4b05      	ldr	r3, [pc, #20]	; (1b58 <system_init+0x1c>)
    1b44:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <system_init+0x20>)
    1b48:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b4a:	4b05      	ldr	r3, [pc, #20]	; (1b60 <system_init+0x24>)
    1b4c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <system_init+0x28>)
    1b50:	4798      	blx	r3
}
    1b52:	bd10      	pop	{r4, pc}
    1b54:	00001679 	.word	0x00001679
    1b58:	0000136d 	.word	0x0000136d
    1b5c:	00001b39 	.word	0x00001b39
    1b60:	00001b39 	.word	0x00001b39
    1b64:	00001b39 	.word	0x00001b39

00001b68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b68:	e7fe      	b.n	1b68 <Dummy_Handler>
	...

00001b6c <Reset_Handler>:
{
    1b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b6e:	4a2a      	ldr	r2, [pc, #168]	; (1c18 <Reset_Handler+0xac>)
    1b70:	4b2a      	ldr	r3, [pc, #168]	; (1c1c <Reset_Handler+0xb0>)
    1b72:	429a      	cmp	r2, r3
    1b74:	d011      	beq.n	1b9a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b76:	001a      	movs	r2, r3
    1b78:	4b29      	ldr	r3, [pc, #164]	; (1c20 <Reset_Handler+0xb4>)
    1b7a:	429a      	cmp	r2, r3
    1b7c:	d20d      	bcs.n	1b9a <Reset_Handler+0x2e>
    1b7e:	4a29      	ldr	r2, [pc, #164]	; (1c24 <Reset_Handler+0xb8>)
    1b80:	3303      	adds	r3, #3
    1b82:	1a9b      	subs	r3, r3, r2
    1b84:	089b      	lsrs	r3, r3, #2
    1b86:	3301      	adds	r3, #1
    1b88:	009b      	lsls	r3, r3, #2
    1b8a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b8c:	4823      	ldr	r0, [pc, #140]	; (1c1c <Reset_Handler+0xb0>)
    1b8e:	4922      	ldr	r1, [pc, #136]	; (1c18 <Reset_Handler+0xac>)
    1b90:	588c      	ldr	r4, [r1, r2]
    1b92:	5084      	str	r4, [r0, r2]
    1b94:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b96:	429a      	cmp	r2, r3
    1b98:	d1fa      	bne.n	1b90 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1b9a:	4a23      	ldr	r2, [pc, #140]	; (1c28 <Reset_Handler+0xbc>)
    1b9c:	4b23      	ldr	r3, [pc, #140]	; (1c2c <Reset_Handler+0xc0>)
    1b9e:	429a      	cmp	r2, r3
    1ba0:	d20a      	bcs.n	1bb8 <Reset_Handler+0x4c>
    1ba2:	43d3      	mvns	r3, r2
    1ba4:	4921      	ldr	r1, [pc, #132]	; (1c2c <Reset_Handler+0xc0>)
    1ba6:	185b      	adds	r3, r3, r1
    1ba8:	2103      	movs	r1, #3
    1baa:	438b      	bics	r3, r1
    1bac:	3304      	adds	r3, #4
    1bae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1bb0:	2100      	movs	r1, #0
    1bb2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1bb4:	4293      	cmp	r3, r2
    1bb6:	d1fc      	bne.n	1bb2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bb8:	4a1d      	ldr	r2, [pc, #116]	; (1c30 <Reset_Handler+0xc4>)
    1bba:	21ff      	movs	r1, #255	; 0xff
    1bbc:	4b1d      	ldr	r3, [pc, #116]	; (1c34 <Reset_Handler+0xc8>)
    1bbe:	438b      	bics	r3, r1
    1bc0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1bc2:	39fd      	subs	r1, #253	; 0xfd
    1bc4:	2390      	movs	r3, #144	; 0x90
    1bc6:	005b      	lsls	r3, r3, #1
    1bc8:	4a1b      	ldr	r2, [pc, #108]	; (1c38 <Reset_Handler+0xcc>)
    1bca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1bcc:	4a1b      	ldr	r2, [pc, #108]	; (1c3c <Reset_Handler+0xd0>)
    1bce:	78d3      	ldrb	r3, [r2, #3]
    1bd0:	2503      	movs	r5, #3
    1bd2:	43ab      	bics	r3, r5
    1bd4:	2402      	movs	r4, #2
    1bd6:	4323      	orrs	r3, r4
    1bd8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1bda:	78d3      	ldrb	r3, [r2, #3]
    1bdc:	270c      	movs	r7, #12
    1bde:	43bb      	bics	r3, r7
    1be0:	2608      	movs	r6, #8
    1be2:	4333      	orrs	r3, r6
    1be4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1be6:	4b16      	ldr	r3, [pc, #88]	; (1c40 <Reset_Handler+0xd4>)
    1be8:	7b98      	ldrb	r0, [r3, #14]
    1bea:	2230      	movs	r2, #48	; 0x30
    1bec:	4390      	bics	r0, r2
    1bee:	2220      	movs	r2, #32
    1bf0:	4310      	orrs	r0, r2
    1bf2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bf4:	7b99      	ldrb	r1, [r3, #14]
    1bf6:	43b9      	bics	r1, r7
    1bf8:	4331      	orrs	r1, r6
    1bfa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1bfc:	7b9a      	ldrb	r2, [r3, #14]
    1bfe:	43aa      	bics	r2, r5
    1c00:	4322      	orrs	r2, r4
    1c02:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c04:	4a0f      	ldr	r2, [pc, #60]	; (1c44 <Reset_Handler+0xd8>)
    1c06:	6853      	ldr	r3, [r2, #4]
    1c08:	2180      	movs	r1, #128	; 0x80
    1c0a:	430b      	orrs	r3, r1
    1c0c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c0e:	4b0e      	ldr	r3, [pc, #56]	; (1c48 <Reset_Handler+0xdc>)
    1c10:	4798      	blx	r3
        main();
    1c12:	4b0e      	ldr	r3, [pc, #56]	; (1c4c <Reset_Handler+0xe0>)
    1c14:	4798      	blx	r3
    1c16:	e7fe      	b.n	1c16 <Reset_Handler+0xaa>
    1c18:	00002ae0 	.word	0x00002ae0
    1c1c:	20000000 	.word	0x20000000
    1c20:	20000074 	.word	0x20000074
    1c24:	20000004 	.word	0x20000004
    1c28:	20000074 	.word	0x20000074
    1c2c:	2000027c 	.word	0x2000027c
    1c30:	e000ed00 	.word	0xe000ed00
    1c34:	00000000 	.word	0x00000000
    1c38:	41007000 	.word	0x41007000
    1c3c:	41005000 	.word	0x41005000
    1c40:	41004800 	.word	0x41004800
    1c44:	41004000 	.word	0x41004000
    1c48:	00002131 	.word	0x00002131
    1c4c:	00001c75 	.word	0x00001c75

00001c50 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1c50:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1c52:	4a06      	ldr	r2, [pc, #24]	; (1c6c <_sbrk+0x1c>)
    1c54:	6812      	ldr	r2, [r2, #0]
    1c56:	2a00      	cmp	r2, #0
    1c58:	d004      	beq.n	1c64 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1c5a:	4a04      	ldr	r2, [pc, #16]	; (1c6c <_sbrk+0x1c>)
    1c5c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1c5e:	18c3      	adds	r3, r0, r3
    1c60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1c62:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1c64:	4902      	ldr	r1, [pc, #8]	; (1c70 <_sbrk+0x20>)
    1c66:	4a01      	ldr	r2, [pc, #4]	; (1c6c <_sbrk+0x1c>)
    1c68:	6011      	str	r1, [r2, #0]
    1c6a:	e7f6      	b.n	1c5a <_sbrk+0xa>
    1c6c:	200000cc 	.word	0x200000cc
    1c70:	20002280 	.word	0x20002280

00001c74 <main>:

uint8_t tempbuf[10];


int main (void)
{
    1c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c76:	b085      	sub	sp, #20
	test.buffer = tempbuf;
	test.hw = SERCOM1;
	test.spi_inst = &spi_sercom1_mod;
	test.ss_pin = 10;
	
	system_init();
    1c78:	4b39      	ldr	r3, [pc, #228]	; (1d60 <main+0xec>)
    1c7a:	4798      	blx	r3
	pusart_init();
    1c7c:	4b39      	ldr	r3, [pc, #228]	; (1d64 <main+0xf0>)
    1c7e:	4798      	blx	r3
	pspi_init();
    1c80:	4b39      	ldr	r3, [pc, #228]	; (1d68 <main+0xf4>)
    1c82:	4798      	blx	r3
	cpu_irq_enable();
    1c84:	2201      	movs	r2, #1
    1c86:	4b39      	ldr	r3, [pc, #228]	; (1d6c <main+0xf8>)
    1c88:	701a      	strb	r2, [r3, #0]
    1c8a:	f3bf 8f5f 	dmb	sy
    1c8e:	b662      	cpsie	i
	system_interrupt_enable_global();
	volatile uint32_t readval = 0x0;
    1c90:	2300      	movs	r3, #0
    1c92:	9303      	str	r3, [sp, #12]
	PORT->Group[0].DIR.bit.DIR |= (1 << 10);
    1c94:	4b36      	ldr	r3, [pc, #216]	; (1d70 <main+0xfc>)
    1c96:	6819      	ldr	r1, [r3, #0]
    1c98:	2280      	movs	r2, #128	; 0x80
    1c9a:	00d2      	lsls	r2, r2, #3
    1c9c:	4311      	orrs	r1, r2
    1c9e:	6019      	str	r1, [r3, #0]
	PORT->Group[0].OUT.bit.OUT |= (1 << 10);
    1ca0:	6919      	ldr	r1, [r3, #16]
    1ca2:	430a      	orrs	r2, r1
    1ca4:	611a      	str	r2, [r3, #16]
	for(int x = 0; x < 10; x++)
    1ca6:	2300      	movs	r3, #0
	{
		tempbuf[x] = 0x0;
    1ca8:	4932      	ldr	r1, [pc, #200]	; (1d74 <main+0x100>)
    1caa:	2200      	movs	r2, #0
    1cac:	1858      	adds	r0, r3, r1
    1cae:	7002      	strb	r2, [r0, #0]
	for(int x = 0; x < 10; x++)
    1cb0:	3301      	adds	r3, #1
    1cb2:	2b0a      	cmp	r3, #10
    1cb4:	d1fa      	bne.n	1cac <main+0x38>
	}
	tempbuf[0] = 255;
    1cb6:	4b2f      	ldr	r3, [pc, #188]	; (1d74 <main+0x100>)
    1cb8:	22ff      	movs	r2, #255	; 0xff
    1cba:	701a      	strb	r2, [r3, #0]
	tempbuf[1] = 0xa1;
    1cbc:	3a5e      	subs	r2, #94	; 0x5e
    1cbe:	705a      	strb	r2, [r3, #1]
	tempbuf[2] = 0x1b;
    1cc0:	3a86      	subs	r2, #134	; 0x86
    1cc2:	709a      	strb	r2, [r3, #2]
	tempbuf[3] = 0xb1;
    1cc4:	3296      	adds	r2, #150	; 0x96
    1cc6:	70da      	strb	r2, [r3, #3]
		
		
		uint8_t tempbuf2[4];
		PORT->Group[0].OUT.bit.OUT &= ~(1 << 10);
		
		spi_read_buffer_wait(&spi_sercom1_mod, &tempbuf2[3], 1, 0x00);
    1cc8:	4e2b      	ldr	r6, [pc, #172]	; (1d78 <main+0x104>)
		PORT->Group[0].OUT.bit.OUT &= ~(1 << 10);
    1cca:	4d29      	ldr	r5, [pc, #164]	; (1d70 <main+0xfc>)
    1ccc:	692b      	ldr	r3, [r5, #16]
    1cce:	4a2b      	ldr	r2, [pc, #172]	; (1d7c <main+0x108>)
    1cd0:	4013      	ands	r3, r2
    1cd2:	612b      	str	r3, [r5, #16]
		spi_read_buffer_wait(&spi_sercom1_mod, &tempbuf2[3], 1, 0x00);
    1cd4:	ac02      	add	r4, sp, #8
    1cd6:	2300      	movs	r3, #0
    1cd8:	2201      	movs	r2, #1
    1cda:	210b      	movs	r1, #11
    1cdc:	4469      	add	r1, sp
    1cde:	4828      	ldr	r0, [pc, #160]	; (1d80 <main+0x10c>)
    1ce0:	47b0      	blx	r6
		spi_read_buffer_wait(&spi_sercom1_mod, &tempbuf2[2], 1, 0x00);
    1ce2:	2300      	movs	r3, #0
    1ce4:	2201      	movs	r2, #1
    1ce6:	210a      	movs	r1, #10
    1ce8:	4469      	add	r1, sp
    1cea:	4825      	ldr	r0, [pc, #148]	; (1d80 <main+0x10c>)
    1cec:	47b0      	blx	r6
		spi_read_buffer_wait(&spi_sercom1_mod, &tempbuf2[1], 1, 0x00);
    1cee:	2300      	movs	r3, #0
    1cf0:	2201      	movs	r2, #1
    1cf2:	2109      	movs	r1, #9
    1cf4:	4469      	add	r1, sp
    1cf6:	4822      	ldr	r0, [pc, #136]	; (1d80 <main+0x10c>)
    1cf8:	47b0      	blx	r6
		spi_read_buffer_wait(&spi_sercom1_mod, &tempbuf2[0], 1, 0x00);
    1cfa:	2300      	movs	r3, #0
    1cfc:	2201      	movs	r2, #1
    1cfe:	0021      	movs	r1, r4
    1d00:	481f      	ldr	r0, [pc, #124]	; (1d80 <main+0x10c>)
    1d02:	47b0      	blx	r6
		DEBUG("PRINTING\n");
    1d04:	491f      	ldr	r1, [pc, #124]	; (1d84 <main+0x110>)
    1d06:	4820      	ldr	r0, [pc, #128]	; (1d88 <main+0x114>)
    1d08:	4f20      	ldr	r7, [pc, #128]	; (1d8c <main+0x118>)
    1d0a:	47b8      	blx	r7
		DEBUG("%u\t%u\t%u\t%u\n", tempbuf2[0], tempbuf2[1], tempbuf2[2], tempbuf2[3]);
    1d0c:	7863      	ldrb	r3, [r4, #1]
    1d0e:	7822      	ldrb	r2, [r4, #0]
    1d10:	78e1      	ldrb	r1, [r4, #3]
    1d12:	9101      	str	r1, [sp, #4]
    1d14:	78a1      	ldrb	r1, [r4, #2]
    1d16:	9100      	str	r1, [sp, #0]
    1d18:	491d      	ldr	r1, [pc, #116]	; (1d90 <main+0x11c>)
    1d1a:	481b      	ldr	r0, [pc, #108]	; (1d88 <main+0x114>)
    1d1c:	47b8      	blx	r7
		DEBUG("%#x\t%#x\t%#x\t%#x\n", tempbuf2[0], tempbuf2[1], tempbuf2[2], tempbuf2[3]);
    1d1e:	7863      	ldrb	r3, [r4, #1]
    1d20:	7822      	ldrb	r2, [r4, #0]
    1d22:	78e1      	ldrb	r1, [r4, #3]
    1d24:	9101      	str	r1, [sp, #4]
    1d26:	78a1      	ldrb	r1, [r4, #2]
    1d28:	9100      	str	r1, [sp, #0]
    1d2a:	491a      	ldr	r1, [pc, #104]	; (1d94 <main+0x120>)
    1d2c:	4816      	ldr	r0, [pc, #88]	; (1d88 <main+0x114>)
    1d2e:	47b8      	blx	r7
		PORT->Group[0].OUT.bit.OUT |= (1 << 10);
    1d30:	692a      	ldr	r2, [r5, #16]
    1d32:	2380      	movs	r3, #128	; 0x80
    1d34:	00db      	lsls	r3, r3, #3
    1d36:	4313      	orrs	r3, r2
    1d38:	612b      	str	r3, [r5, #16]
		delay_ms(100);
    1d3a:	2000      	movs	r0, #0
    1d3c:	4b16      	ldr	r3, [pc, #88]	; (1d98 <main+0x124>)
    1d3e:	4798      	blx	r3
    1d40:	2264      	movs	r2, #100	; 0x64
    1d42:	2300      	movs	r3, #0
    1d44:	2100      	movs	r1, #0
    1d46:	4c15      	ldr	r4, [pc, #84]	; (1d9c <main+0x128>)
    1d48:	47a0      	blx	r4
    1d4a:	4a15      	ldr	r2, [pc, #84]	; (1da0 <main+0x12c>)
    1d4c:	2300      	movs	r3, #0
    1d4e:	1880      	adds	r0, r0, r2
    1d50:	4159      	adcs	r1, r3
    1d52:	4a14      	ldr	r2, [pc, #80]	; (1da4 <main+0x130>)
    1d54:	2300      	movs	r3, #0
    1d56:	4c14      	ldr	r4, [pc, #80]	; (1da8 <main+0x134>)
    1d58:	47a0      	blx	r4
    1d5a:	4b14      	ldr	r3, [pc, #80]	; (1dac <main+0x138>)
    1d5c:	4798      	blx	r3
    1d5e:	e7b4      	b.n	1cca <main+0x56>
    1d60:	00001b3d 	.word	0x00001b3d
    1d64:	000011ed 	.word	0x000011ed
    1d68:	000010cd 	.word	0x000010cd
    1d6c:	2000000c 	.word	0x2000000c
    1d70:	41004400 	.word	0x41004400
    1d74:	2000026c 	.word	0x2000026c
    1d78:	000007b1 	.word	0x000007b1
    1d7c:	fffffbff 	.word	0xfffffbff
    1d80:	200000f8 	.word	0x200000f8
    1d84:	00002a54 	.word	0x00002a54
    1d88:	20000134 	.word	0x20000134
    1d8c:	000011a9 	.word	0x000011a9
    1d90:	00002a60 	.word	0x00002a60
    1d94:	00002a70 	.word	0x00002a70
    1d98:	000018f9 	.word	0x000018f9
    1d9c:	00001f09 	.word	0x00001f09
    1da0:	00001b57 	.word	0x00001b57
    1da4:	00001b58 	.word	0x00001b58
    1da8:	00001ec9 	.word	0x00001ec9
    1dac:	20000001 	.word	0x20000001

00001db0 <__udivsi3>:
    1db0:	2200      	movs	r2, #0
    1db2:	0843      	lsrs	r3, r0, #1
    1db4:	428b      	cmp	r3, r1
    1db6:	d374      	bcc.n	1ea2 <__udivsi3+0xf2>
    1db8:	0903      	lsrs	r3, r0, #4
    1dba:	428b      	cmp	r3, r1
    1dbc:	d35f      	bcc.n	1e7e <__udivsi3+0xce>
    1dbe:	0a03      	lsrs	r3, r0, #8
    1dc0:	428b      	cmp	r3, r1
    1dc2:	d344      	bcc.n	1e4e <__udivsi3+0x9e>
    1dc4:	0b03      	lsrs	r3, r0, #12
    1dc6:	428b      	cmp	r3, r1
    1dc8:	d328      	bcc.n	1e1c <__udivsi3+0x6c>
    1dca:	0c03      	lsrs	r3, r0, #16
    1dcc:	428b      	cmp	r3, r1
    1dce:	d30d      	bcc.n	1dec <__udivsi3+0x3c>
    1dd0:	22ff      	movs	r2, #255	; 0xff
    1dd2:	0209      	lsls	r1, r1, #8
    1dd4:	ba12      	rev	r2, r2
    1dd6:	0c03      	lsrs	r3, r0, #16
    1dd8:	428b      	cmp	r3, r1
    1dda:	d302      	bcc.n	1de2 <__udivsi3+0x32>
    1ddc:	1212      	asrs	r2, r2, #8
    1dde:	0209      	lsls	r1, r1, #8
    1de0:	d065      	beq.n	1eae <__udivsi3+0xfe>
    1de2:	0b03      	lsrs	r3, r0, #12
    1de4:	428b      	cmp	r3, r1
    1de6:	d319      	bcc.n	1e1c <__udivsi3+0x6c>
    1de8:	e000      	b.n	1dec <__udivsi3+0x3c>
    1dea:	0a09      	lsrs	r1, r1, #8
    1dec:	0bc3      	lsrs	r3, r0, #15
    1dee:	428b      	cmp	r3, r1
    1df0:	d301      	bcc.n	1df6 <__udivsi3+0x46>
    1df2:	03cb      	lsls	r3, r1, #15
    1df4:	1ac0      	subs	r0, r0, r3
    1df6:	4152      	adcs	r2, r2
    1df8:	0b83      	lsrs	r3, r0, #14
    1dfa:	428b      	cmp	r3, r1
    1dfc:	d301      	bcc.n	1e02 <__udivsi3+0x52>
    1dfe:	038b      	lsls	r3, r1, #14
    1e00:	1ac0      	subs	r0, r0, r3
    1e02:	4152      	adcs	r2, r2
    1e04:	0b43      	lsrs	r3, r0, #13
    1e06:	428b      	cmp	r3, r1
    1e08:	d301      	bcc.n	1e0e <__udivsi3+0x5e>
    1e0a:	034b      	lsls	r3, r1, #13
    1e0c:	1ac0      	subs	r0, r0, r3
    1e0e:	4152      	adcs	r2, r2
    1e10:	0b03      	lsrs	r3, r0, #12
    1e12:	428b      	cmp	r3, r1
    1e14:	d301      	bcc.n	1e1a <__udivsi3+0x6a>
    1e16:	030b      	lsls	r3, r1, #12
    1e18:	1ac0      	subs	r0, r0, r3
    1e1a:	4152      	adcs	r2, r2
    1e1c:	0ac3      	lsrs	r3, r0, #11
    1e1e:	428b      	cmp	r3, r1
    1e20:	d301      	bcc.n	1e26 <__udivsi3+0x76>
    1e22:	02cb      	lsls	r3, r1, #11
    1e24:	1ac0      	subs	r0, r0, r3
    1e26:	4152      	adcs	r2, r2
    1e28:	0a83      	lsrs	r3, r0, #10
    1e2a:	428b      	cmp	r3, r1
    1e2c:	d301      	bcc.n	1e32 <__udivsi3+0x82>
    1e2e:	028b      	lsls	r3, r1, #10
    1e30:	1ac0      	subs	r0, r0, r3
    1e32:	4152      	adcs	r2, r2
    1e34:	0a43      	lsrs	r3, r0, #9
    1e36:	428b      	cmp	r3, r1
    1e38:	d301      	bcc.n	1e3e <__udivsi3+0x8e>
    1e3a:	024b      	lsls	r3, r1, #9
    1e3c:	1ac0      	subs	r0, r0, r3
    1e3e:	4152      	adcs	r2, r2
    1e40:	0a03      	lsrs	r3, r0, #8
    1e42:	428b      	cmp	r3, r1
    1e44:	d301      	bcc.n	1e4a <__udivsi3+0x9a>
    1e46:	020b      	lsls	r3, r1, #8
    1e48:	1ac0      	subs	r0, r0, r3
    1e4a:	4152      	adcs	r2, r2
    1e4c:	d2cd      	bcs.n	1dea <__udivsi3+0x3a>
    1e4e:	09c3      	lsrs	r3, r0, #7
    1e50:	428b      	cmp	r3, r1
    1e52:	d301      	bcc.n	1e58 <__udivsi3+0xa8>
    1e54:	01cb      	lsls	r3, r1, #7
    1e56:	1ac0      	subs	r0, r0, r3
    1e58:	4152      	adcs	r2, r2
    1e5a:	0983      	lsrs	r3, r0, #6
    1e5c:	428b      	cmp	r3, r1
    1e5e:	d301      	bcc.n	1e64 <__udivsi3+0xb4>
    1e60:	018b      	lsls	r3, r1, #6
    1e62:	1ac0      	subs	r0, r0, r3
    1e64:	4152      	adcs	r2, r2
    1e66:	0943      	lsrs	r3, r0, #5
    1e68:	428b      	cmp	r3, r1
    1e6a:	d301      	bcc.n	1e70 <__udivsi3+0xc0>
    1e6c:	014b      	lsls	r3, r1, #5
    1e6e:	1ac0      	subs	r0, r0, r3
    1e70:	4152      	adcs	r2, r2
    1e72:	0903      	lsrs	r3, r0, #4
    1e74:	428b      	cmp	r3, r1
    1e76:	d301      	bcc.n	1e7c <__udivsi3+0xcc>
    1e78:	010b      	lsls	r3, r1, #4
    1e7a:	1ac0      	subs	r0, r0, r3
    1e7c:	4152      	adcs	r2, r2
    1e7e:	08c3      	lsrs	r3, r0, #3
    1e80:	428b      	cmp	r3, r1
    1e82:	d301      	bcc.n	1e88 <__udivsi3+0xd8>
    1e84:	00cb      	lsls	r3, r1, #3
    1e86:	1ac0      	subs	r0, r0, r3
    1e88:	4152      	adcs	r2, r2
    1e8a:	0883      	lsrs	r3, r0, #2
    1e8c:	428b      	cmp	r3, r1
    1e8e:	d301      	bcc.n	1e94 <__udivsi3+0xe4>
    1e90:	008b      	lsls	r3, r1, #2
    1e92:	1ac0      	subs	r0, r0, r3
    1e94:	4152      	adcs	r2, r2
    1e96:	0843      	lsrs	r3, r0, #1
    1e98:	428b      	cmp	r3, r1
    1e9a:	d301      	bcc.n	1ea0 <__udivsi3+0xf0>
    1e9c:	004b      	lsls	r3, r1, #1
    1e9e:	1ac0      	subs	r0, r0, r3
    1ea0:	4152      	adcs	r2, r2
    1ea2:	1a41      	subs	r1, r0, r1
    1ea4:	d200      	bcs.n	1ea8 <__udivsi3+0xf8>
    1ea6:	4601      	mov	r1, r0
    1ea8:	4152      	adcs	r2, r2
    1eaa:	4610      	mov	r0, r2
    1eac:	4770      	bx	lr
    1eae:	e7ff      	b.n	1eb0 <__udivsi3+0x100>
    1eb0:	b501      	push	{r0, lr}
    1eb2:	2000      	movs	r0, #0
    1eb4:	f000 f806 	bl	1ec4 <__aeabi_idiv0>
    1eb8:	bd02      	pop	{r1, pc}
    1eba:	46c0      	nop			; (mov r8, r8)

00001ebc <__aeabi_uidivmod>:
    1ebc:	2900      	cmp	r1, #0
    1ebe:	d0f7      	beq.n	1eb0 <__udivsi3+0x100>
    1ec0:	e776      	b.n	1db0 <__udivsi3>
    1ec2:	4770      	bx	lr

00001ec4 <__aeabi_idiv0>:
    1ec4:	4770      	bx	lr
    1ec6:	46c0      	nop			; (mov r8, r8)

00001ec8 <__aeabi_uldivmod>:
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d111      	bne.n	1ef0 <__aeabi_uldivmod+0x28>
    1ecc:	2a00      	cmp	r2, #0
    1ece:	d10f      	bne.n	1ef0 <__aeabi_uldivmod+0x28>
    1ed0:	2900      	cmp	r1, #0
    1ed2:	d100      	bne.n	1ed6 <__aeabi_uldivmod+0xe>
    1ed4:	2800      	cmp	r0, #0
    1ed6:	d002      	beq.n	1ede <__aeabi_uldivmod+0x16>
    1ed8:	2100      	movs	r1, #0
    1eda:	43c9      	mvns	r1, r1
    1edc:	1c08      	adds	r0, r1, #0
    1ede:	b407      	push	{r0, r1, r2}
    1ee0:	4802      	ldr	r0, [pc, #8]	; (1eec <__aeabi_uldivmod+0x24>)
    1ee2:	a102      	add	r1, pc, #8	; (adr r1, 1eec <__aeabi_uldivmod+0x24>)
    1ee4:	1840      	adds	r0, r0, r1
    1ee6:	9002      	str	r0, [sp, #8]
    1ee8:	bd03      	pop	{r0, r1, pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	ffffffd9 	.word	0xffffffd9
    1ef0:	b403      	push	{r0, r1}
    1ef2:	4668      	mov	r0, sp
    1ef4:	b501      	push	{r0, lr}
    1ef6:	9802      	ldr	r0, [sp, #8]
    1ef8:	f000 f830 	bl	1f5c <__udivmoddi4>
    1efc:	9b01      	ldr	r3, [sp, #4]
    1efe:	469e      	mov	lr, r3
    1f00:	b002      	add	sp, #8
    1f02:	bc0c      	pop	{r2, r3}
    1f04:	4770      	bx	lr
    1f06:	46c0      	nop			; (mov r8, r8)

00001f08 <__aeabi_lmul>:
    1f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f0a:	46ce      	mov	lr, r9
    1f0c:	4647      	mov	r7, r8
    1f0e:	0415      	lsls	r5, r2, #16
    1f10:	0c2d      	lsrs	r5, r5, #16
    1f12:	002e      	movs	r6, r5
    1f14:	b580      	push	{r7, lr}
    1f16:	0407      	lsls	r7, r0, #16
    1f18:	0c14      	lsrs	r4, r2, #16
    1f1a:	0c3f      	lsrs	r7, r7, #16
    1f1c:	4699      	mov	r9, r3
    1f1e:	0c03      	lsrs	r3, r0, #16
    1f20:	437e      	muls	r6, r7
    1f22:	435d      	muls	r5, r3
    1f24:	4367      	muls	r7, r4
    1f26:	4363      	muls	r3, r4
    1f28:	197f      	adds	r7, r7, r5
    1f2a:	0c34      	lsrs	r4, r6, #16
    1f2c:	19e4      	adds	r4, r4, r7
    1f2e:	469c      	mov	ip, r3
    1f30:	42a5      	cmp	r5, r4
    1f32:	d903      	bls.n	1f3c <__aeabi_lmul+0x34>
    1f34:	2380      	movs	r3, #128	; 0x80
    1f36:	025b      	lsls	r3, r3, #9
    1f38:	4698      	mov	r8, r3
    1f3a:	44c4      	add	ip, r8
    1f3c:	464b      	mov	r3, r9
    1f3e:	4351      	muls	r1, r2
    1f40:	4343      	muls	r3, r0
    1f42:	0436      	lsls	r6, r6, #16
    1f44:	0c36      	lsrs	r6, r6, #16
    1f46:	0c25      	lsrs	r5, r4, #16
    1f48:	0424      	lsls	r4, r4, #16
    1f4a:	4465      	add	r5, ip
    1f4c:	19a4      	adds	r4, r4, r6
    1f4e:	1859      	adds	r1, r3, r1
    1f50:	1949      	adds	r1, r1, r5
    1f52:	0020      	movs	r0, r4
    1f54:	bc0c      	pop	{r2, r3}
    1f56:	4690      	mov	r8, r2
    1f58:	4699      	mov	r9, r3
    1f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f5c <__udivmoddi4>:
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5e:	4657      	mov	r7, sl
    1f60:	464e      	mov	r6, r9
    1f62:	4645      	mov	r5, r8
    1f64:	46de      	mov	lr, fp
    1f66:	b5e0      	push	{r5, r6, r7, lr}
    1f68:	0004      	movs	r4, r0
    1f6a:	b083      	sub	sp, #12
    1f6c:	000d      	movs	r5, r1
    1f6e:	4692      	mov	sl, r2
    1f70:	4699      	mov	r9, r3
    1f72:	428b      	cmp	r3, r1
    1f74:	d82f      	bhi.n	1fd6 <__udivmoddi4+0x7a>
    1f76:	d02c      	beq.n	1fd2 <__udivmoddi4+0x76>
    1f78:	4649      	mov	r1, r9
    1f7a:	4650      	mov	r0, sl
    1f7c:	f000 f8ae 	bl	20dc <__clzdi2>
    1f80:	0029      	movs	r1, r5
    1f82:	0006      	movs	r6, r0
    1f84:	0020      	movs	r0, r4
    1f86:	f000 f8a9 	bl	20dc <__clzdi2>
    1f8a:	1a33      	subs	r3, r6, r0
    1f8c:	4698      	mov	r8, r3
    1f8e:	3b20      	subs	r3, #32
    1f90:	469b      	mov	fp, r3
    1f92:	d500      	bpl.n	1f96 <__udivmoddi4+0x3a>
    1f94:	e074      	b.n	2080 <STACK_SIZE+0x80>
    1f96:	4653      	mov	r3, sl
    1f98:	465a      	mov	r2, fp
    1f9a:	4093      	lsls	r3, r2
    1f9c:	001f      	movs	r7, r3
    1f9e:	4653      	mov	r3, sl
    1fa0:	4642      	mov	r2, r8
    1fa2:	4093      	lsls	r3, r2
    1fa4:	001e      	movs	r6, r3
    1fa6:	42af      	cmp	r7, r5
    1fa8:	d829      	bhi.n	1ffe <__udivmoddi4+0xa2>
    1faa:	d026      	beq.n	1ffa <__udivmoddi4+0x9e>
    1fac:	465b      	mov	r3, fp
    1fae:	1ba4      	subs	r4, r4, r6
    1fb0:	41bd      	sbcs	r5, r7
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	da00      	bge.n	1fb8 <__udivmoddi4+0x5c>
    1fb6:	e079      	b.n	20ac <STACK_SIZE+0xac>
    1fb8:	2200      	movs	r2, #0
    1fba:	2300      	movs	r3, #0
    1fbc:	9200      	str	r2, [sp, #0]
    1fbe:	9301      	str	r3, [sp, #4]
    1fc0:	2301      	movs	r3, #1
    1fc2:	465a      	mov	r2, fp
    1fc4:	4093      	lsls	r3, r2
    1fc6:	9301      	str	r3, [sp, #4]
    1fc8:	2301      	movs	r3, #1
    1fca:	4642      	mov	r2, r8
    1fcc:	4093      	lsls	r3, r2
    1fce:	9300      	str	r3, [sp, #0]
    1fd0:	e019      	b.n	2006 <STACK_SIZE+0x6>
    1fd2:	4282      	cmp	r2, r0
    1fd4:	d9d0      	bls.n	1f78 <__udivmoddi4+0x1c>
    1fd6:	2200      	movs	r2, #0
    1fd8:	2300      	movs	r3, #0
    1fda:	9200      	str	r2, [sp, #0]
    1fdc:	9301      	str	r3, [sp, #4]
    1fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d001      	beq.n	1fe8 <__udivmoddi4+0x8c>
    1fe4:	601c      	str	r4, [r3, #0]
    1fe6:	605d      	str	r5, [r3, #4]
    1fe8:	9800      	ldr	r0, [sp, #0]
    1fea:	9901      	ldr	r1, [sp, #4]
    1fec:	b003      	add	sp, #12
    1fee:	bc3c      	pop	{r2, r3, r4, r5}
    1ff0:	4690      	mov	r8, r2
    1ff2:	4699      	mov	r9, r3
    1ff4:	46a2      	mov	sl, r4
    1ff6:	46ab      	mov	fp, r5
    1ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ffa:	42a3      	cmp	r3, r4
    1ffc:	d9d6      	bls.n	1fac <__udivmoddi4+0x50>
    1ffe:	2200      	movs	r2, #0
    2000:	2300      	movs	r3, #0
    2002:	9200      	str	r2, [sp, #0]
    2004:	9301      	str	r3, [sp, #4]
    2006:	4643      	mov	r3, r8
    2008:	2b00      	cmp	r3, #0
    200a:	d0e8      	beq.n	1fde <__udivmoddi4+0x82>
    200c:	07fb      	lsls	r3, r7, #31
    200e:	0872      	lsrs	r2, r6, #1
    2010:	431a      	orrs	r2, r3
    2012:	4646      	mov	r6, r8
    2014:	087b      	lsrs	r3, r7, #1
    2016:	e00e      	b.n	2036 <STACK_SIZE+0x36>
    2018:	42ab      	cmp	r3, r5
    201a:	d101      	bne.n	2020 <STACK_SIZE+0x20>
    201c:	42a2      	cmp	r2, r4
    201e:	d80c      	bhi.n	203a <STACK_SIZE+0x3a>
    2020:	1aa4      	subs	r4, r4, r2
    2022:	419d      	sbcs	r5, r3
    2024:	2001      	movs	r0, #1
    2026:	1924      	adds	r4, r4, r4
    2028:	416d      	adcs	r5, r5
    202a:	2100      	movs	r1, #0
    202c:	3e01      	subs	r6, #1
    202e:	1824      	adds	r4, r4, r0
    2030:	414d      	adcs	r5, r1
    2032:	2e00      	cmp	r6, #0
    2034:	d006      	beq.n	2044 <STACK_SIZE+0x44>
    2036:	42ab      	cmp	r3, r5
    2038:	d9ee      	bls.n	2018 <STACK_SIZE+0x18>
    203a:	3e01      	subs	r6, #1
    203c:	1924      	adds	r4, r4, r4
    203e:	416d      	adcs	r5, r5
    2040:	2e00      	cmp	r6, #0
    2042:	d1f8      	bne.n	2036 <STACK_SIZE+0x36>
    2044:	465b      	mov	r3, fp
    2046:	9800      	ldr	r0, [sp, #0]
    2048:	9901      	ldr	r1, [sp, #4]
    204a:	1900      	adds	r0, r0, r4
    204c:	4169      	adcs	r1, r5
    204e:	2b00      	cmp	r3, #0
    2050:	db22      	blt.n	2098 <STACK_SIZE+0x98>
    2052:	002b      	movs	r3, r5
    2054:	465a      	mov	r2, fp
    2056:	40d3      	lsrs	r3, r2
    2058:	002a      	movs	r2, r5
    205a:	4644      	mov	r4, r8
    205c:	40e2      	lsrs	r2, r4
    205e:	001c      	movs	r4, r3
    2060:	465b      	mov	r3, fp
    2062:	0015      	movs	r5, r2
    2064:	2b00      	cmp	r3, #0
    2066:	db2c      	blt.n	20c2 <STACK_SIZE+0xc2>
    2068:	0026      	movs	r6, r4
    206a:	409e      	lsls	r6, r3
    206c:	0033      	movs	r3, r6
    206e:	0026      	movs	r6, r4
    2070:	4647      	mov	r7, r8
    2072:	40be      	lsls	r6, r7
    2074:	0032      	movs	r2, r6
    2076:	1a80      	subs	r0, r0, r2
    2078:	4199      	sbcs	r1, r3
    207a:	9000      	str	r0, [sp, #0]
    207c:	9101      	str	r1, [sp, #4]
    207e:	e7ae      	b.n	1fde <__udivmoddi4+0x82>
    2080:	4642      	mov	r2, r8
    2082:	2320      	movs	r3, #32
    2084:	1a9b      	subs	r3, r3, r2
    2086:	4652      	mov	r2, sl
    2088:	40da      	lsrs	r2, r3
    208a:	4641      	mov	r1, r8
    208c:	0013      	movs	r3, r2
    208e:	464a      	mov	r2, r9
    2090:	408a      	lsls	r2, r1
    2092:	0017      	movs	r7, r2
    2094:	431f      	orrs	r7, r3
    2096:	e782      	b.n	1f9e <__udivmoddi4+0x42>
    2098:	4642      	mov	r2, r8
    209a:	2320      	movs	r3, #32
    209c:	1a9b      	subs	r3, r3, r2
    209e:	002a      	movs	r2, r5
    20a0:	4646      	mov	r6, r8
    20a2:	409a      	lsls	r2, r3
    20a4:	0023      	movs	r3, r4
    20a6:	40f3      	lsrs	r3, r6
    20a8:	4313      	orrs	r3, r2
    20aa:	e7d5      	b.n	2058 <STACK_SIZE+0x58>
    20ac:	4642      	mov	r2, r8
    20ae:	2320      	movs	r3, #32
    20b0:	2100      	movs	r1, #0
    20b2:	1a9b      	subs	r3, r3, r2
    20b4:	2200      	movs	r2, #0
    20b6:	9100      	str	r1, [sp, #0]
    20b8:	9201      	str	r2, [sp, #4]
    20ba:	2201      	movs	r2, #1
    20bc:	40da      	lsrs	r2, r3
    20be:	9201      	str	r2, [sp, #4]
    20c0:	e782      	b.n	1fc8 <__udivmoddi4+0x6c>
    20c2:	4642      	mov	r2, r8
    20c4:	2320      	movs	r3, #32
    20c6:	0026      	movs	r6, r4
    20c8:	1a9b      	subs	r3, r3, r2
    20ca:	40de      	lsrs	r6, r3
    20cc:	002f      	movs	r7, r5
    20ce:	46b4      	mov	ip, r6
    20d0:	4097      	lsls	r7, r2
    20d2:	4666      	mov	r6, ip
    20d4:	003b      	movs	r3, r7
    20d6:	4333      	orrs	r3, r6
    20d8:	e7c9      	b.n	206e <STACK_SIZE+0x6e>
    20da:	46c0      	nop			; (mov r8, r8)

000020dc <__clzdi2>:
    20dc:	b510      	push	{r4, lr}
    20de:	2900      	cmp	r1, #0
    20e0:	d103      	bne.n	20ea <__clzdi2+0xe>
    20e2:	f000 f807 	bl	20f4 <__clzsi2>
    20e6:	3020      	adds	r0, #32
    20e8:	e002      	b.n	20f0 <__clzdi2+0x14>
    20ea:	1c08      	adds	r0, r1, #0
    20ec:	f000 f802 	bl	20f4 <__clzsi2>
    20f0:	bd10      	pop	{r4, pc}
    20f2:	46c0      	nop			; (mov r8, r8)

000020f4 <__clzsi2>:
    20f4:	211c      	movs	r1, #28
    20f6:	2301      	movs	r3, #1
    20f8:	041b      	lsls	r3, r3, #16
    20fa:	4298      	cmp	r0, r3
    20fc:	d301      	bcc.n	2102 <__clzsi2+0xe>
    20fe:	0c00      	lsrs	r0, r0, #16
    2100:	3910      	subs	r1, #16
    2102:	0a1b      	lsrs	r3, r3, #8
    2104:	4298      	cmp	r0, r3
    2106:	d301      	bcc.n	210c <__clzsi2+0x18>
    2108:	0a00      	lsrs	r0, r0, #8
    210a:	3908      	subs	r1, #8
    210c:	091b      	lsrs	r3, r3, #4
    210e:	4298      	cmp	r0, r3
    2110:	d301      	bcc.n	2116 <__clzsi2+0x22>
    2112:	0900      	lsrs	r0, r0, #4
    2114:	3904      	subs	r1, #4
    2116:	a202      	add	r2, pc, #8	; (adr r2, 2120 <__clzsi2+0x2c>)
    2118:	5c10      	ldrb	r0, [r2, r0]
    211a:	1840      	adds	r0, r0, r1
    211c:	4770      	bx	lr
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	02020304 	.word	0x02020304
    2124:	01010101 	.word	0x01010101
	...

00002130 <__libc_init_array>:
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	2600      	movs	r6, #0
    2134:	4d0c      	ldr	r5, [pc, #48]	; (2168 <__libc_init_array+0x38>)
    2136:	4c0d      	ldr	r4, [pc, #52]	; (216c <__libc_init_array+0x3c>)
    2138:	1b64      	subs	r4, r4, r5
    213a:	10a4      	asrs	r4, r4, #2
    213c:	42a6      	cmp	r6, r4
    213e:	d109      	bne.n	2154 <__libc_init_array+0x24>
    2140:	2600      	movs	r6, #0
    2142:	f000 fcb9 	bl	2ab8 <_init>
    2146:	4d0a      	ldr	r5, [pc, #40]	; (2170 <__libc_init_array+0x40>)
    2148:	4c0a      	ldr	r4, [pc, #40]	; (2174 <__libc_init_array+0x44>)
    214a:	1b64      	subs	r4, r4, r5
    214c:	10a4      	asrs	r4, r4, #2
    214e:	42a6      	cmp	r6, r4
    2150:	d105      	bne.n	215e <__libc_init_array+0x2e>
    2152:	bd70      	pop	{r4, r5, r6, pc}
    2154:	00b3      	lsls	r3, r6, #2
    2156:	58eb      	ldr	r3, [r5, r3]
    2158:	4798      	blx	r3
    215a:	3601      	adds	r6, #1
    215c:	e7ee      	b.n	213c <__libc_init_array+0xc>
    215e:	00b3      	lsls	r3, r6, #2
    2160:	58eb      	ldr	r3, [r5, r3]
    2162:	4798      	blx	r3
    2164:	3601      	adds	r6, #1
    2166:	e7f2      	b.n	214e <__libc_init_array+0x1e>
    2168:	00002ac4 	.word	0x00002ac4
    216c:	00002ac4 	.word	0x00002ac4
    2170:	00002ac4 	.word	0x00002ac4
    2174:	00002ac8 	.word	0x00002ac8

00002178 <memset>:
    2178:	0003      	movs	r3, r0
    217a:	1882      	adds	r2, r0, r2
    217c:	4293      	cmp	r3, r2
    217e:	d100      	bne.n	2182 <memset+0xa>
    2180:	4770      	bx	lr
    2182:	7019      	strb	r1, [r3, #0]
    2184:	3301      	adds	r3, #1
    2186:	e7f9      	b.n	217c <memset+0x4>

00002188 <strlen>:
    2188:	2300      	movs	r3, #0
    218a:	5cc2      	ldrb	r2, [r0, r3]
    218c:	3301      	adds	r3, #1
    218e:	2a00      	cmp	r2, #0
    2190:	d1fb      	bne.n	218a <strlen+0x2>
    2192:	1e58      	subs	r0, r3, #1
    2194:	4770      	bx	lr
	...

00002198 <_vsiprintf_r>:
    2198:	b530      	push	{r4, r5, lr}
    219a:	b09b      	sub	sp, #108	; 0x6c
    219c:	9100      	str	r1, [sp, #0]
    219e:	9104      	str	r1, [sp, #16]
    21a0:	4908      	ldr	r1, [pc, #32]	; (21c4 <_vsiprintf_r+0x2c>)
    21a2:	466d      	mov	r5, sp
    21a4:	9102      	str	r1, [sp, #8]
    21a6:	9105      	str	r1, [sp, #20]
    21a8:	2101      	movs	r1, #1
    21aa:	2482      	movs	r4, #130	; 0x82
    21ac:	4249      	negs	r1, r1
    21ae:	81e9      	strh	r1, [r5, #14]
    21b0:	00a4      	lsls	r4, r4, #2
    21b2:	4669      	mov	r1, sp
    21b4:	81ac      	strh	r4, [r5, #12]
    21b6:	f000 f875 	bl	22a4 <_svfiprintf_r>
    21ba:	2300      	movs	r3, #0
    21bc:	9a00      	ldr	r2, [sp, #0]
    21be:	7013      	strb	r3, [r2, #0]
    21c0:	b01b      	add	sp, #108	; 0x6c
    21c2:	bd30      	pop	{r4, r5, pc}
    21c4:	7fffffff 	.word	0x7fffffff

000021c8 <vsiprintf>:
    21c8:	b510      	push	{r4, lr}
    21ca:	0013      	movs	r3, r2
    21cc:	000a      	movs	r2, r1
    21ce:	0001      	movs	r1, r0
    21d0:	4802      	ldr	r0, [pc, #8]	; (21dc <vsiprintf+0x14>)
    21d2:	6800      	ldr	r0, [r0, #0]
    21d4:	f7ff ffe0 	bl	2198 <_vsiprintf_r>
    21d8:	bd10      	pop	{r4, pc}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	20000010 	.word	0x20000010

000021e0 <__ssputs_r>:
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21e2:	688e      	ldr	r6, [r1, #8]
    21e4:	b085      	sub	sp, #20
    21e6:	0007      	movs	r7, r0
    21e8:	000c      	movs	r4, r1
    21ea:	9203      	str	r2, [sp, #12]
    21ec:	9301      	str	r3, [sp, #4]
    21ee:	429e      	cmp	r6, r3
    21f0:	d839      	bhi.n	2266 <__ssputs_r+0x86>
    21f2:	2390      	movs	r3, #144	; 0x90
    21f4:	898a      	ldrh	r2, [r1, #12]
    21f6:	00db      	lsls	r3, r3, #3
    21f8:	421a      	tst	r2, r3
    21fa:	d034      	beq.n	2266 <__ssputs_r+0x86>
    21fc:	2503      	movs	r5, #3
    21fe:	6909      	ldr	r1, [r1, #16]
    2200:	6823      	ldr	r3, [r4, #0]
    2202:	1a5b      	subs	r3, r3, r1
    2204:	9302      	str	r3, [sp, #8]
    2206:	6963      	ldr	r3, [r4, #20]
    2208:	9802      	ldr	r0, [sp, #8]
    220a:	435d      	muls	r5, r3
    220c:	0feb      	lsrs	r3, r5, #31
    220e:	195d      	adds	r5, r3, r5
    2210:	9b01      	ldr	r3, [sp, #4]
    2212:	106d      	asrs	r5, r5, #1
    2214:	3301      	adds	r3, #1
    2216:	181b      	adds	r3, r3, r0
    2218:	42ab      	cmp	r3, r5
    221a:	d900      	bls.n	221e <__ssputs_r+0x3e>
    221c:	001d      	movs	r5, r3
    221e:	0553      	lsls	r3, r2, #21
    2220:	d532      	bpl.n	2288 <__ssputs_r+0xa8>
    2222:	0029      	movs	r1, r5
    2224:	0038      	movs	r0, r7
    2226:	f000 fb39 	bl	289c <_malloc_r>
    222a:	1e06      	subs	r6, r0, #0
    222c:	d109      	bne.n	2242 <__ssputs_r+0x62>
    222e:	230c      	movs	r3, #12
    2230:	603b      	str	r3, [r7, #0]
    2232:	2340      	movs	r3, #64	; 0x40
    2234:	2001      	movs	r0, #1
    2236:	89a2      	ldrh	r2, [r4, #12]
    2238:	4240      	negs	r0, r0
    223a:	4313      	orrs	r3, r2
    223c:	81a3      	strh	r3, [r4, #12]
    223e:	b005      	add	sp, #20
    2240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2242:	9a02      	ldr	r2, [sp, #8]
    2244:	6921      	ldr	r1, [r4, #16]
    2246:	f000 fac4 	bl	27d2 <memcpy>
    224a:	89a3      	ldrh	r3, [r4, #12]
    224c:	4a14      	ldr	r2, [pc, #80]	; (22a0 <__ssputs_r+0xc0>)
    224e:	401a      	ands	r2, r3
    2250:	2380      	movs	r3, #128	; 0x80
    2252:	4313      	orrs	r3, r2
    2254:	81a3      	strh	r3, [r4, #12]
    2256:	9b02      	ldr	r3, [sp, #8]
    2258:	6126      	str	r6, [r4, #16]
    225a:	18f6      	adds	r6, r6, r3
    225c:	6026      	str	r6, [r4, #0]
    225e:	6165      	str	r5, [r4, #20]
    2260:	9e01      	ldr	r6, [sp, #4]
    2262:	1aed      	subs	r5, r5, r3
    2264:	60a5      	str	r5, [r4, #8]
    2266:	9b01      	ldr	r3, [sp, #4]
    2268:	42b3      	cmp	r3, r6
    226a:	d200      	bcs.n	226e <__ssputs_r+0x8e>
    226c:	001e      	movs	r6, r3
    226e:	0032      	movs	r2, r6
    2270:	9903      	ldr	r1, [sp, #12]
    2272:	6820      	ldr	r0, [r4, #0]
    2274:	f000 fab6 	bl	27e4 <memmove>
    2278:	68a3      	ldr	r3, [r4, #8]
    227a:	2000      	movs	r0, #0
    227c:	1b9b      	subs	r3, r3, r6
    227e:	60a3      	str	r3, [r4, #8]
    2280:	6823      	ldr	r3, [r4, #0]
    2282:	199e      	adds	r6, r3, r6
    2284:	6026      	str	r6, [r4, #0]
    2286:	e7da      	b.n	223e <__ssputs_r+0x5e>
    2288:	002a      	movs	r2, r5
    228a:	0038      	movs	r0, r7
    228c:	f000 fb64 	bl	2958 <_realloc_r>
    2290:	1e06      	subs	r6, r0, #0
    2292:	d1e0      	bne.n	2256 <__ssputs_r+0x76>
    2294:	6921      	ldr	r1, [r4, #16]
    2296:	0038      	movs	r0, r7
    2298:	f000 fab6 	bl	2808 <_free_r>
    229c:	e7c7      	b.n	222e <__ssputs_r+0x4e>
    229e:	46c0      	nop			; (mov r8, r8)
    22a0:	fffffb7f 	.word	0xfffffb7f

000022a4 <_svfiprintf_r>:
    22a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a6:	b09f      	sub	sp, #124	; 0x7c
    22a8:	9002      	str	r0, [sp, #8]
    22aa:	9305      	str	r3, [sp, #20]
    22ac:	898b      	ldrh	r3, [r1, #12]
    22ae:	000f      	movs	r7, r1
    22b0:	0016      	movs	r6, r2
    22b2:	061b      	lsls	r3, r3, #24
    22b4:	d511      	bpl.n	22da <_svfiprintf_r+0x36>
    22b6:	690b      	ldr	r3, [r1, #16]
    22b8:	2b00      	cmp	r3, #0
    22ba:	d10e      	bne.n	22da <_svfiprintf_r+0x36>
    22bc:	2140      	movs	r1, #64	; 0x40
    22be:	f000 faed 	bl	289c <_malloc_r>
    22c2:	6038      	str	r0, [r7, #0]
    22c4:	6138      	str	r0, [r7, #16]
    22c6:	2800      	cmp	r0, #0
    22c8:	d105      	bne.n	22d6 <_svfiprintf_r+0x32>
    22ca:	230c      	movs	r3, #12
    22cc:	9a02      	ldr	r2, [sp, #8]
    22ce:	3801      	subs	r0, #1
    22d0:	6013      	str	r3, [r2, #0]
    22d2:	b01f      	add	sp, #124	; 0x7c
    22d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22d6:	2340      	movs	r3, #64	; 0x40
    22d8:	617b      	str	r3, [r7, #20]
    22da:	2300      	movs	r3, #0
    22dc:	ad06      	add	r5, sp, #24
    22de:	616b      	str	r3, [r5, #20]
    22e0:	3320      	adds	r3, #32
    22e2:	766b      	strb	r3, [r5, #25]
    22e4:	3310      	adds	r3, #16
    22e6:	76ab      	strb	r3, [r5, #26]
    22e8:	0034      	movs	r4, r6
    22ea:	7823      	ldrb	r3, [r4, #0]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d147      	bne.n	2380 <_svfiprintf_r+0xdc>
    22f0:	1ba3      	subs	r3, r4, r6
    22f2:	9304      	str	r3, [sp, #16]
    22f4:	d00d      	beq.n	2312 <_svfiprintf_r+0x6e>
    22f6:	1ba3      	subs	r3, r4, r6
    22f8:	0032      	movs	r2, r6
    22fa:	0039      	movs	r1, r7
    22fc:	9802      	ldr	r0, [sp, #8]
    22fe:	f7ff ff6f 	bl	21e0 <__ssputs_r>
    2302:	1c43      	adds	r3, r0, #1
    2304:	d100      	bne.n	2308 <_svfiprintf_r+0x64>
    2306:	e0b5      	b.n	2474 <_svfiprintf_r+0x1d0>
    2308:	696a      	ldr	r2, [r5, #20]
    230a:	9b04      	ldr	r3, [sp, #16]
    230c:	4694      	mov	ip, r2
    230e:	4463      	add	r3, ip
    2310:	616b      	str	r3, [r5, #20]
    2312:	7823      	ldrb	r3, [r4, #0]
    2314:	2b00      	cmp	r3, #0
    2316:	d100      	bne.n	231a <_svfiprintf_r+0x76>
    2318:	e0ac      	b.n	2474 <_svfiprintf_r+0x1d0>
    231a:	2201      	movs	r2, #1
    231c:	2300      	movs	r3, #0
    231e:	4252      	negs	r2, r2
    2320:	606a      	str	r2, [r5, #4]
    2322:	a902      	add	r1, sp, #8
    2324:	3254      	adds	r2, #84	; 0x54
    2326:	1852      	adds	r2, r2, r1
    2328:	3401      	adds	r4, #1
    232a:	602b      	str	r3, [r5, #0]
    232c:	60eb      	str	r3, [r5, #12]
    232e:	60ab      	str	r3, [r5, #8]
    2330:	7013      	strb	r3, [r2, #0]
    2332:	65ab      	str	r3, [r5, #88]	; 0x58
    2334:	4e58      	ldr	r6, [pc, #352]	; (2498 <_svfiprintf_r+0x1f4>)
    2336:	2205      	movs	r2, #5
    2338:	7821      	ldrb	r1, [r4, #0]
    233a:	0030      	movs	r0, r6
    233c:	f000 fa3e 	bl	27bc <memchr>
    2340:	1c62      	adds	r2, r4, #1
    2342:	2800      	cmp	r0, #0
    2344:	d120      	bne.n	2388 <_svfiprintf_r+0xe4>
    2346:	6829      	ldr	r1, [r5, #0]
    2348:	06cb      	lsls	r3, r1, #27
    234a:	d504      	bpl.n	2356 <_svfiprintf_r+0xb2>
    234c:	2353      	movs	r3, #83	; 0x53
    234e:	ae02      	add	r6, sp, #8
    2350:	3020      	adds	r0, #32
    2352:	199b      	adds	r3, r3, r6
    2354:	7018      	strb	r0, [r3, #0]
    2356:	070b      	lsls	r3, r1, #28
    2358:	d504      	bpl.n	2364 <_svfiprintf_r+0xc0>
    235a:	2353      	movs	r3, #83	; 0x53
    235c:	202b      	movs	r0, #43	; 0x2b
    235e:	ae02      	add	r6, sp, #8
    2360:	199b      	adds	r3, r3, r6
    2362:	7018      	strb	r0, [r3, #0]
    2364:	7823      	ldrb	r3, [r4, #0]
    2366:	2b2a      	cmp	r3, #42	; 0x2a
    2368:	d016      	beq.n	2398 <_svfiprintf_r+0xf4>
    236a:	2000      	movs	r0, #0
    236c:	210a      	movs	r1, #10
    236e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2370:	7822      	ldrb	r2, [r4, #0]
    2372:	3a30      	subs	r2, #48	; 0x30
    2374:	2a09      	cmp	r2, #9
    2376:	d955      	bls.n	2424 <_svfiprintf_r+0x180>
    2378:	2800      	cmp	r0, #0
    237a:	d015      	beq.n	23a8 <_svfiprintf_r+0x104>
    237c:	9309      	str	r3, [sp, #36]	; 0x24
    237e:	e013      	b.n	23a8 <_svfiprintf_r+0x104>
    2380:	2b25      	cmp	r3, #37	; 0x25
    2382:	d0b5      	beq.n	22f0 <_svfiprintf_r+0x4c>
    2384:	3401      	adds	r4, #1
    2386:	e7b0      	b.n	22ea <_svfiprintf_r+0x46>
    2388:	2301      	movs	r3, #1
    238a:	1b80      	subs	r0, r0, r6
    238c:	4083      	lsls	r3, r0
    238e:	6829      	ldr	r1, [r5, #0]
    2390:	0014      	movs	r4, r2
    2392:	430b      	orrs	r3, r1
    2394:	602b      	str	r3, [r5, #0]
    2396:	e7cd      	b.n	2334 <_svfiprintf_r+0x90>
    2398:	9b05      	ldr	r3, [sp, #20]
    239a:	1d18      	adds	r0, r3, #4
    239c:	681b      	ldr	r3, [r3, #0]
    239e:	9005      	str	r0, [sp, #20]
    23a0:	2b00      	cmp	r3, #0
    23a2:	db39      	blt.n	2418 <_svfiprintf_r+0x174>
    23a4:	9309      	str	r3, [sp, #36]	; 0x24
    23a6:	0014      	movs	r4, r2
    23a8:	7823      	ldrb	r3, [r4, #0]
    23aa:	2b2e      	cmp	r3, #46	; 0x2e
    23ac:	d10b      	bne.n	23c6 <_svfiprintf_r+0x122>
    23ae:	7863      	ldrb	r3, [r4, #1]
    23b0:	1c62      	adds	r2, r4, #1
    23b2:	2b2a      	cmp	r3, #42	; 0x2a
    23b4:	d13e      	bne.n	2434 <_svfiprintf_r+0x190>
    23b6:	9b05      	ldr	r3, [sp, #20]
    23b8:	3402      	adds	r4, #2
    23ba:	1d1a      	adds	r2, r3, #4
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	9205      	str	r2, [sp, #20]
    23c0:	2b00      	cmp	r3, #0
    23c2:	db34      	blt.n	242e <_svfiprintf_r+0x18a>
    23c4:	9307      	str	r3, [sp, #28]
    23c6:	4e35      	ldr	r6, [pc, #212]	; (249c <_svfiprintf_r+0x1f8>)
    23c8:	7821      	ldrb	r1, [r4, #0]
    23ca:	2203      	movs	r2, #3
    23cc:	0030      	movs	r0, r6
    23ce:	f000 f9f5 	bl	27bc <memchr>
    23d2:	2800      	cmp	r0, #0
    23d4:	d006      	beq.n	23e4 <_svfiprintf_r+0x140>
    23d6:	2340      	movs	r3, #64	; 0x40
    23d8:	1b80      	subs	r0, r0, r6
    23da:	4083      	lsls	r3, r0
    23dc:	682a      	ldr	r2, [r5, #0]
    23de:	3401      	adds	r4, #1
    23e0:	4313      	orrs	r3, r2
    23e2:	602b      	str	r3, [r5, #0]
    23e4:	7821      	ldrb	r1, [r4, #0]
    23e6:	2206      	movs	r2, #6
    23e8:	482d      	ldr	r0, [pc, #180]	; (24a0 <_svfiprintf_r+0x1fc>)
    23ea:	1c66      	adds	r6, r4, #1
    23ec:	7629      	strb	r1, [r5, #24]
    23ee:	f000 f9e5 	bl	27bc <memchr>
    23f2:	2800      	cmp	r0, #0
    23f4:	d046      	beq.n	2484 <_svfiprintf_r+0x1e0>
    23f6:	4b2b      	ldr	r3, [pc, #172]	; (24a4 <_svfiprintf_r+0x200>)
    23f8:	2b00      	cmp	r3, #0
    23fa:	d12f      	bne.n	245c <_svfiprintf_r+0x1b8>
    23fc:	6829      	ldr	r1, [r5, #0]
    23fe:	9b05      	ldr	r3, [sp, #20]
    2400:	2207      	movs	r2, #7
    2402:	05c9      	lsls	r1, r1, #23
    2404:	d528      	bpl.n	2458 <_svfiprintf_r+0x1b4>
    2406:	189b      	adds	r3, r3, r2
    2408:	4393      	bics	r3, r2
    240a:	3308      	adds	r3, #8
    240c:	9305      	str	r3, [sp, #20]
    240e:	696b      	ldr	r3, [r5, #20]
    2410:	9a03      	ldr	r2, [sp, #12]
    2412:	189b      	adds	r3, r3, r2
    2414:	616b      	str	r3, [r5, #20]
    2416:	e767      	b.n	22e8 <_svfiprintf_r+0x44>
    2418:	425b      	negs	r3, r3
    241a:	60eb      	str	r3, [r5, #12]
    241c:	2302      	movs	r3, #2
    241e:	430b      	orrs	r3, r1
    2420:	602b      	str	r3, [r5, #0]
    2422:	e7c0      	b.n	23a6 <_svfiprintf_r+0x102>
    2424:	434b      	muls	r3, r1
    2426:	3401      	adds	r4, #1
    2428:	189b      	adds	r3, r3, r2
    242a:	2001      	movs	r0, #1
    242c:	e7a0      	b.n	2370 <_svfiprintf_r+0xcc>
    242e:	2301      	movs	r3, #1
    2430:	425b      	negs	r3, r3
    2432:	e7c7      	b.n	23c4 <_svfiprintf_r+0x120>
    2434:	2300      	movs	r3, #0
    2436:	0014      	movs	r4, r2
    2438:	200a      	movs	r0, #10
    243a:	001a      	movs	r2, r3
    243c:	606b      	str	r3, [r5, #4]
    243e:	7821      	ldrb	r1, [r4, #0]
    2440:	3930      	subs	r1, #48	; 0x30
    2442:	2909      	cmp	r1, #9
    2444:	d903      	bls.n	244e <_svfiprintf_r+0x1aa>
    2446:	2b00      	cmp	r3, #0
    2448:	d0bd      	beq.n	23c6 <_svfiprintf_r+0x122>
    244a:	9207      	str	r2, [sp, #28]
    244c:	e7bb      	b.n	23c6 <_svfiprintf_r+0x122>
    244e:	4342      	muls	r2, r0
    2450:	3401      	adds	r4, #1
    2452:	1852      	adds	r2, r2, r1
    2454:	2301      	movs	r3, #1
    2456:	e7f2      	b.n	243e <_svfiprintf_r+0x19a>
    2458:	3307      	adds	r3, #7
    245a:	e7d5      	b.n	2408 <_svfiprintf_r+0x164>
    245c:	ab05      	add	r3, sp, #20
    245e:	9300      	str	r3, [sp, #0]
    2460:	003a      	movs	r2, r7
    2462:	4b11      	ldr	r3, [pc, #68]	; (24a8 <_svfiprintf_r+0x204>)
    2464:	0029      	movs	r1, r5
    2466:	9802      	ldr	r0, [sp, #8]
    2468:	e000      	b.n	246c <_svfiprintf_r+0x1c8>
    246a:	bf00      	nop
    246c:	9003      	str	r0, [sp, #12]
    246e:	9b03      	ldr	r3, [sp, #12]
    2470:	3301      	adds	r3, #1
    2472:	d1cc      	bne.n	240e <_svfiprintf_r+0x16a>
    2474:	89bb      	ldrh	r3, [r7, #12]
    2476:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2478:	065b      	lsls	r3, r3, #25
    247a:	d400      	bmi.n	247e <_svfiprintf_r+0x1da>
    247c:	e729      	b.n	22d2 <_svfiprintf_r+0x2e>
    247e:	2001      	movs	r0, #1
    2480:	4240      	negs	r0, r0
    2482:	e726      	b.n	22d2 <_svfiprintf_r+0x2e>
    2484:	ab05      	add	r3, sp, #20
    2486:	9300      	str	r3, [sp, #0]
    2488:	003a      	movs	r2, r7
    248a:	4b07      	ldr	r3, [pc, #28]	; (24a8 <_svfiprintf_r+0x204>)
    248c:	0029      	movs	r1, r5
    248e:	9802      	ldr	r0, [sp, #8]
    2490:	f000 f87a 	bl	2588 <_printf_i>
    2494:	e7ea      	b.n	246c <_svfiprintf_r+0x1c8>
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	00002a84 	.word	0x00002a84
    249c:	00002a8a 	.word	0x00002a8a
    24a0:	00002a8e 	.word	0x00002a8e
    24a4:	00000000 	.word	0x00000000
    24a8:	000021e1 	.word	0x000021e1

000024ac <_printf_common>:
    24ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    24ae:	0015      	movs	r5, r2
    24b0:	9301      	str	r3, [sp, #4]
    24b2:	688a      	ldr	r2, [r1, #8]
    24b4:	690b      	ldr	r3, [r1, #16]
    24b6:	9000      	str	r0, [sp, #0]
    24b8:	000c      	movs	r4, r1
    24ba:	4293      	cmp	r3, r2
    24bc:	da00      	bge.n	24c0 <_printf_common+0x14>
    24be:	0013      	movs	r3, r2
    24c0:	0022      	movs	r2, r4
    24c2:	602b      	str	r3, [r5, #0]
    24c4:	3243      	adds	r2, #67	; 0x43
    24c6:	7812      	ldrb	r2, [r2, #0]
    24c8:	2a00      	cmp	r2, #0
    24ca:	d001      	beq.n	24d0 <_printf_common+0x24>
    24cc:	3301      	adds	r3, #1
    24ce:	602b      	str	r3, [r5, #0]
    24d0:	6823      	ldr	r3, [r4, #0]
    24d2:	069b      	lsls	r3, r3, #26
    24d4:	d502      	bpl.n	24dc <_printf_common+0x30>
    24d6:	682b      	ldr	r3, [r5, #0]
    24d8:	3302      	adds	r3, #2
    24da:	602b      	str	r3, [r5, #0]
    24dc:	2706      	movs	r7, #6
    24de:	6823      	ldr	r3, [r4, #0]
    24e0:	401f      	ands	r7, r3
    24e2:	d027      	beq.n	2534 <_printf_common+0x88>
    24e4:	0023      	movs	r3, r4
    24e6:	3343      	adds	r3, #67	; 0x43
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	1e5a      	subs	r2, r3, #1
    24ec:	4193      	sbcs	r3, r2
    24ee:	6822      	ldr	r2, [r4, #0]
    24f0:	0692      	lsls	r2, r2, #26
    24f2:	d430      	bmi.n	2556 <_printf_common+0xaa>
    24f4:	0022      	movs	r2, r4
    24f6:	9901      	ldr	r1, [sp, #4]
    24f8:	3243      	adds	r2, #67	; 0x43
    24fa:	9800      	ldr	r0, [sp, #0]
    24fc:	9e08      	ldr	r6, [sp, #32]
    24fe:	47b0      	blx	r6
    2500:	1c43      	adds	r3, r0, #1
    2502:	d025      	beq.n	2550 <_printf_common+0xa4>
    2504:	2306      	movs	r3, #6
    2506:	6820      	ldr	r0, [r4, #0]
    2508:	682a      	ldr	r2, [r5, #0]
    250a:	68e1      	ldr	r1, [r4, #12]
    250c:	4003      	ands	r3, r0
    250e:	2500      	movs	r5, #0
    2510:	2b04      	cmp	r3, #4
    2512:	d103      	bne.n	251c <_printf_common+0x70>
    2514:	1a8d      	subs	r5, r1, r2
    2516:	43eb      	mvns	r3, r5
    2518:	17db      	asrs	r3, r3, #31
    251a:	401d      	ands	r5, r3
    251c:	68a3      	ldr	r3, [r4, #8]
    251e:	6922      	ldr	r2, [r4, #16]
    2520:	4293      	cmp	r3, r2
    2522:	dd01      	ble.n	2528 <_printf_common+0x7c>
    2524:	1a9b      	subs	r3, r3, r2
    2526:	18ed      	adds	r5, r5, r3
    2528:	2700      	movs	r7, #0
    252a:	42bd      	cmp	r5, r7
    252c:	d120      	bne.n	2570 <_printf_common+0xc4>
    252e:	2000      	movs	r0, #0
    2530:	e010      	b.n	2554 <_printf_common+0xa8>
    2532:	3701      	adds	r7, #1
    2534:	68e3      	ldr	r3, [r4, #12]
    2536:	682a      	ldr	r2, [r5, #0]
    2538:	1a9b      	subs	r3, r3, r2
    253a:	429f      	cmp	r7, r3
    253c:	dad2      	bge.n	24e4 <_printf_common+0x38>
    253e:	0022      	movs	r2, r4
    2540:	2301      	movs	r3, #1
    2542:	3219      	adds	r2, #25
    2544:	9901      	ldr	r1, [sp, #4]
    2546:	9800      	ldr	r0, [sp, #0]
    2548:	9e08      	ldr	r6, [sp, #32]
    254a:	47b0      	blx	r6
    254c:	1c43      	adds	r3, r0, #1
    254e:	d1f0      	bne.n	2532 <_printf_common+0x86>
    2550:	2001      	movs	r0, #1
    2552:	4240      	negs	r0, r0
    2554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2556:	2030      	movs	r0, #48	; 0x30
    2558:	18e1      	adds	r1, r4, r3
    255a:	3143      	adds	r1, #67	; 0x43
    255c:	7008      	strb	r0, [r1, #0]
    255e:	0021      	movs	r1, r4
    2560:	1c5a      	adds	r2, r3, #1
    2562:	3145      	adds	r1, #69	; 0x45
    2564:	7809      	ldrb	r1, [r1, #0]
    2566:	18a2      	adds	r2, r4, r2
    2568:	3243      	adds	r2, #67	; 0x43
    256a:	3302      	adds	r3, #2
    256c:	7011      	strb	r1, [r2, #0]
    256e:	e7c1      	b.n	24f4 <_printf_common+0x48>
    2570:	0022      	movs	r2, r4
    2572:	2301      	movs	r3, #1
    2574:	321a      	adds	r2, #26
    2576:	9901      	ldr	r1, [sp, #4]
    2578:	9800      	ldr	r0, [sp, #0]
    257a:	9e08      	ldr	r6, [sp, #32]
    257c:	47b0      	blx	r6
    257e:	1c43      	adds	r3, r0, #1
    2580:	d0e6      	beq.n	2550 <_printf_common+0xa4>
    2582:	3701      	adds	r7, #1
    2584:	e7d1      	b.n	252a <_printf_common+0x7e>
	...

00002588 <_printf_i>:
    2588:	b5f0      	push	{r4, r5, r6, r7, lr}
    258a:	b08b      	sub	sp, #44	; 0x2c
    258c:	9206      	str	r2, [sp, #24]
    258e:	000a      	movs	r2, r1
    2590:	3243      	adds	r2, #67	; 0x43
    2592:	9307      	str	r3, [sp, #28]
    2594:	9005      	str	r0, [sp, #20]
    2596:	9204      	str	r2, [sp, #16]
    2598:	7e0a      	ldrb	r2, [r1, #24]
    259a:	000c      	movs	r4, r1
    259c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    259e:	2a6e      	cmp	r2, #110	; 0x6e
    25a0:	d100      	bne.n	25a4 <_printf_i+0x1c>
    25a2:	e08f      	b.n	26c4 <_printf_i+0x13c>
    25a4:	d817      	bhi.n	25d6 <_printf_i+0x4e>
    25a6:	2a63      	cmp	r2, #99	; 0x63
    25a8:	d02c      	beq.n	2604 <_printf_i+0x7c>
    25aa:	d808      	bhi.n	25be <_printf_i+0x36>
    25ac:	2a00      	cmp	r2, #0
    25ae:	d100      	bne.n	25b2 <_printf_i+0x2a>
    25b0:	e099      	b.n	26e6 <_printf_i+0x15e>
    25b2:	2a58      	cmp	r2, #88	; 0x58
    25b4:	d054      	beq.n	2660 <_printf_i+0xd8>
    25b6:	0026      	movs	r6, r4
    25b8:	3642      	adds	r6, #66	; 0x42
    25ba:	7032      	strb	r2, [r6, #0]
    25bc:	e029      	b.n	2612 <_printf_i+0x8a>
    25be:	2a64      	cmp	r2, #100	; 0x64
    25c0:	d001      	beq.n	25c6 <_printf_i+0x3e>
    25c2:	2a69      	cmp	r2, #105	; 0x69
    25c4:	d1f7      	bne.n	25b6 <_printf_i+0x2e>
    25c6:	6821      	ldr	r1, [r4, #0]
    25c8:	681a      	ldr	r2, [r3, #0]
    25ca:	0608      	lsls	r0, r1, #24
    25cc:	d523      	bpl.n	2616 <_printf_i+0x8e>
    25ce:	1d11      	adds	r1, r2, #4
    25d0:	6019      	str	r1, [r3, #0]
    25d2:	6815      	ldr	r5, [r2, #0]
    25d4:	e025      	b.n	2622 <_printf_i+0x9a>
    25d6:	2a73      	cmp	r2, #115	; 0x73
    25d8:	d100      	bne.n	25dc <_printf_i+0x54>
    25da:	e088      	b.n	26ee <_printf_i+0x166>
    25dc:	d808      	bhi.n	25f0 <_printf_i+0x68>
    25de:	2a6f      	cmp	r2, #111	; 0x6f
    25e0:	d029      	beq.n	2636 <_printf_i+0xae>
    25e2:	2a70      	cmp	r2, #112	; 0x70
    25e4:	d1e7      	bne.n	25b6 <_printf_i+0x2e>
    25e6:	2220      	movs	r2, #32
    25e8:	6809      	ldr	r1, [r1, #0]
    25ea:	430a      	orrs	r2, r1
    25ec:	6022      	str	r2, [r4, #0]
    25ee:	e003      	b.n	25f8 <_printf_i+0x70>
    25f0:	2a75      	cmp	r2, #117	; 0x75
    25f2:	d020      	beq.n	2636 <_printf_i+0xae>
    25f4:	2a78      	cmp	r2, #120	; 0x78
    25f6:	d1de      	bne.n	25b6 <_printf_i+0x2e>
    25f8:	0022      	movs	r2, r4
    25fa:	2178      	movs	r1, #120	; 0x78
    25fc:	3245      	adds	r2, #69	; 0x45
    25fe:	7011      	strb	r1, [r2, #0]
    2600:	4a6c      	ldr	r2, [pc, #432]	; (27b4 <_printf_i+0x22c>)
    2602:	e030      	b.n	2666 <_printf_i+0xde>
    2604:	000e      	movs	r6, r1
    2606:	681a      	ldr	r2, [r3, #0]
    2608:	3642      	adds	r6, #66	; 0x42
    260a:	1d11      	adds	r1, r2, #4
    260c:	6019      	str	r1, [r3, #0]
    260e:	6813      	ldr	r3, [r2, #0]
    2610:	7033      	strb	r3, [r6, #0]
    2612:	2301      	movs	r3, #1
    2614:	e079      	b.n	270a <_printf_i+0x182>
    2616:	0649      	lsls	r1, r1, #25
    2618:	d5d9      	bpl.n	25ce <_printf_i+0x46>
    261a:	1d11      	adds	r1, r2, #4
    261c:	6019      	str	r1, [r3, #0]
    261e:	2300      	movs	r3, #0
    2620:	5ed5      	ldrsh	r5, [r2, r3]
    2622:	2d00      	cmp	r5, #0
    2624:	da03      	bge.n	262e <_printf_i+0xa6>
    2626:	232d      	movs	r3, #45	; 0x2d
    2628:	9a04      	ldr	r2, [sp, #16]
    262a:	426d      	negs	r5, r5
    262c:	7013      	strb	r3, [r2, #0]
    262e:	4b62      	ldr	r3, [pc, #392]	; (27b8 <_printf_i+0x230>)
    2630:	270a      	movs	r7, #10
    2632:	9303      	str	r3, [sp, #12]
    2634:	e02f      	b.n	2696 <_printf_i+0x10e>
    2636:	6820      	ldr	r0, [r4, #0]
    2638:	6819      	ldr	r1, [r3, #0]
    263a:	0605      	lsls	r5, r0, #24
    263c:	d503      	bpl.n	2646 <_printf_i+0xbe>
    263e:	1d08      	adds	r0, r1, #4
    2640:	6018      	str	r0, [r3, #0]
    2642:	680d      	ldr	r5, [r1, #0]
    2644:	e005      	b.n	2652 <_printf_i+0xca>
    2646:	0640      	lsls	r0, r0, #25
    2648:	d5f9      	bpl.n	263e <_printf_i+0xb6>
    264a:	680d      	ldr	r5, [r1, #0]
    264c:	1d08      	adds	r0, r1, #4
    264e:	6018      	str	r0, [r3, #0]
    2650:	b2ad      	uxth	r5, r5
    2652:	4b59      	ldr	r3, [pc, #356]	; (27b8 <_printf_i+0x230>)
    2654:	2708      	movs	r7, #8
    2656:	9303      	str	r3, [sp, #12]
    2658:	2a6f      	cmp	r2, #111	; 0x6f
    265a:	d018      	beq.n	268e <_printf_i+0x106>
    265c:	270a      	movs	r7, #10
    265e:	e016      	b.n	268e <_printf_i+0x106>
    2660:	3145      	adds	r1, #69	; 0x45
    2662:	700a      	strb	r2, [r1, #0]
    2664:	4a54      	ldr	r2, [pc, #336]	; (27b8 <_printf_i+0x230>)
    2666:	9203      	str	r2, [sp, #12]
    2668:	681a      	ldr	r2, [r3, #0]
    266a:	6821      	ldr	r1, [r4, #0]
    266c:	1d10      	adds	r0, r2, #4
    266e:	6018      	str	r0, [r3, #0]
    2670:	6815      	ldr	r5, [r2, #0]
    2672:	0608      	lsls	r0, r1, #24
    2674:	d522      	bpl.n	26bc <_printf_i+0x134>
    2676:	07cb      	lsls	r3, r1, #31
    2678:	d502      	bpl.n	2680 <_printf_i+0xf8>
    267a:	2320      	movs	r3, #32
    267c:	4319      	orrs	r1, r3
    267e:	6021      	str	r1, [r4, #0]
    2680:	2710      	movs	r7, #16
    2682:	2d00      	cmp	r5, #0
    2684:	d103      	bne.n	268e <_printf_i+0x106>
    2686:	2320      	movs	r3, #32
    2688:	6822      	ldr	r2, [r4, #0]
    268a:	439a      	bics	r2, r3
    268c:	6022      	str	r2, [r4, #0]
    268e:	0023      	movs	r3, r4
    2690:	2200      	movs	r2, #0
    2692:	3343      	adds	r3, #67	; 0x43
    2694:	701a      	strb	r2, [r3, #0]
    2696:	6863      	ldr	r3, [r4, #4]
    2698:	60a3      	str	r3, [r4, #8]
    269a:	2b00      	cmp	r3, #0
    269c:	db5c      	blt.n	2758 <_printf_i+0x1d0>
    269e:	2204      	movs	r2, #4
    26a0:	6821      	ldr	r1, [r4, #0]
    26a2:	4391      	bics	r1, r2
    26a4:	6021      	str	r1, [r4, #0]
    26a6:	2d00      	cmp	r5, #0
    26a8:	d158      	bne.n	275c <_printf_i+0x1d4>
    26aa:	9e04      	ldr	r6, [sp, #16]
    26ac:	2b00      	cmp	r3, #0
    26ae:	d064      	beq.n	277a <_printf_i+0x1f2>
    26b0:	0026      	movs	r6, r4
    26b2:	9b03      	ldr	r3, [sp, #12]
    26b4:	3642      	adds	r6, #66	; 0x42
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	7033      	strb	r3, [r6, #0]
    26ba:	e05e      	b.n	277a <_printf_i+0x1f2>
    26bc:	0648      	lsls	r0, r1, #25
    26be:	d5da      	bpl.n	2676 <_printf_i+0xee>
    26c0:	b2ad      	uxth	r5, r5
    26c2:	e7d8      	b.n	2676 <_printf_i+0xee>
    26c4:	6809      	ldr	r1, [r1, #0]
    26c6:	681a      	ldr	r2, [r3, #0]
    26c8:	0608      	lsls	r0, r1, #24
    26ca:	d505      	bpl.n	26d8 <_printf_i+0x150>
    26cc:	1d11      	adds	r1, r2, #4
    26ce:	6019      	str	r1, [r3, #0]
    26d0:	6813      	ldr	r3, [r2, #0]
    26d2:	6962      	ldr	r2, [r4, #20]
    26d4:	601a      	str	r2, [r3, #0]
    26d6:	e006      	b.n	26e6 <_printf_i+0x15e>
    26d8:	0649      	lsls	r1, r1, #25
    26da:	d5f7      	bpl.n	26cc <_printf_i+0x144>
    26dc:	1d11      	adds	r1, r2, #4
    26de:	6019      	str	r1, [r3, #0]
    26e0:	6813      	ldr	r3, [r2, #0]
    26e2:	8aa2      	ldrh	r2, [r4, #20]
    26e4:	801a      	strh	r2, [r3, #0]
    26e6:	2300      	movs	r3, #0
    26e8:	9e04      	ldr	r6, [sp, #16]
    26ea:	6123      	str	r3, [r4, #16]
    26ec:	e054      	b.n	2798 <_printf_i+0x210>
    26ee:	681a      	ldr	r2, [r3, #0]
    26f0:	1d11      	adds	r1, r2, #4
    26f2:	6019      	str	r1, [r3, #0]
    26f4:	6816      	ldr	r6, [r2, #0]
    26f6:	2100      	movs	r1, #0
    26f8:	6862      	ldr	r2, [r4, #4]
    26fa:	0030      	movs	r0, r6
    26fc:	f000 f85e 	bl	27bc <memchr>
    2700:	2800      	cmp	r0, #0
    2702:	d001      	beq.n	2708 <_printf_i+0x180>
    2704:	1b80      	subs	r0, r0, r6
    2706:	6060      	str	r0, [r4, #4]
    2708:	6863      	ldr	r3, [r4, #4]
    270a:	6123      	str	r3, [r4, #16]
    270c:	2300      	movs	r3, #0
    270e:	9a04      	ldr	r2, [sp, #16]
    2710:	7013      	strb	r3, [r2, #0]
    2712:	e041      	b.n	2798 <_printf_i+0x210>
    2714:	6923      	ldr	r3, [r4, #16]
    2716:	0032      	movs	r2, r6
    2718:	9906      	ldr	r1, [sp, #24]
    271a:	9805      	ldr	r0, [sp, #20]
    271c:	9d07      	ldr	r5, [sp, #28]
    271e:	47a8      	blx	r5
    2720:	1c43      	adds	r3, r0, #1
    2722:	d043      	beq.n	27ac <_printf_i+0x224>
    2724:	6823      	ldr	r3, [r4, #0]
    2726:	2500      	movs	r5, #0
    2728:	079b      	lsls	r3, r3, #30
    272a:	d40f      	bmi.n	274c <_printf_i+0x1c4>
    272c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    272e:	68e0      	ldr	r0, [r4, #12]
    2730:	4298      	cmp	r0, r3
    2732:	da3d      	bge.n	27b0 <_printf_i+0x228>
    2734:	0018      	movs	r0, r3
    2736:	e03b      	b.n	27b0 <_printf_i+0x228>
    2738:	0022      	movs	r2, r4
    273a:	2301      	movs	r3, #1
    273c:	3219      	adds	r2, #25
    273e:	9906      	ldr	r1, [sp, #24]
    2740:	9805      	ldr	r0, [sp, #20]
    2742:	9e07      	ldr	r6, [sp, #28]
    2744:	47b0      	blx	r6
    2746:	1c43      	adds	r3, r0, #1
    2748:	d030      	beq.n	27ac <_printf_i+0x224>
    274a:	3501      	adds	r5, #1
    274c:	68e3      	ldr	r3, [r4, #12]
    274e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2750:	1a9b      	subs	r3, r3, r2
    2752:	429d      	cmp	r5, r3
    2754:	dbf0      	blt.n	2738 <_printf_i+0x1b0>
    2756:	e7e9      	b.n	272c <_printf_i+0x1a4>
    2758:	2d00      	cmp	r5, #0
    275a:	d0a9      	beq.n	26b0 <_printf_i+0x128>
    275c:	9e04      	ldr	r6, [sp, #16]
    275e:	0028      	movs	r0, r5
    2760:	0039      	movs	r1, r7
    2762:	f7ff fbab 	bl	1ebc <__aeabi_uidivmod>
    2766:	9b03      	ldr	r3, [sp, #12]
    2768:	3e01      	subs	r6, #1
    276a:	5c5b      	ldrb	r3, [r3, r1]
    276c:	0028      	movs	r0, r5
    276e:	7033      	strb	r3, [r6, #0]
    2770:	0039      	movs	r1, r7
    2772:	f7ff fb1d 	bl	1db0 <__udivsi3>
    2776:	1e05      	subs	r5, r0, #0
    2778:	d1f1      	bne.n	275e <_printf_i+0x1d6>
    277a:	2f08      	cmp	r7, #8
    277c:	d109      	bne.n	2792 <_printf_i+0x20a>
    277e:	6823      	ldr	r3, [r4, #0]
    2780:	07db      	lsls	r3, r3, #31
    2782:	d506      	bpl.n	2792 <_printf_i+0x20a>
    2784:	6863      	ldr	r3, [r4, #4]
    2786:	6922      	ldr	r2, [r4, #16]
    2788:	4293      	cmp	r3, r2
    278a:	dc02      	bgt.n	2792 <_printf_i+0x20a>
    278c:	2330      	movs	r3, #48	; 0x30
    278e:	3e01      	subs	r6, #1
    2790:	7033      	strb	r3, [r6, #0]
    2792:	9b04      	ldr	r3, [sp, #16]
    2794:	1b9b      	subs	r3, r3, r6
    2796:	6123      	str	r3, [r4, #16]
    2798:	9b07      	ldr	r3, [sp, #28]
    279a:	aa09      	add	r2, sp, #36	; 0x24
    279c:	9300      	str	r3, [sp, #0]
    279e:	0021      	movs	r1, r4
    27a0:	9b06      	ldr	r3, [sp, #24]
    27a2:	9805      	ldr	r0, [sp, #20]
    27a4:	f7ff fe82 	bl	24ac <_printf_common>
    27a8:	1c43      	adds	r3, r0, #1
    27aa:	d1b3      	bne.n	2714 <_printf_i+0x18c>
    27ac:	2001      	movs	r0, #1
    27ae:	4240      	negs	r0, r0
    27b0:	b00b      	add	sp, #44	; 0x2c
    27b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27b4:	00002aa6 	.word	0x00002aa6
    27b8:	00002a95 	.word	0x00002a95

000027bc <memchr>:
    27bc:	b2c9      	uxtb	r1, r1
    27be:	1882      	adds	r2, r0, r2
    27c0:	4290      	cmp	r0, r2
    27c2:	d101      	bne.n	27c8 <memchr+0xc>
    27c4:	2000      	movs	r0, #0
    27c6:	4770      	bx	lr
    27c8:	7803      	ldrb	r3, [r0, #0]
    27ca:	428b      	cmp	r3, r1
    27cc:	d0fb      	beq.n	27c6 <memchr+0xa>
    27ce:	3001      	adds	r0, #1
    27d0:	e7f6      	b.n	27c0 <memchr+0x4>

000027d2 <memcpy>:
    27d2:	2300      	movs	r3, #0
    27d4:	b510      	push	{r4, lr}
    27d6:	429a      	cmp	r2, r3
    27d8:	d100      	bne.n	27dc <memcpy+0xa>
    27da:	bd10      	pop	{r4, pc}
    27dc:	5ccc      	ldrb	r4, [r1, r3]
    27de:	54c4      	strb	r4, [r0, r3]
    27e0:	3301      	adds	r3, #1
    27e2:	e7f8      	b.n	27d6 <memcpy+0x4>

000027e4 <memmove>:
    27e4:	b510      	push	{r4, lr}
    27e6:	4288      	cmp	r0, r1
    27e8:	d902      	bls.n	27f0 <memmove+0xc>
    27ea:	188b      	adds	r3, r1, r2
    27ec:	4298      	cmp	r0, r3
    27ee:	d308      	bcc.n	2802 <memmove+0x1e>
    27f0:	2300      	movs	r3, #0
    27f2:	429a      	cmp	r2, r3
    27f4:	d007      	beq.n	2806 <memmove+0x22>
    27f6:	5ccc      	ldrb	r4, [r1, r3]
    27f8:	54c4      	strb	r4, [r0, r3]
    27fa:	3301      	adds	r3, #1
    27fc:	e7f9      	b.n	27f2 <memmove+0xe>
    27fe:	5c8b      	ldrb	r3, [r1, r2]
    2800:	5483      	strb	r3, [r0, r2]
    2802:	3a01      	subs	r2, #1
    2804:	d2fb      	bcs.n	27fe <memmove+0x1a>
    2806:	bd10      	pop	{r4, pc}

00002808 <_free_r>:
    2808:	b570      	push	{r4, r5, r6, lr}
    280a:	0005      	movs	r5, r0
    280c:	2900      	cmp	r1, #0
    280e:	d010      	beq.n	2832 <_free_r+0x2a>
    2810:	1f0c      	subs	r4, r1, #4
    2812:	6823      	ldr	r3, [r4, #0]
    2814:	2b00      	cmp	r3, #0
    2816:	da00      	bge.n	281a <_free_r+0x12>
    2818:	18e4      	adds	r4, r4, r3
    281a:	0028      	movs	r0, r5
    281c:	f000 f8d4 	bl	29c8 <__malloc_lock>
    2820:	4a1d      	ldr	r2, [pc, #116]	; (2898 <_free_r+0x90>)
    2822:	6813      	ldr	r3, [r2, #0]
    2824:	2b00      	cmp	r3, #0
    2826:	d105      	bne.n	2834 <_free_r+0x2c>
    2828:	6063      	str	r3, [r4, #4]
    282a:	6014      	str	r4, [r2, #0]
    282c:	0028      	movs	r0, r5
    282e:	f000 f8cc 	bl	29ca <__malloc_unlock>
    2832:	bd70      	pop	{r4, r5, r6, pc}
    2834:	42a3      	cmp	r3, r4
    2836:	d909      	bls.n	284c <_free_r+0x44>
    2838:	6821      	ldr	r1, [r4, #0]
    283a:	1860      	adds	r0, r4, r1
    283c:	4283      	cmp	r3, r0
    283e:	d1f3      	bne.n	2828 <_free_r+0x20>
    2840:	6818      	ldr	r0, [r3, #0]
    2842:	685b      	ldr	r3, [r3, #4]
    2844:	1841      	adds	r1, r0, r1
    2846:	6021      	str	r1, [r4, #0]
    2848:	e7ee      	b.n	2828 <_free_r+0x20>
    284a:	0013      	movs	r3, r2
    284c:	685a      	ldr	r2, [r3, #4]
    284e:	2a00      	cmp	r2, #0
    2850:	d001      	beq.n	2856 <_free_r+0x4e>
    2852:	42a2      	cmp	r2, r4
    2854:	d9f9      	bls.n	284a <_free_r+0x42>
    2856:	6819      	ldr	r1, [r3, #0]
    2858:	1858      	adds	r0, r3, r1
    285a:	42a0      	cmp	r0, r4
    285c:	d10b      	bne.n	2876 <_free_r+0x6e>
    285e:	6820      	ldr	r0, [r4, #0]
    2860:	1809      	adds	r1, r1, r0
    2862:	1858      	adds	r0, r3, r1
    2864:	6019      	str	r1, [r3, #0]
    2866:	4282      	cmp	r2, r0
    2868:	d1e0      	bne.n	282c <_free_r+0x24>
    286a:	6810      	ldr	r0, [r2, #0]
    286c:	6852      	ldr	r2, [r2, #4]
    286e:	1841      	adds	r1, r0, r1
    2870:	6019      	str	r1, [r3, #0]
    2872:	605a      	str	r2, [r3, #4]
    2874:	e7da      	b.n	282c <_free_r+0x24>
    2876:	42a0      	cmp	r0, r4
    2878:	d902      	bls.n	2880 <_free_r+0x78>
    287a:	230c      	movs	r3, #12
    287c:	602b      	str	r3, [r5, #0]
    287e:	e7d5      	b.n	282c <_free_r+0x24>
    2880:	6821      	ldr	r1, [r4, #0]
    2882:	1860      	adds	r0, r4, r1
    2884:	4282      	cmp	r2, r0
    2886:	d103      	bne.n	2890 <_free_r+0x88>
    2888:	6810      	ldr	r0, [r2, #0]
    288a:	6852      	ldr	r2, [r2, #4]
    288c:	1841      	adds	r1, r0, r1
    288e:	6021      	str	r1, [r4, #0]
    2890:	6062      	str	r2, [r4, #4]
    2892:	605c      	str	r4, [r3, #4]
    2894:	e7ca      	b.n	282c <_free_r+0x24>
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	200000d0 	.word	0x200000d0

0000289c <_malloc_r>:
    289c:	2303      	movs	r3, #3
    289e:	b570      	push	{r4, r5, r6, lr}
    28a0:	1ccd      	adds	r5, r1, #3
    28a2:	439d      	bics	r5, r3
    28a4:	3508      	adds	r5, #8
    28a6:	0006      	movs	r6, r0
    28a8:	2d0c      	cmp	r5, #12
    28aa:	d21e      	bcs.n	28ea <_malloc_r+0x4e>
    28ac:	250c      	movs	r5, #12
    28ae:	42a9      	cmp	r1, r5
    28b0:	d81d      	bhi.n	28ee <_malloc_r+0x52>
    28b2:	0030      	movs	r0, r6
    28b4:	f000 f888 	bl	29c8 <__malloc_lock>
    28b8:	4a25      	ldr	r2, [pc, #148]	; (2950 <_malloc_r+0xb4>)
    28ba:	6814      	ldr	r4, [r2, #0]
    28bc:	0021      	movs	r1, r4
    28be:	2900      	cmp	r1, #0
    28c0:	d119      	bne.n	28f6 <_malloc_r+0x5a>
    28c2:	4c24      	ldr	r4, [pc, #144]	; (2954 <_malloc_r+0xb8>)
    28c4:	6823      	ldr	r3, [r4, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d103      	bne.n	28d2 <_malloc_r+0x36>
    28ca:	0030      	movs	r0, r6
    28cc:	f000 f86a 	bl	29a4 <_sbrk_r>
    28d0:	6020      	str	r0, [r4, #0]
    28d2:	0029      	movs	r1, r5
    28d4:	0030      	movs	r0, r6
    28d6:	f000 f865 	bl	29a4 <_sbrk_r>
    28da:	1c43      	adds	r3, r0, #1
    28dc:	d12c      	bne.n	2938 <_malloc_r+0x9c>
    28de:	230c      	movs	r3, #12
    28e0:	0030      	movs	r0, r6
    28e2:	6033      	str	r3, [r6, #0]
    28e4:	f000 f871 	bl	29ca <__malloc_unlock>
    28e8:	e003      	b.n	28f2 <_malloc_r+0x56>
    28ea:	2d00      	cmp	r5, #0
    28ec:	dadf      	bge.n	28ae <_malloc_r+0x12>
    28ee:	230c      	movs	r3, #12
    28f0:	6033      	str	r3, [r6, #0]
    28f2:	2000      	movs	r0, #0
    28f4:	bd70      	pop	{r4, r5, r6, pc}
    28f6:	680b      	ldr	r3, [r1, #0]
    28f8:	1b5b      	subs	r3, r3, r5
    28fa:	d41a      	bmi.n	2932 <_malloc_r+0x96>
    28fc:	2b0b      	cmp	r3, #11
    28fe:	d903      	bls.n	2908 <_malloc_r+0x6c>
    2900:	600b      	str	r3, [r1, #0]
    2902:	18cc      	adds	r4, r1, r3
    2904:	6025      	str	r5, [r4, #0]
    2906:	e003      	b.n	2910 <_malloc_r+0x74>
    2908:	428c      	cmp	r4, r1
    290a:	d10e      	bne.n	292a <_malloc_r+0x8e>
    290c:	6863      	ldr	r3, [r4, #4]
    290e:	6013      	str	r3, [r2, #0]
    2910:	0030      	movs	r0, r6
    2912:	f000 f85a 	bl	29ca <__malloc_unlock>
    2916:	0020      	movs	r0, r4
    2918:	2207      	movs	r2, #7
    291a:	300b      	adds	r0, #11
    291c:	1d23      	adds	r3, r4, #4
    291e:	4390      	bics	r0, r2
    2920:	1ac3      	subs	r3, r0, r3
    2922:	d0e7      	beq.n	28f4 <_malloc_r+0x58>
    2924:	425a      	negs	r2, r3
    2926:	50e2      	str	r2, [r4, r3]
    2928:	e7e4      	b.n	28f4 <_malloc_r+0x58>
    292a:	684b      	ldr	r3, [r1, #4]
    292c:	6063      	str	r3, [r4, #4]
    292e:	000c      	movs	r4, r1
    2930:	e7ee      	b.n	2910 <_malloc_r+0x74>
    2932:	000c      	movs	r4, r1
    2934:	6849      	ldr	r1, [r1, #4]
    2936:	e7c2      	b.n	28be <_malloc_r+0x22>
    2938:	2303      	movs	r3, #3
    293a:	1cc4      	adds	r4, r0, #3
    293c:	439c      	bics	r4, r3
    293e:	42a0      	cmp	r0, r4
    2940:	d0e0      	beq.n	2904 <_malloc_r+0x68>
    2942:	1a21      	subs	r1, r4, r0
    2944:	0030      	movs	r0, r6
    2946:	f000 f82d 	bl	29a4 <_sbrk_r>
    294a:	1c43      	adds	r3, r0, #1
    294c:	d1da      	bne.n	2904 <_malloc_r+0x68>
    294e:	e7c6      	b.n	28de <_malloc_r+0x42>
    2950:	200000d0 	.word	0x200000d0
    2954:	200000d4 	.word	0x200000d4

00002958 <_realloc_r>:
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    295a:	0007      	movs	r7, r0
    295c:	000d      	movs	r5, r1
    295e:	0016      	movs	r6, r2
    2960:	2900      	cmp	r1, #0
    2962:	d105      	bne.n	2970 <_realloc_r+0x18>
    2964:	0011      	movs	r1, r2
    2966:	f7ff ff99 	bl	289c <_malloc_r>
    296a:	0004      	movs	r4, r0
    296c:	0020      	movs	r0, r4
    296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2970:	2a00      	cmp	r2, #0
    2972:	d103      	bne.n	297c <_realloc_r+0x24>
    2974:	f7ff ff48 	bl	2808 <_free_r>
    2978:	0034      	movs	r4, r6
    297a:	e7f7      	b.n	296c <_realloc_r+0x14>
    297c:	f000 f826 	bl	29cc <_malloc_usable_size_r>
    2980:	002c      	movs	r4, r5
    2982:	4286      	cmp	r6, r0
    2984:	d9f2      	bls.n	296c <_realloc_r+0x14>
    2986:	0031      	movs	r1, r6
    2988:	0038      	movs	r0, r7
    298a:	f7ff ff87 	bl	289c <_malloc_r>
    298e:	1e04      	subs	r4, r0, #0
    2990:	d0ec      	beq.n	296c <_realloc_r+0x14>
    2992:	0029      	movs	r1, r5
    2994:	0032      	movs	r2, r6
    2996:	f7ff ff1c 	bl	27d2 <memcpy>
    299a:	0029      	movs	r1, r5
    299c:	0038      	movs	r0, r7
    299e:	f7ff ff33 	bl	2808 <_free_r>
    29a2:	e7e3      	b.n	296c <_realloc_r+0x14>

000029a4 <_sbrk_r>:
    29a4:	2300      	movs	r3, #0
    29a6:	b570      	push	{r4, r5, r6, lr}
    29a8:	4c06      	ldr	r4, [pc, #24]	; (29c4 <_sbrk_r+0x20>)
    29aa:	0005      	movs	r5, r0
    29ac:	0008      	movs	r0, r1
    29ae:	6023      	str	r3, [r4, #0]
    29b0:	f7ff f94e 	bl	1c50 <_sbrk>
    29b4:	1c43      	adds	r3, r0, #1
    29b6:	d103      	bne.n	29c0 <_sbrk_r+0x1c>
    29b8:	6823      	ldr	r3, [r4, #0]
    29ba:	2b00      	cmp	r3, #0
    29bc:	d000      	beq.n	29c0 <_sbrk_r+0x1c>
    29be:	602b      	str	r3, [r5, #0]
    29c0:	bd70      	pop	{r4, r5, r6, pc}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	20000278 	.word	0x20000278

000029c8 <__malloc_lock>:
    29c8:	4770      	bx	lr

000029ca <__malloc_unlock>:
    29ca:	4770      	bx	lr

000029cc <_malloc_usable_size_r>:
    29cc:	1f0b      	subs	r3, r1, #4
    29ce:	681b      	ldr	r3, [r3, #0]
    29d0:	1f18      	subs	r0, r3, #4
    29d2:	2b00      	cmp	r3, #0
    29d4:	da01      	bge.n	29da <_malloc_usable_size_r+0xe>
    29d6:	580b      	ldr	r3, [r1, r0]
    29d8:	18c0      	adds	r0, r0, r3
    29da:	4770      	bx	lr
    29dc:	42000800 	.word	0x42000800
    29e0:	42000c00 	.word	0x42000c00
    29e4:	42001000 	.word	0x42001000
    29e8:	42001400 	.word	0x42001400
    29ec:	42001800 	.word	0x42001800
    29f0:	42001c00 	.word	0x42001c00
    29f4:	00007325 	.word	0x00007325
    29f8:	52415355 	.word	0x52415355
    29fc:	4e492054 	.word	0x4e492054
    2a00:	41495449 	.word	0x41495449
    2a04:	455a494c 	.word	0x455a494c
    2a08:	00000a44 	.word	0x00000a44
    2a0c:	000013da 	.word	0x000013da
    2a10:	000013d6 	.word	0x000013d6
    2a14:	000013d6 	.word	0x000013d6
    2a18:	0000143c 	.word	0x0000143c
    2a1c:	0000143c 	.word	0x0000143c
    2a20:	000013ee 	.word	0x000013ee
    2a24:	000013e0 	.word	0x000013e0
    2a28:	000013f4 	.word	0x000013f4
    2a2c:	0000142a 	.word	0x0000142a
    2a30:	000015fc 	.word	0x000015fc
    2a34:	000015dc 	.word	0x000015dc
    2a38:	000015dc 	.word	0x000015dc
    2a3c:	00001668 	.word	0x00001668
    2a40:	000015ee 	.word	0x000015ee
    2a44:	0000160a 	.word	0x0000160a
    2a48:	000015e0 	.word	0x000015e0
    2a4c:	00001618 	.word	0x00001618
    2a50:	00001658 	.word	0x00001658
    2a54:	4e495250 	.word	0x4e495250
    2a58:	474e4954 	.word	0x474e4954
    2a5c:	0000000a 	.word	0x0000000a
    2a60:	25097525 	.word	0x25097525
    2a64:	75250975 	.word	0x75250975
    2a68:	0a752509 	.word	0x0a752509
    2a6c:	00000000 	.word	0x00000000
    2a70:	09782325 	.word	0x09782325
    2a74:	09782325 	.word	0x09782325
    2a78:	09782325 	.word	0x09782325
    2a7c:	0a782325 	.word	0x0a782325
    2a80:	00000000 	.word	0x00000000
    2a84:	2b302d23 	.word	0x2b302d23
    2a88:	6c680020 	.word	0x6c680020
    2a8c:	6665004c 	.word	0x6665004c
    2a90:	47464567 	.word	0x47464567
    2a94:	00          	.byte	0x00
    2a95:	30          	.byte	0x30
    2a96:	3231      	.short	0x3231
    2a98:	36353433 	.word	0x36353433
    2a9c:	41393837 	.word	0x41393837
    2aa0:	45444342 	.word	0x45444342
    2aa4:	31300046 	.word	0x31300046
    2aa8:	35343332 	.word	0x35343332
    2aac:	39383736 	.word	0x39383736
    2ab0:	64636261 	.word	0x64636261
    2ab4:	00006665 	.word	0x00006665

00002ab8 <_init>:
    2ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2abe:	bc08      	pop	{r3}
    2ac0:	469e      	mov	lr, r3
    2ac2:	4770      	bx	lr

00002ac4 <__init_array_start>:
    2ac4:	000000dd 	.word	0x000000dd

00002ac8 <_fini>:
    2ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ace:	bc08      	pop	{r3}
    2ad0:	469e      	mov	lr, r3
    2ad2:	4770      	bx	lr

00002ad4 <__fini_array_start>:
    2ad4:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <_impure_ptr>:
20000010:	0014 2000                                   ... 

20000014 <impure_data>:
	...
